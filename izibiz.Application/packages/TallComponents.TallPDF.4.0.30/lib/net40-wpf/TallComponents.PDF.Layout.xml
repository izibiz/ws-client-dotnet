<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TallComponents.PDF.Layout</name>
    </assembly>
    <members>
        <member name="T:TallComponents.PDF.Layout.Brushes.AxialGradientBrush">
            <summary>
            A brush that paints a gradient fill that changes from one color to another along a straight line.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.#ctor">
            <summary>
            Create a new AxialGradientBrush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.#ctor(TallComponents.PDF.Layout.Colors.Color,TallComponents.PDF.Layout.Colors.Color,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new AxialGradientBrush with given start and endpoint.
            </summary>
            <param name="startColor">The start color of the gradient fill.</param>
            <param name="endColor">The end color of the gradient fill.</param>
            <param name="startX">The horizontal position of the starting point of the gradient fill.</param>
            <param name="startY">The vertical position of the starting point of the gradient fill.</param>
            <param name="endX">The horizontal position of the ending point of the gradient fill.</param>
            <param name="endY">The vertical position of the ending point of the gradient fill.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.StartX">
            <summary>
            The horizontal position of the starting point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.StartY">
            <summary>
            The vertical position of the starting point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.EndX">
            <summary>
            The horizontal position of the ending point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.EndY">
            <summary>
            The vertical position of the ending point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.autosize(System.Double,System.Double)">
            <summary>
            Set properties to span the entire available area.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Brushes.Brush">
            <summary>
            When a path is drawn, enclosed areas are filled using a brush.
            Brush is an abstract base class for all brushes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.Brush.Clone">
            <summary>
            Clones a Brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.Brush.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.Brush.autosize(System.Double,System.Double)">
            <summary>
            Implement this method to help set defaults to fill the entire area if none are set.
            </summary>
            <remarks>This is used by Border to setup the background fill with easy defaults.</remarks>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.Brush.IsTransparent">
            <summary>
            Gets if the brushes colorspace is transparent
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Brushes.ColorStop">
            <summary>
            The ColorStop class lets you define multiple color stops for a gradient brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.ColorStop.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double)">
            <summary>
            Create a new color stop with given color and position.
            </summary>
            <param name="color">The color of this color stop.</param>
            <param name="position">The position of this color stop.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.ColorStop.Color">
            <summary>
            The color of this color stop.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.ColorStop.Position">
            <summary>
            The position of this color stop.
            </summary>
            <remarks>
            Position 0 corresponds with the start point for a linear color gradient and with the inner radius for a radial gradient brush. 
            Position 1 corresponds with the end point for a linear color gradient and with the outer radius for a radial gradient brush.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Brushes.ColorStopCollection">
            <summary>
            The ColorStopCollection class lets you define multiple color stops for a gradient brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.ColorStopCollection.#ctor(TallComponents.PDF.Layout.Colors.Color,TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Create a new collection with 2 initial color stops positioned at 0 and 1 with colors start and end, respectivey.
            </summary>
            <param name="start">This is the color of the color stop at position 0.</param>
            <param name="end">This is the color of the color stop at position 1.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.ColorStopCollection.Count">
            <summary>
            Number of color stops in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.ColorStopCollection.Add(TallComponents.PDF.Layout.Brushes.ColorStop)">
            <summary>
            Add a color stop to this collection.
            </summary>
            <param name="colorStop">Add this color stop.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.ColorStopCollection.Item(System.Int32)">
            <summary>
            The ColorStop on the given position
            </summary>
            <param name="index">the zero-based index.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.ColorStopCollection.Contains(TallComponents.PDF.Layout.Brushes.ColorStop)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStop">ColorStop</see> is in the <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStopCollection">ColorStopCollection</see>.
            </summary>
            <param name="colorStop">The <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStop"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStop"/> is found in this <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStopCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="colorStop"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="colorStop"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.ColorStopCollection.IndexOf(TallComponents.PDF.Layout.Brushes.ColorStop)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStop">ColorStop</see> in the <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStopCollection">ColorStopCollection</see>.
            </summary>
            <param name="colorStop">The <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStop"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStopCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Brushes.ColorStop"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.ColorStopCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.ColorStopCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Brushes.GradientBrush">
            <summary>
            An abstract base class for AxialGradientBrush and RadialGradientBrush that holds 
            common properties for these classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.GradientBrush.#ctor(TallComponents.PDF.Layout.Colors.Color,TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Set the start and endcolor of the gradientbrush derived class.
            </summary>
            <param name="startColor">The start color of the gradient fill.</param>
            <param name="endColor">The end color of the gradient fill.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.GradientBrush.StartColor">
            <summary>
            The start color of the gradient fill.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.GradientBrush.EndColor">
            <summary>
            The end color of the gradient fill.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.GradientBrush.Transform">
            <summary>
            Add an additional transformation to this gradient brush.
            </summary>
            <remarks>
            Default = null, meaning the identity matrix.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.GradientBrush.Clone">
            <summary>
            Clones a Brush.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Brushes.RadialGradientBrush">
            <summary>
            A brush that paints a gradient fill that changes from one color to another between an inner and an outer circle.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.#ctor">
            <summary>
            Create a new RadialGradientBrush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.#ctor(TallComponents.PDF.Layout.Colors.Color,TallComponents.PDF.Layout.Colors.Color,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new RadialGradientBrush with given centerpoint and radius of both circles.
            </summary>
            <param name="startColor">The start color of the gradient fill.</param>
            <param name="endColor">The end color of the gradient fill.</param>
            <param name="x">The horizontal position of the center point of both circles.</param>
            <param name="y">The vertical position of the center point of both circles.</param>
            <param name="innerRadius">The radius of the inner circle.</param>
            <param name="outerRadius">The radius of the outer circle.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.autosize(System.Double,System.Double)">
            <summary>
            Setup default values to span the entire area.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.X">
            <summary>
            The horizontal position of the center point of both circles. 
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.Y">
            <summary>
            The vertical position of the center point of both circles.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.R0">
            <summary>
            The radius of the inner circle.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.R1">
            <summary>
            The radius of the outer circle.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Brushes.SolidBrush">
            <summary>
            Solid brush. Used to control how a path is filled.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.SolidBrush.#ctor">
            <summary>
            Create a solid black brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.SolidBrush.#ctor(TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Create a solid brush with specified color.
            </summary>
            <param name="color">Color of this SolidBrush.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.SolidBrush.Color">
            <summary>
            Color of this brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.SolidBrush.Clone">
            <summary>
            Clones a Brush.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Brushes.TilingBrush">
            <summary>
            A brush that paints a pattern cell that is repeated from right to left, from top to bottom.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.TilingBrush.#ctor">
            <summary>
            Creates a new TilingBrush with an empty pattern.
            </summary>
            <remarks>
            Add shapes to the <see cref="P:TallComponents.PDF.Layout.Brushes.TilingBrush.Pattern">Pattern</see>. The pattern is repeated across the area that is filled.
            <example>
            XML
            <code><![CDATA[
            	<paragraph type="textparagraph">
            		<border>
            			<background type="tilingbrush">
            				<pattern width="50" height="50">
            					<shape type="rectangleshape" x="0" y="0" width="25" height="25">
            						<pen color="green" width="1"/>
            					</shape>
            				</pattern>
            			</background>
            		</border>
            		<fragment font="helvetica" fontsize="24">
            			Tiling brush in XML
            		</fragment>
               </paragraph>
            ]]></code>
            </example>
            </remarks>
            <seealso cref="T:TallComponents.PDF.Layout.Brushes.Brush"/>
            <seealso cref="T:TallComponents.PDF.Layout.Pens.Pen"/>
            <seealso cref="N:TallComponents.PDF.Layout.Shapes"/>
            <seealso cref="T:TallComponents.PDF.Layout.Shapes.Shape"/>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.TilingBrush.Transform">
            <summary>
            Add an additional transformation to this tiling brush.
            </summary>
            <remarks>
            Default = null, meaning the identity matrix.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Brushes.TilingBrush.Clone">
            <summary>
            Clones a Brush.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Brushes.TilingBrush.Pattern">
            <summary>
            The shapes that are repeated from right to left, from top to bottom. 
            </summary>
            <remarks>
            The appearance of each cell in the pattern is determined by the shapes added to this property.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Brushes.WrapMode">
            <summary>
            Specifies how the gradient behaves outside its start and end point. The SVG term for this is 'spread method'.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Brushes.WrapMode.Stop">
            <summary>
            The gradient does not extend outside the start and end points.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Brushes.WrapMode.Clamp">
            <summary>
            The gradient continues at the same color of the start or end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.CieBasedColor">
            <summary>
            Base class for all derived cie-based color classes.
            </summary>
            <remarks>
            This class is to structurize the color classes only, and has no functionality.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.CmykColor">
            <summary>
            CMYK color.
            </summary>
            <remarks>
            A color specified with 4 components: Cyan, Magenta, Yellow and Black.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.CmykColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a new CmykColor from it's components.
            </summary>
            <param name="c">Cyan component [0-255]</param>
            <param name="m">Magenta component [0-255]</param>
            <param name="y">Yellow component [0-255]</param>
            <param name="k">Black component [0-255]</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.C">
            <summary>
            The Cyan color component [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.M">
            <summary>
            The Magenta color component [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.Y">
            <summary>
            The Yellow color component [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.K">
            <summary>
            The Black color component [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.Name">
            <summary>
            The name of the CMYK color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.CmykColor.Convert">
            <summary>
            Convert this color to a System.Windows.Media.Color.
            </summary>
            <returns></returns>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.White">
            <summary>
            White (all component 0%)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Black">
            <summary>
            Process Black (100% black)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Cyan">
            <summary>
            Process Cyan (100% Cyan)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Magenta">
            <summary>
            Process Magenta (100% Magenta)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Yellow">
            <summary>
            Process Yellow (100% Yellow)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Red">
            <summary>
            CMYK Red
            </summary>
            <remarks>
            100% Magenta, 100% Yellow.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Orange">
            <summary>
            CMYK Orange
            </summary>
            <remarks>
            50% Magenta, 100% Yellow.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Green">
            <summary>
            CMYK Green
            </summary>
            <remarks>
            80% Cyan, 100% Yellow.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Blue">
            <summary>
            CMYK Blue
            </summary>
            <remarks>
            100% Cyan, 10% Magenta, 10% Black.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Purple">
            <summary>
            CMYK Purple
            </summary>
            <remarks>
            100% Cyan, 10% Magenta, 10% Black.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Pink">
            <summary>
            CMYK Pink
            </summary>
            <remarks>
            25% Magenta
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Gray">
            <summary>
            CMYK Gray
            </summary>
            <remarks>
            60% Black
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.LightGray">
            <summary>
            CMYK Light Gray
            </summary>
            <remarks>
            30% Black
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.Color">
            <summary>
            Base class for all derived color classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.Color.Convert">
            <summary>
            Convert this color to a WPF color.
            </summary>
            <returns>The converted color.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.Color.op_Implicit(System.Windows.Media.Color)~TallComponents.PDF.Layout.Colors.Color">
            <summary>
            Provides implicit conversion from a .Net system color.
            </summary>
            <param name="systemColor">The system color that will be implicitly casted.</param>
            <returns>A PDF.Colors.DeviceColor that has the same value as the .Net system color.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.Color.Clone">
            <summary>
            Clones a Color.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.Color.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Color
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.Color.Name">
            <summary>
            The name of the color. This can be a string describing the color
            or an actual name like Orange or Green.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.Color.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.Color.Parse(System.String)">
            <summary>
            Parse a string to extract a color.
            </summary>
            <remarks>
            The string representation of a color can be on of the following:
            <list type="table">
              <listheader>
                 <term>Format</term>
                 <description>Description</description>
              </listheader>
              <item>
                 <term>#RRGGBB</term>
                 <description>
                    Web color. Each component is a 2-digit hexadecimal number (00 - FF).
                    For example: <c>#9963FA</c>
                 </description>
              </item>
              <item>
                 <term>gray</term>
                 <description>
                    Gray color. <c>gray</c> is a value in the range 0 - 255.
                    For example: <c>128</c>
                 </description>
              </item>
              <item>
                 <term>r,g,b</term>
                 <description>
                    RGB color. Each component is a value in the range 0 - 255.
                    For example: <c>128,5,233</c>
                 </description>
              </item>
              <item>
                 <term>c,m,y,k</term>
                 <description>
                    CMYK color. Each component is a value in the range 0 - 255.
                    For example: <c>12,255,6,128</c>
                 </description>
              </item>
               <item>
                 <term>ColorName</term>
                 <description>
                    A named color. Currently supported are all named colors available in
                    System.Drawing.Color.
                    For example: <c>SkyBlue</c>
                 </description>
              </item>
            </list>
            Instead of the fixed values (0-255) also a relative value (0%-100%) is allowed. This
            is converted to 0-255.
            </remarks>
            <param name="color">A string describing a color.</param>
            <returns>A Color.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.Color.Transparent">
            <summary>
            The color Transparent is a special instance of color.
            It is completely transparent and has no components.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.Color.Equals(System.Object)">
            <summary>
            Compares two colors.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.Color.GetHashCode">
            <summary>
            Provides a hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.DeviceColor">
            <summary>
            Base class for all derived device color classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.DeviceColor.Convert(System.Windows.Media.Color)">
            <summary>
            Convert a WPF color to a PDF device color.
            </summary>
            <param name="wpfColor"></param>
            <returns>
            A Color or <see langword="null"/> if the WPF color is Transparant.
            </returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.GrayColor">
            <summary>
            Gray color.
            </summary>
            <remarks>
            A color specified with only 1 component: The grayscale value.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.GrayColor.#ctor(System.Byte)">
            <summary>
            Create a new GrayColor from it's single color component.
            </summary>
            <param name="colorValue">Grayscale value [0-255].</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.GrayColor.Value">
            <summary>
            The grayscale value [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.GrayColor.Name">
            <summary>
            The name of the gray scale color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.GrayColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.GrayColor.White">
            <summary>
            Grey white
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.GrayColor.Black">
            <summary>
            Grey Black
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.GrayColor.Convert">
            <summary>
            Convert to a .Net system color.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.IccBasedColor">
            <summary>
            An icc-based color.
            </summary>
            <remarks>
            A color that is specified using corresponding icc profile on a page.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.IccBasedColor.#ctor(TallComponents.PDF.Layout.Colors.IccColorSpace,System.Double[])">
            <summary>
            Create a new icc based color using specified colorspace and color components in range [0-255].
            </summary>
            <param name="colorSpace">The Icc color space of the color.</param>
            <param name="components">An array of component values. The length of the array should match the number of
            components of the color space.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.IccBasedColor.Name">
            <summary>
            The name of the color.
            </summary>
            <remarks>
            You need to specify the name in the constructor.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.IccBasedColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
            <remarks>
            The ICC based color throws a NotSupportedException.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.IccBasedColor.ConvertToRgbValues">
            <summary>
            Converts current color to sRGB.
            </summary>
            <returns>An array containing color components.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.IccBasedColor.Convert">
            <summary>
            Convert this color to a .Net system color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.IccBasedColor.IccColorSpace">
            <summary>
            Gets the icc color space  instance for this color.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.IccColorSpace">
            <summary>
            Represents an ICC colorspace instance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.IccColorSpace.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Layout.Colors.IccColorSpace"/> class.
            </summary>
            <param name="profileData">The profile data.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="profileData"/> is null.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.IccColorSpace.NumberOfComponents">
            <summary>
            Gets the number of color components this profile assumes.
            </summary>
            <value>
            The number of color components.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.IccColorSpace.IccProfile">
            <summary>
            Gets the icc profile associated with current instance.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.IccColorSpace.IccProfileObject">
            <summary>
            Gets the icc profile object, which represents the low-level PDF object.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.IndexedColor">
            <summary>
            Indexed color.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.IndexedColor.#ctor(System.Int32)">
            <summary>
            Create and IndexedColor.
            </summary>
            <param name="index">The 0-based index in the color table.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.IndexedColor.Index">
            <summary>
            The 0-based index in the color table.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.IndexedColor.Name">
            <summary>
            The name of this color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.IndexedColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
            <remarks>
            The IndexColor thrown a NotSupportedException
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.LinearCmykTintTransform">
            <summary>
            A Linear Cmyk Tint Transform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.LinearCmykTintTransform.#ctor">
            <summary>
            Create a new LinearCmykTintTransform with color Black.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.LinearCmykTintTransform.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new Linear Cmyk Tint Transform  from it's components.
            </summary>
            <param name="c">Cyan component [0-255]</param>
            <param name="m">Magenta component [0-255]</param>
            <param name="y">Yellow component [0-255]</param>
            <param name="k">Black component [0-255]</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.LinearCmykTintTransform.#ctor(TallComponents.PDF.Layout.Colors.CmykColor)">
            <summary>
            Create a new Linear Cmyk Tint Transform.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.LinearCmykTintTransform.Value">
            <summary>
            The Cmyk Color used in this tint transform.
            </summary>
            <remarks>
            You cannot set the value to null.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.RgbaColor">
            <summary>
            Rgba color
            </summary>
            <remarks>
            The Alpha value is ignored in PDF drawing operations.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an RgbaColor from it's color components.
            </summary>
            <param name="r">Red color component [0-255]</param>
            <param name="g">Green color component [0-255]</param>
            <param name="b">Blue color component [0-255]</param>
            <param name="a">Alpha color component [0-255]</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.#ctor(TallComponents.PDF.Layout.Colors.RgbaColor)">
            <summary>
            Create a new RGBAColor based on another one
            </summary>
            <param name="color">The original color to copy</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.#ctor(TallComponents.PDF.Layout.Colors.RgbColor)">
            <summary>
            Create a new RGBAColor based onan RGBColor
            </summary>
            <param name="color">The RGBColor instance to copy</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.#ctor(System.Windows.Media.Color)">
            <summary>
            Create an Rgba color from a System.Windows.Media.Color.
            </summary>
            <param name="color">A .NET system color.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.R">
            <summary>
            Red color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.G">
            <summary>
            Green color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.B">
            <summary>
            Blue color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.A">
            <summary>
            Alpha color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.Name">
            <summary>
            The name of the color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
            <remarks>
            The RgbaColor thrown a NotSupportedException.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.Convert">
            <summary>
            Convert to a .Net system color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.ConvertWpf">
            <summary>
            Convert to a .Net system color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.op_Implicit(System.Windows.Media.Color)~TallComponents.PDF.Layout.Colors.RgbaColor">
            <summary>
            Provides implicit conversion from a .Net system color.
            </summary>
            <param name="systemColor">The system color that will be implicitly casted.</param>
            <returns>A PDF.Colors.RgbaColor that has the same value as the .Net system color.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.ToArgb">
            <summary>
            <para>Gets the 32-bit ARGB value of this color.</para>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.ToRgbColor">
            <summary>
            Convert this RgbaColor to an RgbColor.
            </summary>
            <remarks>
            Effectively discards the Alpha component.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbaColor.ToGrayscaleColor">
            <summary>
            Convert this RGBAColor to a GrayscaleColor.
            </summary>
            <remarks>
            Calculates the average value of the RGB components. Alpha is ignored.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.DarkGray">
            <summary>
            RGBA DarkGray
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.LightGray">
            <summary>
            RGBA LightGray
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.White">
            <summary>
            RGBA White
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.Black">
            <summary>
            RGBA Black
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.Red">
            <summary>
            RGBA Black
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbaColor.Transparent">
            <summary>
            Transparent color
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.RgbColor">
            <summary>
            RGB color.
            </summary>
            <remarks>
            A color specified with 3 components: Red, Green and Blue.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a new RgbColor from it's color components.
            </summary>
            <param name="r">Red color component [0-255]</param>
            <param name="g">Green color component [0-255]</param>
            <param name="b">Blue color component [0-255]</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbColor.#ctor(System.Windows.Media.Color)">
            <summary>
            Create a new RgbColor from a System.Windows.Media.Color.
            </summary>
            <param name="color">A .NET system color.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.R">
            <summary>
            Red color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.G">
            <summary>
            Green color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.B">
            <summary>
            Blue color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.Name">
            <summary>
            The name of the RGB color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbColor.Convert">
            <summary>
            Convert to a System.Windows.Media.Color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbColor.op_Implicit(System.Windows.Media.Color)~TallComponents.PDF.Layout.Colors.RgbColor">
            <summary>
            Provides implicit conversion from System.Windows.Media.Color.
            </summary>
            <param name="systemColor">The system color that will be implicitly casted.</param>
            <returns>A PDF.Colors.RgbColor that has the same value as the System.Windows.Media.Color.</returns>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.White">
            <summary>
            RGB White
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Gray">
            <summary>
            RGB Gray
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Black">
            <summary>
            RGB Black
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Red">
            <summary>
            RGB Red
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Green">
            <summary>
            RGB Green
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Blue">
            <summary>
            RGB Blue
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Orange">
            <summary>
            RGB Orange
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Yellow">
            <summary>
            RGB Yellow
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Purple">
            <summary>
            RGB Purple
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.RgbColor.FromColorName(System.String)">
            <summary>
            Transforms color name into TallComponents.PDF.Colors.RgbColor
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.SpotColor">
            <summary>
            Seperation color (also known as spot color).
            </summary>
            <remarks>
            A color specifies a seperation name and an alternative color.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.SpotColor.#ctor(System.String)">
            <summary>
            Create a new spot color.
            </summary>
            <param name="name">The name from the spot color.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.SpotColor.#ctor(System.String,TallComponents.PDF.Layout.Colors.TintTransform)">
            <summary>
            Create a new seperation color.
            </summary>
            <param name="name">The name from the spot color.</param>
            <param name="tintTransform">The tint transformation; used if the output device doesn't support the spot color name.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.SpotColor.#ctor(System.String,TallComponents.PDF.Layout.Colors.TintTransform,System.Double)">
            <summary>
            Create a new spot color.
            </summary>
            <param name="name">The name from the spot color.</param>
            <param name="tintTransform">The tint transformation; used if the output device doesn't support the spot color name.</param>
            <param name="tint">The tint component [0-1].</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.SpotColor.TintTransform">
            <summary>
            The tint transformation; used if the output device doesn't support the spot color name.
            </summary>
            <remarks>
            Setting this property to a TintTransform instance is required.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.SpotColor.Tint">
            <summary>
            The Tint component [0-1].
            </summary>
            <remarks>
            Default = 1.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.SpotColor.Name">
            <summary>
            The name of the spot color.
            </summary>
            <remarks>
            You need to specify the name in the constructor.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.SpotColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
            <remarks>
            The spotColor thrown a NotSupportedException.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.SpotColor.Convert">
            <summary>
            Convert this color to a .Net system color.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.SpecialColor">
            <summary>
            Base class for all derived special color classes.
            </summary>
            <remarks>
            This class is to structurize the color classes only, and has no functionality.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.TintTransform">
            <summary>
            Base class for all derived tint transform classes.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Colors.TransparentColor">
            <summary>
            Transparent color.
            </summary>
            <remarks>
            This class can be used to specify no color.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.TransparentColor.#ctor">
            <summary>
            Create a transparent color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.TransparentColor.Name">
            <summary>
            The name of the color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Colors.TransparentColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Colors.TransparentColor.Convert">
            <summary>
            Convert this color to a GDI color.
            </summary>
            <returns>The converted color.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Css.CssSelector">
            <summary>
            CSS 2.1 Selector.
            </summary>
            <remarks>
            CSS selectors look like this: <code>[context ]tag.class#id:state</code>
            For example: <code>p.footerclass#myid</code>
            The properties can be combined as needed. 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssSelector.Tag">
            <summary>
            Get the tag for this selector.
            </summary>
            <remarks>
            Always null or lowercase and trimmed.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssSelector.HasTag">
            <summary>
            Returns if the 'tag' is an 'empty' container.
            </summary>
            <returns>True if the tag is not null and not [empty] (empty includes *).</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssSelector.Class">
            <summary>
            Get the class for this selector
            </summary>
            <remarks>
            Always null or lowercase and trimmed.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssSelector.HasClass">
            <summary>
            Returns if the 'Class' is an 'empty' container.
            </summary>
            <returns>True if the class is not null and not [empty] (empty includes *).</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssSelector.Id">
            <summary>
            Get the ID for this selector
            </summary>
            <remarks>
            Always null or lowercase and trimmed.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssSelector.HasId">
            <summary>
            Returns if the 'id' is an 'empty' container.
            </summary>
            <returns>True if the id is not null and not [empty] (empty includes *).</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssSelector.DefaultSelector">
            <summary>
            Use this selector if the default value has to be determined.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssSelector.ToString">
            <summary>
            Get the formatted string for the selector.
            </summary>
            <returns>The formatted string for this selector.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssSelector.FormatSelector(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get the formatted string for the selector.
            </summary>
            <param name="selectTag">The tag name. <see langword="null"/>, empty or * if not included.</param>
            <param name="selectClass">The class name. <see langword="null"/> or empty if not included.</param>
            <param name="selectId">The selector ID. <see langword="null"/> or empty is not included.</param>
            <param name="important">The important flag for the selector.</param>
            <returns>The formatted text-representation in the format: &quot;!tag.class#id&quot;.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssSelector.hasValue(System.String)">
            <summary>
            Tests if the string to test is an 'empty' container.
            </summary>
            <param name="test">The string to test.</param>
            <returns>True if the teststring is not null and not [empty] (empty includes *).</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Css.CssSelectorEnumerator">
            <summary>
            CssSelector enumerator that enumerates through all priorities of the selector.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssSelectorEnumerator.#ctor(TallComponents.PDF.Layout.Css.CssSelector)">
            <summary>
            Creates a new instance of the CssSelectorEnumerator.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssSelectorEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current enumeration value.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssSelectorEnumerator.Current">
            <summary>
            Gets the current enumeration value.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssSelectorEnumerator.System#IDisposable#Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssSelectorEnumerator.MoveNext">
            <summary>
            Moves the enumerator to the next item/element.
            </summary>
            <remarks>For efficiency the 'empty' items are skipped. First checks if Important ones are set.</remarks>
            <returns>True if there are more elements.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssSelectorEnumerator.Reset">
            <summary>
            Resets the current enumerator
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Css.CssStyle">
            <summary>
            Handler to access CSS Properties when using the CSS 2.1 style definition.
            </summary>
            <remarks>This class is intended for accessing the properties and 
            applying overrides that are needed on that level only. Base styles should be 
            specified seperately and 'given' to the lowest level. </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.#ctor">
            <summary>
            Construct a CssStyle from a textual style definition.
            </summary>
            <example>new CssStyle("font: Helvetica; font-size: 12pt")</example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.#ctor(TallComponents.PDF.Layout.Css.CssStyle)">
            <summary>
            Construct a CssStyle from a textual style definition.
            </summary>
            <remarks>Use this constructor when nesting into the next deeper 
            level in a (x)html file.</remarks>
            <example>new CssStyle(parent)</example>
            <param name="parent">Parent CssStyle</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.#ctor(TallComponents.PDF.Layout.Css.CssStyleSheet)">
            <summary>
            Construct a CssStyle from a textual style definition.
            </summary>
            <remarks>Use this constructor when starting to process a (x)html file.</remarks>
            <example>new CssStyle("font: Helvetica; font-size: 12pt", parent)</example>
            <param name="parentStyleSheet">The root style sheet to use (user level).</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.ApplyBaseStyleSheet(System.String)">
            <summary>
            Applies the style as base style.
            </summary>
            <remarks>
            The new style will be inserted at the lowest point of the CssStyle (deepest parent).
            This way it is applied on the 'default' level.
            </remarks>
            <param name="style">The new css style to apply.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.ApplyBaseStyleSheet(System.String,System.String)">
            <summary>
            Applies the style as base style.
            </summary>
            <remarks>
            The new style will be inserted at the lowest point of the CssStyle (deepest parent).
            This way it is applied on the 'default' level.
            </remarks>
            <param name="style">The new css style to apply.</param>
            <param name="basepath">Basepath when loading included styles.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.ApplyBaseStyleSheetFromPath(System.String,System.String)">
            <summary>
            Applies the style from the given location as base style.
            </summary>
            <remarks>
            The new style will be inserted at the lowest point of the CssStyle (deepest parent).
            This way it is applied on the 'default' level.
            </remarks>
            <param name="path">The (partial) path to the new css style to apply.</param>
            <param name="basepath">Basepath when loading included styles.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.ApplyStyle(System.String)">
            <summary>
            Applies a override to the style for the current selector.
            </summary>
            <param name="style">The new style attributes to apply.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.ApplyStyle(TallComponents.PDF.Layout.Css.CssSelector,System.String)">
            <summary>
            Applies a override to the style for the given selector.
            </summary>
            <param name="selector">The selector that has to receive the override.</param>
            <param name="style">The new style attributes to apply.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.ApplyStyle(System.String,System.String)">
            <summary>
            Applies a override to the style for the given selector.
            </summary>
            <param name="selector">The selector that has to receive the override.</param>
            <param name="style">The new style attributes to apply.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Tag">
            <summary>
            The current selected Tag.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Class">
            <summary>
            The current selected Class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Id">
            <summary>
            The current selected ID.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.ResetPrivates">
            <summary>
            Resets properties that should not be forwarded to child elements
            </summary>
            <remarks>Currently involved properties:
            <para>- PageBreakBefore</para>
            <para>- PageBreakAfter</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Color">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Margin">
            <summary>
            Margin
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Padding">
            <summary>
            Padding
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Italic">
            <summary>
            Use italic font
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Bold">
            <summary>
            Use bold font
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Underline">
            <summary>
            Underline text
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.StrikeThrough">
            <summary>
            Strikethrough text
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Subscript">
            <summary>
            Subscript
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Superscript">
            <summary>
            Superscript
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.FontFamily">
            <summary>
            A family of fonts, defining the Normal, Bold, Italic and BoldItalic font variants.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.FirstLineTextIndent">
            <summary>
            The first line indent in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.IsOwnFontSizeDefined">
            <summary>
            Gets a value indicating whether the own font-size is defined for the element.
            </summary>
            <value>
            	<c>true</c> if the own font-size is defined; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.FontSize">
            <summary>
            Font size in points
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Width">
            <summary>
            Width in points
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Height">
            <summary>
            Height in points
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.TextAlign">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Justify">
            <summary>
            Justification
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.Visible">
            <summary>
            Visible
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.PreserveWhitespace">
            <summary>
            Preserve Whitespace
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.ParseColor(System.String)">
            <summary>
            Get a color from a string. 
            </summary>
            <remarks>
            Uses <see cref="M:TallComponents.PDF.Layout.Colors.Color.Parse(System.String)"/>.
            </remarks>
            <param name="s">The string to parse.</param>
            <returns>The color, or black if no matching color was found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.ParseWidth(System.String)">
            <summary>
            Parse a width declaration used by borders.
            </summary>
            <param name="width">The width to resolve.</param>
            <returns>The converted width in points.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.getPen(System.String)">
            <summary>
            Create a pen from a CSS declaration
            </summary>
            <param name="value">A definition following the CSS border definition.</param>
            <returns>The generated pen or null if none is needed (transparent)</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.GetCurrentValue(System.String)">
            <summary>
            Retrieves the value for the given element.
            </summary>
            <remarks>Does not itterate through the context if the element cannot be 
            resolved using the current selector.</remarks>
            <param name="element">The element to determine the value for.</param>
            <returns>The string value for the element or null if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.GetValue(System.String,System.Boolean)">
            <summary>
            Retrieves the value for the given element.
            </summary>
            <remarks>Iterates through the context if the element cannot be 
            resolved using the current selector. Also checks the default value.</remarks>
            <param name="element">The element to determine the value for.</param>
            <param name="untilDefinedClass">Only process the parent if the 'class' is null.</param>
            <returns>The string value for the element or null if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.GetValue(System.String)">
            <summary>
            Retrieves the value for the given element.
            </summary>
            <remarks>Iterates through the context if the element cannot be 
            resolved using the current selector. Also checks the default value.</remarks>
            <param name="element">The element to determine the value for.</param>
            <returns>The string value for the element or null if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.GetStyleValue(System.String,System.Boolean)">
            <summary>
            Gets the value for the given element, iterates through the context.
            </summary>
            <param name="element">The element to determine the value for.</param>
            <param name="untilDefinedClass">Only process the parent if the 'class' is null.</param>
            <returns>The string value assignd to the element.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyle.GetDefaultStyleValue(System.String)">
            <summary>
            Gets the value for the given element, assigned to the *-selector.
            </summary>
            <param name="element">The element to determine the default value for.</param>
            <returns>The default string value, null if not defined.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.PageBreakAfter">
            <summary>
            Get if a page break has to be inserted after this element.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.VerticalAlign">
            <summary>
            Gets the vertical align.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.PageBreakBefore">
            <summary>
            Get if a page break has to be inserted before this element.
            </summary>
            <remarks>Also checks the delayed page break after as break after is simulated
            by a break before on the next block element.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyle.DelayedPageBreakAfter">
            <summary>
            As our paragraphs only support page-break before a work around is needed...
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Css.CssStyleElementSelection">
            <summary>
            Holds the value assigned to a value.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleElementSelection.#ctor(System.String)">
            <summary>
            Creates a new instance of the CssStyleElementSelection for the given element.
            </summary>
            <param name="element">The name of the element</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyleElementSelection.Element">
            <summary>
            Get the element identifier.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleElementSelection.Add(System.String,System.String)">
            <summary>
            Assigns the value to the element for the given selector.
            </summary>
            <param name="selector">The selector to store the value for.</param>
            <param name="value">The new value to assign</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleElementSelection.GetValue(System.String)">
            <summary>
            Get the value of the element for the given selector.
            </summary>
            <param name="selector">The selector to check for.</param>
            <returns>The value assigned to the elelemt for the given selector, 
            null if the parent value has to be eveluated/inherited.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Css.CssStyleSheet">
            <summary>
            Holds the style sheet definition and allows querying.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor(TallComponents.PDF.Layout.Css.CssStyleSheet)">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
            <param name="parent">The stylesheet that has to be assigned as the parent of this new style sheet.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor(System.String)">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
            <param name="path">The (relative) (web)path to the stylesheet to load.</param>
            <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various
            types. The first matching is evaluated:
            <para>- path is a complete url</para>
            <para>- path is a local file (relative to current working folder)</para>
            <para>- the application is running in a web context: the web path are resolved locally.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
            <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various
            types. The first matching is evaluated:
            <para>- path is already a complete url</para>
            <para>- basepath is a url, appends the stylesheetName</para>
            <para>- path is a local file (relative to current working folder)</para>
            <para>- path is a local file (relative to given basepath)</para>
            <para>- the application is running in a web context: the web paths are resolved locally.</para>
            </remarks>
            <param name="path">The (relative) (web)path to the stylesheet to load.</param>
            <param name="basepath">The basepath for included pa</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
            <param name="stream">The stream that holds the stylesheet to load.</param>
            <remarks>
            You should close/dispose the given stream, it can be done after this call is returned.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.Read(System.Xml.XmlReader)">
            <summary>
            Read the stylesheet from XML.
            </summary>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.Parse(System.String)">
            <summary>
            Used by XML processor to load a css style sheet from a path.
            </summary>
            <param name="path">Path to load the stylesheet from.</param>
            <returns>The CssStyleSheet holding the loaded and parsed stylesheet.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.Clear">
            <summary>
            Clears the complete sheet.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.ApplyStyleSheetFromPath(System.String,System.String)">
            <summary>
            Process a batch of styles from a given location and apply them to the current stylesheet.
            </summary>
            <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various
            types. The first matching is evaluated:
            <para>- path is already a complete url</para>
            <para>- basepath is a url, appends the path</para>
            <para>- path is a local file (relative to current working folder)</para>
            <para>- path is a local file (relative to given basepath)</para>
            <para>- the application is running in a web context: the web paths are resolved locally.</para>
            </remarks>
            <param name="path">The (relative) (web)path to the stylesheet to load.</param>
            <param name="basepath">The base path to load the style sheet from.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.ApplyStyleSheet(System.String,System.String)">
            <summary>
            Process a batch of styles and apply them to the current stylesheet.
            </summary>
            <remarks>
            This is used for inline stylesheets, including support for importing
            additional external stylesheets.
            </remarks>
            <param name="styleSheet">The CSS style declarations to apply.</param>
            <param name="basePath">Base path for loading included style sheets.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.ApplyStyleSheet(System.String)">
            <summary>
            Process a batch of styles and apply them to the current stylesheet.
            </summary>
            <remarks>
            This is used for inline stylesheets, without support for importing
            additional external stylesheets (will be ignored).
            </remarks>
            <param name="styleSheet">The CSS style declarations to apply.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.ApplyStyle(System.String,System.String)">
            <summary>
            Add a single style.
            </summary>
            <remarks>
            Any existing style properties for the given selector are kept.</remarks>
            <param name="selector">The CSS selector.</param>
            <param name="style">The style description.</param>
            <example>
            C#
            <code>
              myStyleSheet.ApplyStyle("p.special","color: green; font-weight: bold");
            </code>
            </example>
        </member>
        <member name="P:TallComponents.PDF.Layout.Css.CssStyleSheet.Parent">
            <summary>
            Get or set the parent of this style sheet.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.GetValue(System.String,TallComponents.PDF.Layout.Css.CssSelector)">
            <summary>
            Get the value for the specified element using the specified selector.
            </summary>
            <param name="element">The style element to retrieve the value for.</param>
            <param name="selector">The selector that holds the selection criteria.</param>
            <returns>The string value found or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.GetValue(System.String,System.String)">
            <summary>
            Get the value for the specified selector, including checking parent definition.
            </summary>
            <param name="selector">The selector in the format "!context tag.class#id".</param>
            <param name="element">The element to retrieve the value for.</param>
            <returns>The string value found or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.Clone">
            <summary>
            Clones a CssStyleSheet.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a CssStyleSheet
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.CertificateStoreSignatureHandler.Certificates">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.CertificateStoreSignatureHandler.DistinguishedName">
            <summary>
            The Distinguished Name (DN) of the person or authority signing the document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.ISignatureHandlerFactory.Create(System.String,System.Int32,System.String)">
            <summary>
            This function returns a SignatureHandler which can validate a signature with given attributes.
            </summary>
            <param name="filter">The filter.</param>
            <param name="revision">The revision.</param>
            <param name="subFilter">The sub filter.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store">
            <summary>
            A Pkcs #12 key store.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store.#ctor(System.IO.Stream,System.String)">
            <summary>
            Create a new Pkcs #12 key store from a stream.
            </summary>
            <remarks>
            The <paramref name="stream"/> may be closed when the constructor completes.
            It is the responsibility of the client to close the stream.
            </remarks>
            <param name="stream">A stream containing a Pkcs #12 key store.</param>
            <param name="password">The password required to open the store.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a Pkcs12Store from a chain 
            </summary>
            <remarks>
            Available as of .NET 2.0.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a Pkcs12Store from a Certificate.
            </summary>
            <remarks>
            A complete chain must be buildable from the given certificate.
            The used RevocationMode will be X509RevocationMode.Offline, if you want an other
            revocation mode, please use the X509Chain overload.
            <para>Available as of .NET 2.0.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store.Names">
            <summary>
            The names of all certificates in the store that can be used for signing.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store.GetKey(System.String)">
            <summary>
            Get the key associated with the specified name.
            </summary>
            <param name="name">The name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store.GetCertificate(System.String)">
            <summary>
            Get the certificate associated with the name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store.GetCertificateChain(System.String)">
            <summary>
            Get the certificate chain that is associated with the name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store.buildPkcs12Store(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String)">
            <summary>
            Build a PKCS12 keystore from the given certificate list.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler">
            <summary>
            Pkcs #1 signature handler.
            </summary>
            <remarks>
            Pkcs #1 signatures are used with self-signed certificates.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.#ctor">
            <summary>
            Create a new Pkcs #1 signature handler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.#ctor(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new Pkcs1SignatureHandler and use the first key from the store to sign.
            </summary>
            <param name="keyStore">A key store.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.#ctor(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new Pkcs1SignatureHandler and use the given key from the store to sign.
            </summary>
            <param name="keyStore">A key store.</param>
            <param name="name">Name of the key to use for signing.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new Pkcs1SignatureHandler and use the given chain to sign.
            </summary>
            <param name="chain">The chain containing the private key.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new Pkcs1SignatureHandler and use the given certificate to sign.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.Revision">
            <summary>
            Revision number of the SignatureHandler.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.MaxDigestLength">
            <summary>
            The maximum length of the digest.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.UsePropBuild">
            <summary>
            You can specify if you want to use the PropertyBuild structure or not. (default true)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.Certificates">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs1SignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
            <param name="bytesToVerify">For internal use only.</param>
            <param name="digest">For internal use only.</param>
            <param name="certificates">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler">
            <summary>
            Pkcs7Detached signature handler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler to sign a signature using the first key in the store.
            </summary>
            <param name="keyStore">A key store.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler to sign a signature using the specified key in the store.
            </summary>
            <param name="keyStore">A key store.</param>
            <param name="name">Name of the key to use for signing.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler and use the given chain to sign.
            </summary>
            <param name="chain">The chain containing the private key.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler and use the given certificate to sign.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler.Revision">
            <summary>
            Revision number of the SignatureHandler.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler.UsePropBuild">
            <summary>
            You can specify if you want to use the PropertyBuild structure or not. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler.MaxDigestLength">
            <summary>
            The maximum length of the digest.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7DetachedSignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
            <param name="bytesToVerify">For internal use only.</param>
            <param name="digest">For internal use only.</param>
            <param name="certificates">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7Sha1SignatureHandler">
            <summary>
            Pkcs#7 Sha1 signature handler.
            </summary>
            <remarks>
            This is the most common signature on Microsoft Windows systems.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor">
            <summary>
            Create a new SignatureHandler using PKCS#7 SHA1 encoding.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the first key from the store to sign.
            </summary>
            <param name="keyStore">A key store.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the given key from the store to sign.
            </summary>
            <param name="keyStore">A key store.</param>
            <param name="name">Name of the key to use for signing.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the given chain to sign.
            </summary>
            <param name="chain">The chain containing the private key.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the given certificate to sign.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7Sha1SignatureHandler.MaxDigestLength">
            <summary>
            The maximum length of the digest.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7Sha1SignatureHandler.Revision">
            <summary>
            Revision number of the SignatureHandler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.Pkcs7Sha1SignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
            <param name="bytesToVerify">For internal use only.</param>
            <param name="digest">For internal use only.</param>
            <param name="certificates">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler">
            <summary>
            Abstract base class of all signature handlers.
            </summary>
            <remarks>
            You should override this class when implementing a custom signature handler.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.Filter">
            <summary>
            The name of this signarure handler.
            </summary>
            <example>
            Adobe.PPKLite, Entrust.PPKEF, CICI.SignIt and VeriSign.PPKVS
            </example>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.Revision">
            <summary>
            The version of this signature handler.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.SubFilter">
            <summary>
            The name that identifies the encoding of the signature value and key information.
            </summary>
            <example>
            adbe.x509.rsa_sha1, adbe.pkcs7.detached and adbe.pkcs7.sha1
            </example>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.Name">
            <summary>
            The name of the person or authority signing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.DistinguishedName">
            <summary>
            The Distinguished Name (DN) of the person or authority signing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.Certificates">
            <summary>
            An array of strings representing the X.509 certicicate chain used for signing 
            and validating signatures that use public-key cryptology.
            </summary>
            <remarks>
            Only required when SubFilter is adbe.x509.rsa_sha1
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.SignDate">
            <summary>
            The date and time of signing.
            </summary>
            <remarks>
            Should only be used when the date and time of signing is not available in the signature.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.MaxDigestLength">
            <summary>
            The maximum length in bytes of the digest as returned by the Sign function (default 300).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.UsePropBuild">
            <summary>
            You can specify if you want to use the PropertyBuild structure or not. (default false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.CanSign">
            <summary>
            Returns true if and only if this signature handler can be used to sign a document.
            </summary>
            <remarks>
            If this property returns true, the Sign() method should have an implementation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.Sign(System.Byte[])">
            <summary>
            Signs the given bytes and returns the digest.
            </summary>
            <param name="bytesToSign">The bytes to sign.</param>
            <returns>The digist for the bytesToSign.</returns>
            <remarks>
            This function may return false, if not implemented.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.CanVerify">
            <summary>
            Returns if this signature handler can be used to verify a document.
            </summary>
            <remarks>
            If true is returned the Verify() function should have an implementation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            This function verifies the given bytes.
            </summary>
            <param name="bytesToVerify">The bytes to verify.</param>
            <param name="digest">The digest calculated by the Sign function.</param>
            <param name="certificates">The certificate info if not present in the digest (can be <see langword="null"/>).</param>
            <returns>True if the bytesToVerify are correct, otherwise false.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.Filter">
            <summary>
            The name for this signarure handler
            </summary>
            <example>
            Adobe.PPKLite, Entrust.PPKEF, CICI.SignIt and VeriSign.PPKVS
            </example>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.Revision">
            <summary>
            The version of the signature handler
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.SubFilter">
            <summary>
            The name that describes the encoding of the signature value and key information.
            </summary>
            <example>
            adbe.x509.rsa_sha1, adbe.pkcs7.detached and adbe.pkcs7.sha1
            </example>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.Name">
            <summary>
            The name of the person or authority signing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.DistinguishedName">
            <summary>
            The Distinguished name (DN) of the person or authority signing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.Certificates">
            <summary>
            An array of strings representing the X.509 certicicate chain used for signing 
            and validating signatures that use public-key cryptology.
            </summary>
            <remarks>
            Only required when SubFilter is adbe.x509.rsa_sha1
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.SignDate">
            <summary>
            The time of signing.
            </summary>
            <remarks>
            This property should be used only when the time of signing is not available in the signature.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.MaxDigestLength">
            <summary>
            This property specifies the maximum number of bytes that the digist returned by the Sign function can be. (default 200).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.UsePropBuild">
            <summary>
            You can specify if you want to use the PropertyBuild structure or not. (default true)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.CanSign">
            <summary>
            Returns if this signature handler can be used to sign a document.
            </summary>
            <remarks>
            If true is returned the Sign() function should have an implementation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.Sign(System.Byte[])">
            <summary>
            This function signs the given bytes and returns the digest.
            </summary>
            <param name="bytesToSign">The bytes to sign.</param>
            <returns>The digist for the bytesToSign.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.CanVerify">
            <summary>
            Returns if this signature handler can be used to verify a document.
            </summary>
            <remarks>
            If true is returned the Verify() function should have an implementation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.SignatureHandlerProxy.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            This function verifies the given bytes.
            </summary>
            <param name="bytesToVerify">The bytes to verify.</param>
            <param name="digest">The digest calculated by the Sign function.</param>
            <param name="certificates">The certificate info if not present in the digest (can be <see langword="null"/>).</param>
            <returns>True if the bytesToVerify are correct, otherwise false.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler">
            <summary>
            The base class of all standard signature handlers. 
            </summary>
            <remarks>
            Do not override this class directly in your code.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.hashAlgorithm">
            The hash algorith, for example "SHA1"
        </member>
        <member name="F:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.pkcs">
            The class instance that calculates the PKCS#1 and PKCS#7
        </member>
        <member name="F:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.filter">
            The subject name in the signing certificate (the element "CN")
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.#ctor(System.String,System.String)">
            <summary>
            Create a signature handler with the specified filter and subfilter.
            </summary>
            <param name="filter"></param>
            <param name="subFilter"></param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.Create(System.Xml.XmlReader)">
            <summary>
            Constructs a StandardSignatureHandler from an XML reader.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.Create(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
            <param name="chain">The chain containing the private key.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.Create(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.Create(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
            <param name="keyStore">The key store containing the private key.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.Create(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
            <remarks>
            This method creates a signature handler best suited for signing based on the signing certificate's properties.
            <para>Note that a complete chain of certificates up to the root CA certificate or a self signed certificate is required within the key store.</para>
            </remarks>
            <param name="keyStore">The key store containing the private key.</param>
            <param name="name">The name that is associated with the private key in the store.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.SetSignInfo(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Setup the signature with the information needed to sign.
            </summary>
            <param name="keyStore">The key store containing the private key.</param>
            <param name="name">The name that is associated with the private key in the store.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.Name">
            <summary>
            The subject name in the signing certificate (the element "CN")
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.Signer">
            <summary>
            The class instance that does the actual signing.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.Filter">
            <summary>
            The filter parameter used in the PDF document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.SubFilter">
            <summary>
            The subfilter parameter used in the PDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.Sign(System.Byte[])">
            <summary>
            Signs the given bytes and returns the digest.
            </summary>
            <param name="bytesToSign">Sign these bytes</param>
            <returns>The calculated signature</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.SignDate">
            <summary>
            The date and time of signing.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.CanSign">
            <summary>
            Always true.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.CanVerify">
            <summary>
            Always true.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandler.DistinguishedName">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandlerFactory">
            <summary>
            The signature handler factory for all standard signature handlers.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandlerFactory.#ctor">
            <summary>
            Create a new StandardSignatureHandlerFactory to validate.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.StandardSignatureHandlerFactory.Create(System.String,System.Int32,System.String)">
            <summary>
            Create a handler for the type of signature as specified by filter, revision and subfilter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="revision">The revision.</param>
            <param name="subFilter">The sub filter.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.DigitalSignatures.VeriSignSignatureHandler">
            <summary>
            VeriSign signature. Requires the VeriSign plugin for Acrobat.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.VeriSignSignatureHandler.#ctor">
            <summary>
            Create a new VeriSignSignatureHandler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.VeriSignSignatureHandler.#ctor(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new VeriSignSignatureHandler to sign using the first key in the store.
            </summary>
            <param name="keyStore">A key store.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.VeriSignSignatureHandler.#ctor(TallComponents.PDF.Layout.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new VeriSignSignatureHandler to sign using the specified key in the store.
            </summary>
            <param name="keyStore">A key store.</param>
            <param name="name">Name of the key to use for signing.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.VeriSignSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new VeriSignSignatureHandler and use the given chain to sign.
            </summary>
            <param name="chain">The chain containing the private key.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.VeriSignSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new VeriSignSignatureHandler and use the given certificate to sign.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.VeriSignSignatureHandler.Revision">
            <summary>
            Revision number of the SignatureHandler.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DigitalSignatures.VeriSignSignatureHandler.MaxDigestLength">
            <summary>
            The maximum length of the digest.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DigitalSignatures.VeriSignSignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
            <param name="bytesToVerify">For internal use only.</param>
            <param name="digest">For internal use only.</param>
            <param name="certificates">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle">
            <summary>
            Different styles for the border of a form field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Solid">
            <summary>
            A Solid rectangle around the field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Dashed">
            <summary>
            A Dashed rectangle surrounding the field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Beveled">
            <summary>
            A simulated embossed rectangle that appears to be raised above the surface of the page.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Inset">
            <summary>
            A simulated engraved rectangle that appears to be recessed below the surface of the page.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Underline">
            <summary>
            A single line along the bottom of the field's bounding box.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.Orientation">
            <summary>
            Orientations of various objects.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.Orientation.Rotate0">
            <summary>
            No rotation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.Orientation.Rotate90">
            <summary>
            90 degrees rotation, counter-clockwise.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.Orientation.Rotate180">
            <summary>
            180 degrees rotation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.Orientation.Rotate270">
            <summary>
            270 degrees rotation, counter-clockwise.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape">
            <summary>
            Used to add a checkbox form field area to a layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.#ctor">
            <summary>
            Create a new checkbox field shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new checkbox field shape.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new checkbox field shape.
            </summary>
            <param name="left">The left position.</param>
            <param name="bottom">The bottom position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.Value">
            <summary>
            The value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.DefaultValue">
            <summary>
            The default value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.CheckedValue">
            <summary>
            The checked (export) value.
            </summary>
            <remarks>
            Default value is 'Yes'
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.UncheckedValue">
            <summary>
            The unchecked (export) value.
            </summary>
            <remarks>
            This value cannot be changed.
            Default value is 'Off'
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.Style">
            <summary>
            The appearance for this field. (default  = square)
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxStyle">
            <summary>
            The style used to display the checkbox or radiobutton.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxStyle.Round">
            <summary>
            Field appears with a round outline. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxStyle.Square">
            <summary>
            Field appears with a square outline. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape">
            <summary>
            Used to add a drop down list form field area to a layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.#ctor">
            <summary>
            Create a new drop down list field shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new drop down list field shape.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new drop down list field shape.
            </summary>
            <param name="left">The left position.</param>
            <param name="bottom">The bottom position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.Value">
            <summary>
            The value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.SelectedOption">
            <summary>
            The selected option of this field.
            </summary>
            <remarks>
            Default is <see langword="null"/>, meaning no option selected, or if Editable is true any custom value.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.DefaultValue">
            <summary>
            The default value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.DefaultOption">
            <summary>
            The default option of this field.
            </summary>
            <remarks>
            Default is <see langword="null"/>, meaning no option selected, or if Editable is true any custom value.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.Editable">
            <summary>
            The ComboBox is Editable as well (like the TextBox field). Default = false
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.Options">
            <summary>
            The options associated with this combobox.
            </summary>
            <remarks>
            The collection is already created, without any option.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.FieldShape">
            <summary>
            Used to add a form field area to a layer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Width">
            <summary>
            Width of this form field area.
            </summary>
            <remarks>
            Default = 100.
            <para>Checkbox and Radiobutton have a default = 10.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Height">
            <summary>
            Height of this form field area.
            </summary>
            <remarks>
            Default = 10.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.FullName">
            <summary>
            Fully qualified name of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Tooltip">
            <summary>
            The name of the field as used in the user interface. 
            </summary>
            <remarks>
            May be <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.MappingName">
            <summary>
            Used when exporting data from the document.
            </summary>
            <remarks> 
            May be <see langword="null"/>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Font">
            <summary>
            Returns the font of this form field.
            </summary>
            <remarks>Default Courier will be used.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.FontSize">
            <summary>
            Returns the size of the font of this form field.
            </summary>
            <remarks>
            A zero fontsize means that the text is auto-sized. (default 0)
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.TextColor">
            <summary>
            The color of the text in this form field.
            </summary>
            <remarks>
            Default is black.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.BorderColor">
            <summary>
            The color of the border of this form field.
            </summary>
            <remarks>
            The default border color is black. 
            <para>For the SignatureFieldShape the default border color is <see langword="null"/> (transparent).</para>
            <para>This color doesn't have any meaning if the border width is zero.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.BorderWidth">
            <summary>
            The width in points of the border of this form field.
            </summary>
            <remarks>
            Default = 1.
            <para>Set to zero if you doesn't want a border</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.BackgroundColor">
             <summary>
             The background color of this form field.
             </summary>
             <remarks>Default backgroundcolor = white.
             <para>For the PushButtonFieldShape the default background color is light gray.</para>
             <para>For the SignatureFieldShape the default background color is <see langword="null"/> (transparent).</para> 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.BorderStyle">
            <summary>
            The border style of this form field.
            </summary>
            <remarks>
            The default borderstyle is solid.
            <para>For the pushbutton the default borderstyle = Beveled.</para>
            <para>For the radiobutton the default borderstyle = inset.</para></remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Orientation">
            <summary>
            Orientation of field in degrees (counter-clockwise).
            </summary>
            <remarks>
            <para> Default is Rotate0.</para>
            <para>Shape.Rotation is not respected for any field shape.</para> 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.HorizontalAlignment">
            <summary>
            Justification to be used in displaying the text
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.ReadOnly">
            <summary>
            Read-only state of this field. Default = false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Required">
            <summary>
            Field is required. Default = false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.NoExport">
            <summary>
            This field is not included when the form is submitted. Default = false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Hidden">
            <summary>
            This field will not be visible in the pdf-viewer. Default = false. 
            </summary>
            <remarks>
            When hidden is true the Print boolean specifies if this field will not be visible on printout.
            Note that the default Print setting os true.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Print">
            <summary>
            This field will be visable on a printout. Default = true;
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape">
            <summary>
            Used to add a listbox form field area to a layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.#ctor">
            <summary>
            Create a new listbox field shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new listbox field shape.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new listbox field shape.
            </summary>
            <param name="left">The left position.</param>
            <param name="bottom">The bottom position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.SelectedOption">
            <summary>
            The value of this field.
            </summary>
            <remarks>
            Default is <see langword="null"/>, meaning no option is selected.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.DefaultOption">
            <summary>
            The default value of this field.
            </summary>
            <remarks>
            Default is <see langword="null"/>, meaning no option is selected.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.Options">
            <summary>
            The options associated with this listbox.
            </summary>
            <remarks>
            The collection is already created, without any option.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape">
            <summary>
            Used to add a push button form field area to a layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.#ctor">
            <summary>
            Create a new push button field shape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new push button field shape.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new push button field shape.
            </summary>
            <param name="left">The left position.</param>
            <param name="bottom">The bottom position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.Caption">
            <summary>
            The caption used on the button.
            </summary>
            <remarks>
            Default value is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.MouseUpActions">
            <summary>
            The mouse up actions for this button.
            </summary>
             /// <remarks>
            The collection is already created, without any action.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape">
            <summary>
            Used to add a radio button form field area to a layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.#ctor">
            <summary>
            Create a new radio button field shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new radio button field shape.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new radio button field shape.
            </summary>
            <param name="left">The left position.</param>
            <param name="bottom">The bottom position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.Value">
            <summary>
            The value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.DefaultValue">
            <summary>
            The default value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.CheckedValue">
            <summary>
            The checked (export) value
            </summary>
            <remarks>
            Default value is 'Yes'
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.UncheckedValue">
            <summary>
            The unchecked (export) value.
            </summary>
            <remarks>
            This value cannot be changed.
            Default value is 'Off'
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.Style">
            <summary>
            The style for this field. (default = round)
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape">
            <summary>
            Used to add a signature form field area to a layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.#ctor">
            <summary>
            Create a new signature field shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new signature field shape.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new signature field shape.
            </summary>
            <param name="left">The left position.</param>
            <param name="bottom">The bottom position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.SignatureHandler">
            <summary>
            The Signature handler which sign this field.
            </summary>
            <remarks>
            If <see langword="null"/> the signature field will be added for further prossessing.
            You may specify one field with a signature handler only (will be checked at write-time). 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.SignedAppearance">
            <summary>
            The signed appearance for this field.
            </summary>
            <remarks>
            Meaningful if a SignatureHandler is specified only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.Location">
            <summary>
            The CPU host name or physical location of signing. 
            </summary>
            <remarks>
            Meaningful if a SignatureHandler is specified only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.Reason">
            <summary>
            The reason for the signing, such as 'I Agree...'.
            </summary>
            <remarks>
            Meaningful if a SignatureHandler is specified only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.ContactInfo">
            <summary>
            Information provided by the signer to enable a recipient to contact the signer to verify the signature;
            for example, a phone number.
            </summary>
            <remarks>
            Meaningful if a SignatureHandler is specified only.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape">
            <summary>
            Used to add a text form field area to a layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.#ctor">
            <summary>
            Create a new text field shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new text field shape.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new text field shape.
            </summary>
            <param name="left">The left position.</param>
            <param name="bottom">The bottom position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.Value">
            <summary>
            The value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.DefaultValue">
            <summary>
            The default value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.MaxLength">
            <summary>
            The maximum length of the field's text in characters. -1 means no maximum length is specified. Default = -1
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.Multiline">
            <summary>
            Text is multiline. Default = false
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.Password">
            <summary>
            Text represents a password. Default = false
            If set, input is echoed as special characters such as asterisks or bullets.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.ListOption">
            <summary>
            A PDF form field option. 
            </summary>
            <remarks> 
            List options are returned by the Options property of the ListBoxField or DropDownListField class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOption.#ctor">
            <summary>
            Create a new List option.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOption.Read(System.Xml.XmlReader)">
            <summary>
            Read this ListOption from XML.
            </summary>
            <param name="reader">The XmlReader to read from.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOption.#ctor(System.String)">
            <summary>
            Creates a new List option.
            </summary>
            <param name="name">Both the ExportName and the DisplayName.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOption.#ctor(System.String,System.String)">
            <summary>
            Creates a new List option.
            </summary>
            <param name="exportName">Name as exported.</param>
            <param name="displayName">Name as displayed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListOption.DisplayName">
            <summary>
            Name as displayed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOption.ToString">
            <summary>
            Returns a String that represents the current ListOption.
            </summary>
            <returns>A String that represents the current ListOption.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.Item(System.Int32)">
            <summary>
            Retrieve a list option by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.Count">
            <summary>
            Number of options.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.Clear">
            <summary>
            Removes all options from the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a list option at the specified zero-based index.
            </summary>
            <param name="index">Zero-based index.</param>
            <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.Fields.ListOption)">
            <summary>
            Insert an option at the specified zero-based index.
            </summary>
            <param name="index">Zero-based index.</param>
            <param name="option">Insert this option.</param>
            <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.Add(TallComponents.PDF.Layout.Shapes.Fields.ListOption)">
            <summary>
            Add an option to the end of the collection.
            </summary>
            <param name="option">The option to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.Remove(TallComponents.PDF.Layout.Shapes.Fields.ListOption)">
            <summary>
            Remove a list option from this collection.
            </summary>
            <param name="listOption">Remove this list option.</param>
            <remarks>Removing a non-existing segment is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.AddRange(TallComponents.PDF.Layout.Shapes.Fields.ListOption[])">
            <summary>
            Adds the elements of a ListOption array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="listOptions">The array of ListOptions whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="listOptions"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.Contains(TallComponents.PDF.Layout.Shapes.Fields.ListOption)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOption">ListOption</see> is in the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection">ListOptionCollection</see>.
            </summary>
            <param name="listOption">The <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOption"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOption"/> is found in this <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="listOption"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="listOption"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.IndexOf(TallComponents.PDF.Layout.Shapes.Fields.ListOption)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOption">ListOption</see> in the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection">ListOptionCollection</see>.
            </summary>
            <param name="listOption">The <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOption"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.ListOption"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOptionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.Option">
            <summary>
            A PDF form field option. This base class is used for both ListOption and RadioButtonOption.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.Option.ExportName">
            <summary>
            Name as exported. (assign this string to the field's  Value) 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection">
            <summary>
            Collection of form options. Associated with a ComboBox and ListBox field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Item(System.Int32)">
            <summary>
            Retrieve an option by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Count">
            <summary>
            Number of options.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Clear">
            <summary>
            Removes all options from the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.RemoveAt(System.Int32)">
            <summary>
            Remove an option at the specified zero-based index.
            </summary>
            <param name="index">Zero-based index.</param>
            <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.Fields.Option)">
            <summary>
            Insert an option at the specified zero-based index.
            </summary>
            <param name="index">Zero-based index.</param>
            <param name="option">Insert this option.</param>
            <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Add(TallComponents.PDF.Layout.Shapes.Fields.Option)">
            <summary>
            Add an option to the end of the collection.
            </summary>
            <param name="option">The option to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Contains(TallComponents.PDF.Layout.Shapes.Fields.Option)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.Option">Option</see> is in the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection">OptionCollection</see>.
            </summary>
            <param name="option">The <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.Option"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.Option"/> is found in this <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="option"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="option"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.IndexOf(TallComponents.PDF.Layout.Shapes.Fields.Option)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.Option">Option</see> in the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection">OptionCollection</see>.
            </summary>
            <param name="option">The <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.Option"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.Option"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection.Item(System.Int32)">
            <summary>
            Retrieve a radio button option by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection.Count">
            <summary>
            Number of options.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection.Contains(TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption">RadioButtonOption</see> is in the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection">RadioButtonOptionCollection</see>.
            </summary>
            <param name="radioButtonOption">The <see cref="T:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption"/> is found in this <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="radioButtonOption"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="radioButtonOption"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection.IndexOf(TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption">RadioButtonOption</see> in the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection">RadioButtonOptionCollection</see>.
            </summary>
            <param name="radioButtonOption">The <see cref="T:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonOptionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape">
            <summary>
            Used to add a clickable area to a page.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.#ctor">
            <summary>
            Create a new LinkShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new LinkShape with given extent.
            </summary>
            <param name="width">The width of this shape.</param>
            <param name="height">The height of this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new LinkShape with given extent.
            </summary>
            <param name="x">The x of this shape.</param>
            <param name="y">The y of this shape.</param>
            <param name="width">The width of this shape.</param>
            <param name="height">The height of this shape.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.Width">
            <summary>
            Width of this shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.Height">
            <summary>
            Height of this shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.MouseUpActions">
            <summary>
            The actions to be performed when this link is clicked.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon">
            <summary>
            Used to add a sticky note to a document.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Checkmark">
            <summary>
            The sticky note is displayed as checkmark.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Circle">
            <summary>
            The sticky note is displayed as circle.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Comment">
            <summary>
            The sticky note is displayed as comment.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Cross">
            <summary>
            The sticky note is displayed as cross.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Help">
            <summary>
            The sticky note is displayed as help.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Insert">
            <summary>
            The sticky note is displayed as insert text.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Key">
            <summary>
            The sticky note is displayed as key.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.NewParagraph">
            <summary>
            The sticky note is displayed as new paragraph.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Note">
            <summary>
            The sticky note is displayed as text note.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Paragraph">
            <summary>
            The sticky note is displayed as paragraph.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape">
            <summary>
            Used to add a sticky note to a document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.#ctor">
            <summary>
            Create a new sticky note shape area.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.#ctor(TallComponents.PDF.Layout.Paragraphs.Note)">
            <summary>
            Create a new sticky note shape area with given extent.
            </summary>
            <param name="note">The text for this sticky note.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new sticky note shape area with given extent.
            </summary>
            <param name="xPointer">The X position this sticky note should point to.</param>
            <param name="yPointer">The Y position this sticky note should point to.</param>
            <param name="noteX">The X position where the sticky note should appear.</param>
            <param name="noteY">The Y position where the sticky note should appear.</param>
            <param name="noteWidth">The width for this sticky note.</param>
            <param name="noteHeight">The height for this sticky note.</param>
            <param name="text">The text for this sticky note.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteX">
            <summary>
            The X coordinate the note is placed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteY">
            <summary>
            The Y coordinate the note is placed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteWidth">
            <summary>
            Width of this sticky note area.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteHeight">
            <summary>
            Height of this sticky note area.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Text">
            <summary>
            The text displayed in the sticky note.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Author">
            <summary>
            The author displayed in the sticky note.
            </summary>
            <remarks>
            Default <see langword="null"/>, which means no author.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Subject">
            <summary>
            The subject displayed in the sticky note.
            </summary>
            <remarks>Default 'Note'</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Color">
            <summary>
            The color for this sticky note.
            </summary>
            <remarks>
            Default is <see langword="null"/>, wich means the default color. 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Icon">
            <summary>
            The icon used to display this sticky note.
            </summary>
            <remarks>
            Default = comment.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteIconWidth">
            <summary>
            Get the width of the icon inserted on the page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteIconHeight">
            <summary>
            Get the heigth of the icon inserted on the page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Open">
            <summary>
            The sticky note should be initially be displayed open (or closed).
            </summary>
            <remarks>
            Default = true (open).
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.ArcShape">
            <summary>
            An arc shape is a segment of an ellipse outline. It has a center, a horizontal
            and vertical radi and it has a start and sweep angle.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor">
            <summary>
            Create a new ArcShape. 
            </summary>
            <remarks>
            With a default radiusX and radiusY from 50.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius.
            </summary>
            <param name="x">X-position of the center of the arc.</param>
            <param name="y">Y-position of the center of the arc.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="x">X-position of the center of the arc.</param>
            <param name="y">Y-position of the center of the arc.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the arc.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="x">X-position of the center of the arc.</param>
            <param name="y">Y-position of the center of the arc.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the arc.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
            <param name="x">X-position of the center of the arc.</param>
            <param name="y">Y-position of the center of the arc.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,System.Double,System.Double)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
            <param name="x">X-position of the center of the arc.</param>
            <param name="y">Y-position of the center of the arc.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the arc.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush,System.Double,System.Double)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
            <param name="x">X-position of the center of the arc.</param>
            <param name="y">Y-position of the center of the arc.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the arc.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Start">
            <summary>
            Start angle (0 corresponds to 3 o-clock).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Sweep">
            <summary>
            Sweep angle, counter-clockwise.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Rx">
            <summary>
            Horizontal radius.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Ry">
            <summary>
            Vertical radius.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.X1">
            <summary>
            Calculated horizontal position of the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Y1">
            <summary>
            Calculated vertical position of the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.X2">
            <summary>
            Calculated horizontal position of the end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Y2">
            <summary>
            Calculated vertical position of the end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape">
            <summary>
            Abstract base class of all barcode shapes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.#ctor">
            <summary>
            Creates a new bar code shape. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.#ctor(System.String)">
            <summary>
            Creates a new bar code shape. 
            </summary>
            <param name="data">The data that is represented by this barcode.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Read(System.Xml.XmlReader)">
            <summary>
            Read this object from an XmlReader.
            </summary>
            <param name="reader">The XmlReader to read from.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Data">
            <summary>
            The data that is represented by this barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.DataLength">
            <summary>
            Maximum length of data. Default: 12.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Location">
            <summary>
            If, and how the textual respresentation of the data is displayed. Default: None.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.UseQuiteZone">
            <summary>
            Add a quiet zone to the left and to the right of the barcode. Default: false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Width">
            <summary>
            The actual width of the barcode. If set to 0 (default), the minimum width will be used.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Height">
            <summary>
            The actual height of the barcode. If set to 0 (default), the minimum height will be used.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.MinimumHeight">
            <summary>
            The recommended minimum height (in points) of the barcode given the current settings.
            It is possible to set the height smaller than the minimum height but then the content
            will be clipped.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.MinimumWidth">
            <summary>
            The recommended minimum width (in points) of the barcode given the current settings.
            It is possible to set the width smaller than the minimum width but then the content
            will be clipped.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.XDimension">
            <summary>
            The x-dimension (narrowest element of a bar code symbol) in mils.
            1 mil = 0.001 inch. E.g. A 7.5 mil x-dimension means that the most narrow
            bar code element measures 0.0075 inches. Default: 13.5.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape">
            <summary>
            Barcode 128 shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.#ctor">
            <summary>
            Create a new Code 128 barcode.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.#ctor(System.String)">
            <summary>
            Create a new Code 128 barcode.
            </summary>
            <param name="data">The Data. This should not include the start and end codes '*'.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.QuiteZone">
            <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.CharacterSet">
            <summary>
            The character set this Code 128 barcode will use. (default=B)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.GS1Compatible">
            <summary>
            Whether this barcode is GS1-128 compatibly (default false).
            </summary>
            <remarks>
            Setting to true will insert the FNC1 character [102] on the second position, making it compatible with
            GS1-128 (previously known as UCC/EAN-128 or EAN-128) 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.MinimumWidth">
            <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.MinimumHeight">
            <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.Code128CharacterSet">
            <summary>
            The used character set in the code128 barcode.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.Code128CharacterSet.A">
            <summary>
            Use Code 128 - Set A
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.Code128CharacterSet.B">
            <summary>
            Use Code 128 - Set B
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.Code128CharacterSet.C">
            <summary>
            Use Code 128 - Set C
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape">
            <summary>
            Shape for the Interleaved 2 of 5 barcode.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.#ctor">
            <summary>
            Create a new Code 2 of 5 Interleaved bar code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.#ctor(System.String)">
            <summary>
            Create a new Code 2 of 5 Interleaved bar code.
            </summary>
            <param name="data">The Data. This should not include the start and end codes '*'.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.DataWithChecksum">
            <summary>
            The data with the checksum digit added. This is only different from Data if Checksum is set.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.QuiteZone">
            <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.Checksum">
            <summary>
            If set, a checksum is appended to the barcode. Default: false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.MinimumWidth">
            <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.MinimumHeight">
            <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.WideNarrowRatio">
            <summary>
            The ration of wide bars/spaces and narrow bars/spaces.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape">
            <summary>
            Barcode 39 (or 3 of 9) shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.#ctor">
            <summary>
            Create a new Code 39 (3 of 9) barcode.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.#ctor(System.String)">
            <summary>
            Create a new Code 39 (3 of 9) barcode.
            </summary>
            <param name="data">The Data. This should not include the start and end codes '*'.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.DataWithChecksum">
            <summary>
            The data with the checksum digit added. This is only different from Data if Checksum is set.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.QuiteZone">
            <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.Checksum">
            <summary>
            If set, a checksum is appended to the barcode. Default: false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.MinimumWidth">
            <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.MinimumHeight">
            <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.WideNarrowRatio">
            <summary>
            The ration of wide bars/spaces and narrow bars/spaces.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.OneDimensionalBarcodeShape">
            <summary>
            Base Shape for all 1D barcodes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.OneDimensionalBarcodeShape.#ctor">
            <summary>
            Create a new 1D bar code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.OneDimensionalBarcodeShape.#ctor(System.String)">
            <summary>
            Create a new 1D bar code.
            </summary>
            <param name="data">The Data. This should not include the start and end codes '*'.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper">
            Generates the 2D barcode PDF417. Supports dimensioning auto-sizing, fixed
            and variable sizes, automatic and manual error levels, raw codeword input,
            codeword size optimization and bitmap inversion. 
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.#ctor">
            Creates a new <CODE>PDF417BarCodeHelper</CODE> with the default settings. 
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.MacroSegmentId">
            Sets the segment id for macro PDF417 encoding
            @param id the id (starting at 0)
            @see #setMacroSegmentCount(int)
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.MacroSegmentCount">
            Sets the segment count for macro PDF417 encoding
            @param cnt the number of macro segments
            @see #setMacroSegmentId(int)
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.MacroFileId">
            Sets the File ID for macro PDF417 encoding 
            @param id the file id
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.SetDefaultParameters">
            Set the default settings that correspond to <CODE>PDF417_USE_ASPECT_RATIO</CODE>
            and <CODE>PDF417_AUTO_ERROR_LEVEL</CODE>.
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PaintCode">
            Paints the barcode. If no exception was thrown a valid barcode is available. 
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.OutBits">
            Gets the raw image bits of the barcode. The image will have to
            be scaled in the Y direction by <CODE>yHeight</CODE>.
            @return The raw barcode image
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.BitColumns">
            Gets the number of X pixels of <CODE>outBits</CODE>.
            @return the number of X pixels of <CODE>outBits</CODE>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.CodeRows">
            Gets the number of Y pixels of <CODE>outBits</CODE>.
            It is also the number of rows in the barcode.
            @return the number of Y pixels of <CODE>outBits</CODE>
            Sets the number of barcode rows. This number may be changed
            to keep the barcode valid.
            @param codeRows the number of barcode rows
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.CodeColumns">
            Sets the number of barcode data columns.
            This number may be changed to keep the barcode valid.
            @param codeColumns the number of barcode data columns
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.Codewords">
            Gets the codeword array. This array is always 928 elements long.
            It can be writen to if the option <CODE>PDF417_USE_RAW_CODEWORDS</CODE>
            is set.
            @return the codeword array
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.LenCodewords">
            Sets the length of the codewords.
            @param lenCodewords the length of the codewords
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.ErrorLevel">
            Gets the error level correction used for the barcode. It may different
            from the previously set value.
            @return the error level correction used for the barcode
            Sets the error level correction for the barcode.
            @param errorLevel the error level correction for the barcode
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.Text">
            Sets the bytes that form the barcode. This bytes should
            be interpreted in the codepage Cp437.
            @param text the bytes that form the barcode
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.SetText(System.String)">
            Sets the text that will form the barcode. This text is converted
            to bytes using the encoding Cp437.
            @param s the text that will form the barcode
            @throws UnsupportedEncodingException if the encoding Cp437 is not supported
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.Options">
            Sets the options to generate the barcode. This can be all
            the <CODE>PDF417_*</CODE> constants.
            @param options the options to generate the barcode
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.AspectRatio">
            Sets the barcode aspect ratio. A ratio or 0.5 will make the
            barcode width twice as large as the height.
            @param aspectRatio the barcode aspect ratio
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.YHeight">
            Sets the Y pixel height relative to X. It is usually 3.
            @param yHeight the Y pixel height relative to X
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_USE_ASPECT_RATIO">
            Auto-size is made based on <CODE>aspectRatio</CODE> and <CODE>yHeight</CODE>. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_FIXED_RECTANGLE">
            The size of the barcode will be at least <CODE>codeColumns*codeRows</CODE>. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_FIXED_COLUMNS">
            The size will be at least <CODE>codeColumns</CODE>
            with a variable number of <CODE>codeRows</CODE>.
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_FIXED_ROWS">
            The size will be at least <CODE>codeRows</CODE>
            with a variable number of <CODE>codeColumns</CODE>.
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_AUTO_ERROR_LEVEL">
            The error level correction is set automatically according
            to ISO 15438 recomendations.
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_USE_ERROR_LEVEL">
            The error level correction is set by the user. It can be 0 to 8. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_FORCE_BINARY">
            One single binary segment is used
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_USE_RAW_CODEWORDS">
            No <CODE>text</CODE> interpretation is done and the content of <CODE>codewords</CODE>
            is used directly.
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_INVERT_BITMAP">
            Inverts the output bits of the raw bitmap that is normally
            bit one for black. It has only effect for the raw bitmap.
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_USE_MACRO">
            Use Macro PDF417 Encoding
            @see #setMacroFileId(String)
            @see #setMacroSegmentId(int)
            @see #setMacroSegmentCount(int)
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.outBits">
            Holds value of property outBits. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.bitColumns">
            Holds value of property bitColumns. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.codeRows">
            Holds value of property codeRows. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.codeColumns">
            Holds value of property codeColumns. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.codewords">
            Holds value of property codewords. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.lenCodewords">
            Holds value of property lenCodewords. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.errorLevel">
            Holds value of property errorLevel. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.text">
            Holds value of property text. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.options">
            Holds value of property options. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.aspectRatio">
            Holds value of property aspectRatio. 
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarCodeHelper.yHeight">
            Holds value of property yHeight. 
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarcodeShape">
            <summary>
            Shape for the PDF 417 barcode.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarcodeShape.#ctor">
            <summary>
            Create a new PDF 417 bar code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarcodeShape.#ctor(System.String)">
            <summary>
            Create a new PDF 417 bar code.
            </summary>
            <param name="data">The Data. </param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarcodeShape.MinimumWidth">
            <summary>
            The effective width (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.PDF417BarcodeShape.MinimumHeight">
            <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.QRBarcodeShape">
            <summary>
            QR (Quick Response) code shape.
            </summary>
            <remarks><para>The physical size of the QR code is given by its Width and Height in points. The number of "dots" dat get
            generated depends on the value of the Data parameter. More data implies a QR code with more (and smaller) dots.
            The current implementation will always generate a code with error correction level "M".
            </para>
            <para>
            The Quiet zone property is ignored, as QR codes incorporate a mandatory "quiet zone". The 
            DataLength and XDimension properties are currently also ignored.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.QRBarcodeShape.#ctor">
            <summary>
            Create a new QR code.
            </summary>
            <remarks>By default, the QR code will have both its width and height set to 60 points.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.QRBarcodeShape.#ctor(System.String)">
            <summary>
            Create a new QR code.
            </summary>
            <param name="data">The Data. </param>
            <remarks>By default, the QR code will have both its width and height set to 60 points.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.QRBarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.QRBarcodeShape.MinimumWidth">
            <summary>
            For QR codes the minimum width is ignored.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.QRBarcodeShape.MinimumHeight">
            <summary>
            For QR codes the minimum height is ignored.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel">
            <summary>
            Error correction level. These define the tolerance levels for how much of the code can be lost before the code cannot be recovered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel.L">
            <summary>
            7% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel.M">
            <summary>
            15% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel.Q">
            <summary>
            25% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel.H">
            <summary>
            30% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation">
            <summary>
            The used text location in the barcode region.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.None">
            <summary>
            No text will be displayed
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.Below">
            <summary>
            Below the barcode
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.Above">
            <summary>
            Above the barcode
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.AboveEmbedded">
            <summary>
            In the top region of the barcode
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.BelowEmbedded">
            <summary>
            In the botton region of the barcode
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.TwoDimensionalBarcodeShape">
            <summary>
            Base Shape for all 2D barcodes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.TwoDimensionalBarcodeShape.#ctor">
            <summary>
            Create a new 2D bar code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.TwoDimensionalBarcodeShape.#ctor(System.String)">
            <summary>
            Create a new 2D bar code.
            </summary>
            <param name="data">The Data.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.BezierShape">
            <summary>
            A cubic bezier shape. It has a start and an end point and two respective
            control points.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.BezierShape.#ctor">
            <summary>
            Create a new BezierShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.BezierShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new BezierShape given a start point, start control point, end control point and a end point
            </summary>
            <param name="x">Horizontal position of the start point.</param>
            <param name="y">Vertical position of the start point.</param>
            <param name="x1">Horizontal position of the start control point.</param>
            <param name="y1">Vertical position of the start control point.</param>
            <param name="x2">Horizontal position of the end control point.</param>
            <param name="y2">Vertical position of the end control point.</param>
            <param name="x3">Horizontal position of the end point.</param>
            <param name="y3">Vertical position of the end point.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.BezierShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
            <summary>
            Creates a new BezierShape given a start point, start control point, end control point and a end point
            </summary>
            <param name="x">Horizontal position of the start point.</param>
            <param name="y">Vertical position of the start point.</param>
            <param name="x1">Horizontal position of the start control point.</param>
            <param name="y1">Vertical position of the start control point.</param>
            <param name="x2">Horizontal position of the end control point.</param>
            <param name="y2">Vertical position of the end control point.</param>
            <param name="x3">Horizontal position of the end point.</param>
            <param name="y3">Vertical position of the end point.</param>
            <param name="pen">Used to draw the curves of this bezier.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.X0">
            <summary>
            Horizontal position of the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.Y0">
            <summary>
            Vertical position of the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.X1">
            <summary>
            Horizontal position of the start control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.Y1">
            <summary>
            Vertical position of the start control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.X2">
            <summary>
            Horizontal position of the end control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.Y2">
            <summary>
            Vertical position of the end control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.X3">
            <summary>
            Horizontal position of the end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.Y3">
            <summary>
            Vertical position of the end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.BlendMode">
            <summary>
            Different blend modes.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.BlendMode.Inherit">
            <summary>
            Do not change the blend mode, but interit it from it's container.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.BlendMode.Normal">
            <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.BlendMode.Multiply">
            <summary>
            Multiplies the backdrop and source color.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.BlendMode.Screen">
            <summary>
            Multiplies the complements of the backdrop and source color, then complements the result.
            Note: Screening any color with white results in white; screening with black leaved the original color unchanged. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.BlendMode.Difference">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            Note: Paiting with white inverts the backdrop color; painting with black produce no change. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.BlendMode.Exclusion">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color (see difference, but with lowel contrast).
            Note: Paiting with white inverts the backdrop color; painting with black produce no change. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.BorderShape">
            <summary>
            A classic style border. The lower-left corner is defined by 
            the X and Y properties of base class Shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.BorderShape.#ctor">
            <summary>
            Create a new border with zero width and height.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.BorderShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new BorderShape with given startpoint, width and height.
            </summary>
            <param name="left">X-position of the lower-left corner.</param>
            <param name="bottom">Y-position of the lower-left corner.</param>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
            <param name="lineWidth">Width of the line in points.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BorderShape.Width">
            <summary>
            Width of this border.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BorderShape.Height">
            <summary>
            Height of this border.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.BorderShape.LineWidth">
            <summary>
            LineWidth of this rectangle.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.BorderShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Canvas">
            <summary>
            Each page has 4 canvasses: an underlay, a visual underlay, an overlay and a visual overlay, all of type Canvas.
            You draw underneath or on top of a page by adding shapes to one of the 
            4 layer objects. The layers are non-creatable and retrieved through
            the [Visual]Underlay and [Visual]Overlay properties of a page object.
            </summary>
            <remarks> 
            The underlay and overlay uses the original coordinate system and doesn't respect page orientation and/or any clipping area.
            The visual underlay and visual overlay uses a coordinate system that does respect page orientation and/or any clipping area.
            The visual layer will be placed exact on the resulting visual area shown in a viewer (e.g. Acrobat Reader). 
            Note that if no rotation and/or clipping is available that the visual layer has the same result as the normal layer.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.#ctor(TallComponents.PDF.Layout.Shapes.ShapeCollection)">
            <summary>
            Creates a Canvas based on an existing shape collection.
            </summary>
            <param name="masterShapes">The shape collection to include.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a Canvas based on absolute coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a Canvas based on relative cooordinates.
            </summary>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
            <param name="orientation"></param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Canvas.Width">
            <summary>
            Width of this canvas.
            </summary>
            <remarks>
            This property is read-only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Canvas.Height">
            <summary>
            Height of this canvas.
            </summary>
            <remarks>
            This property is read-only.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.Add(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Add a shape to this canvas. Shapes are drawn in the same order as they are added.
            Consequently a shape may obscure previously added shapes.
            </summary>
            <param name="shape">The shape to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.Remove(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Remove a shape from this canvas.
            </summary>
            <param name="shape">Remove this shape.</param>
            <returns>true if removing the shape succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.AddRange(TallComponents.PDF.Layout.Shapes.Shape[])">
            <summary>
            Adds the elements of a Shape array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Canvas.Count">
            <summary>
            Number of shapes in this Canvas.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Canvas.Item(System.Int32)">
            <summary>
            Get a shape by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Insert an existing shape at the specified index.
            </summary>
            <param name="index">The index of the shape after insertion.</param>
            <param name="shape">Insert this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.RemoveAt(System.Int32)">
            <summary>
            Remove a shape at the specified index.
            </summary>
            <param name="index">The index of the shape to remove.</param>
            <remarks>Removing a shape at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.Clear">
            <summary>
            Remove all shapes from this canvas.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.Contains(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Shapes.Shape">Shape</see> is in the <see cref="T:TallComponents.PDF.Layout.Shapes.Canvas">Canvas</see>.
            </summary>
            <param name="shape">The <see cref="T:TallComponents.PDF.Layout.Shapes.Shape"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Shapes.Shape"/> is found in this <see cref="T:TallComponents.PDF.Layout.Shapes.Shape"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="shape"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shape"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.IndexOf(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Returns the index of the specified shape.
            </summary>
            <param name="shape">The shape to locate on this canvas.</param>
            <returns>The zero-based index of the shape found on this canvas; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Canvas.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.ClipShape">
            <summary>
            The ClipShape allow you to build an arbitray curve composed of
            straight lines and bezier curves, used as clipping path.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ClipShape.#ctor">
            <summary>
            Create a new open free hand shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ClipShape.Paths">
            <summary>
            The paths that make up this clip shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ClipShape.FillRule">
            <summary>
            The FillRule used by this clip shape. (Default = FillRule.NonzeroWindingNumber)
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ClipShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.ContentShape">
            <summary>
            Base type for all content shapes.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.Rotation">
            <summary>
            Amount of rotation in degrees around the origin of the shape, clockwise.
            </summary>
            <remarks>
            FieldShapes can be rotated 0, 90, 180 or 270 degrees only. 
            Applying an other rotation to field shapes may lead to unexpected results.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.RotationOffsetX">
            <summary>
            Get or set the X-component of the offset to rotation center, relative to the origin of the shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.RotationOffsetY">
            <summary>
            Get or set the Y-component of the offset to rotation center, relative to the origin of the shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.BlendMode">
            <summary>
            The blend mode used by this shape. (default is BlendMode.Inherit)
            </summary>
            <remarks>
            Inherit means that the Blendmode from it's container is used (parent shape, or page).
            At page level 'Normal' is defined.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.RenderingIntent">
            <summary>
            Gets or sets the rendering intent (default is RenderingIntent.RelativeColorimetric).
            </summary>
            <value>
            The rendering intent.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.Transform">
            <summary>
            Apply this transformation to the content shape before rendering.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.X">
            <summary>
            X-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
            <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.Y">
            <summary>
            Y-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
            <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.DockStyle">
            <summary>
            Different ways to dock shapes.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.None">
            <summary>
            The shape is positioned at its exact coordinates.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Top">
            <summary>
            The shape is moved up to the top edge of the container if the first, otherwise to the bottom edge
            of its predecessor.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Left">
            <summary>
            The shape is moved up to the left edge of the container if the first, otherwise to the right edge
            of its predecessor.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Bottom">
            <summary>
            The shape is moved up to the bottom edge of the container if the first, otherwise to the top edge
            of its predecessor.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Right">
            <summary>
            The shape is moved up to the right edge of the container if the first, otherwise to the left edge
            of its predecessor.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Fill">
            <summary>
            The shape fills the entire remaining area.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.EllipseShape">
            <summary>
            An ellipse drawn using a pen and brush. 
            </summary>
            <remarks>
            The center is determined by the X and Y
            properties of base class Shape.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.EllipseShape.#ctor">
            <summary>
            Create a new EllipseShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius.
            </summary>
            <param name="x">X-position of the center of the ellipse.</param>
            <param name="y">Y-position of the center of the ellipse.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
            <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="x">X-position of the center of the ellipse.</param>
            <param name="y">Y-position of the center of the ellipse.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the ellipse.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
            <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius, pen and brush.
            </summary>
            <param name="x">X-position of the center of the ellipse.</param>
            <param name="y">Y-position of the center of the ellipse.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the ellipse.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.EllipseShape.CenterX">
            <summary>
            X-position of the center of the ellipse.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.EllipseShape.CenterY">
            <summary>
            Y-position of the center of the ellipse.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.EllipseShape.Rx">
            <summary>
            Horizontal radius in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.EllipseShape.Ry">
            <summary>
            Vertical radius in points.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.FillRule">
            <summary>
            Different rules for filling.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.FillRule.NonzeroWindingNumber">
            <summary>
            Specifies the nonzero winding number rule.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.FillRule.EvenOdd">
            <summary>
            Specifies the even-odd rule.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment">
            <summary>
            A cubic bezier segment. It has an end point and two respective
            control points.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.#ctor">
            <summary>
            Create a new FreeHandBezierSegment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new BezierShape given a start control point, end control point and an end point
            </summary>
            <param name="x1">Horizontal position of the start control point.</param>
            <param name="y1">Vertical position of the start control point.</param>
            <param name="x2">Horizontal position of the end control point.</param>
            <param name="y2">Vertical position of the end control point.</param>
            <param name="x3">Horizontal position of the end point.</param>
            <param name="y3">Vertical position of the end point.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.X1">
            <summary>
            Horizontal position of the start control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.Y1">
            <summary>
            Vertical position of the start control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.X2">
            <summary>
            Horizontal position of the end control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.Y2">
            <summary>
            Vertical position of the end control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.X3">
            <summary>
            Horizontal position of the end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.Y3">
            <summary>
            Vertical position of the end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment">
            <summary>
            A straight line. It has an end point.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment.#ctor">
            <summary>
            Create a new FreeHandLineSegment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new FreeHandLineSegment with given end point.
            </summary>
            <param name="x1">Horizontal position of end point.</param>
            <param name="y1">Vertical position of end point.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment.X1">
            <summary>
            Horizontal position of end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment.Y1">
            <summary>
            Vertical position of end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandPath">
            <summary>
            A free hand path.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPath.#ctor">
            <summary>
            Create a new FreeHandPath.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPath.#ctor(System.Boolean)">
            <summary>
            Creates a new FreeHandPath.
            </summary>
            <param name="closed"> Close this free hand path by drawing a straight line from the end point to the start point.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandPath.Closed">
            <summary>
            Close this free hand path by drawing a straight line from the end point to the start point.
            </summary>
            <remarks>
            This property is don't care if this path is part of a ClipShape, because it will be closed always.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandPath.Segments">
            <summary>
            The segments that make up this free hand path.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPath.Clone">
            <summary>
            Clones a FreeHandPath.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPath.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a FreeHandPath.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection">
            <summary>
            Collection of Free Hand Path objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.#ctor">
            <summary>
            Create a new empty collection of free hand path objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.Add(TallComponents.PDF.Layout.Shapes.FreeHandPath)">
            <summary>
            Add an existing free hand path object to this collection.
            </summary>
            <param name="freeHandPath">Add this path.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.Remove(TallComponents.PDF.Layout.Shapes.FreeHandPath)">
            <summary>
            Remove a free hand path from this collection.
            </summary>
            <param name="freeHandPath">Remove this free hand path.</param>
            <returns>true if removing the path succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.AddRange(TallComponents.PDF.Layout.Shapes.FreeHandPathCollection)">
            <summary>
            Adds the free hand paths from an existing collection to the end of this collection.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="freeHandPaths">The FreeHandPathCollection whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="freeHandPaths"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.AddRange(TallComponents.PDF.Layout.Shapes.FreeHandPath[])">
            <summary>
            Adds the elements of a FreeHandPath array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="freeHandPaths">The array of freee hand paths whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="freeHandPaths"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.Count">
            <summary>
            Number of path shapes in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.Item(System.Int32)">
            <summary>
            Get a free hand path by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.FreeHandPath)">
            <summary>
            Insert an existing free hand path at the specified index.
            </summary>
            <param name="index">The zero-based index of the path shape after insertion.</param>
            <param name="freeHandPath">Insert this path.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a free hand path at the specified index.
            </summary>
            <param name="index">The index of the free hand path to remove.</param>
            <remarks>Removing a free hand path at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.Clear">
            <summary>
            Remove all free hand paths from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.Contains(TallComponents.PDF.Layout.Shapes.FreeHandPath)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandPath"/> is in the <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection"/>.
            </summary>
            <param name="freeHandPath">The <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandPath"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandPath"/> is found in this <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="freeHandPath"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="freeHandPath"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.IndexOf(TallComponents.PDF.Layout.Shapes.FreeHandPath)">
            <summary>
            Returns the index of the specified free hand path.
            </summary>
            <param name="freeHandPath">The free hand path to locate in this collection.</param>
            <returns>The zero-based index of the free hand path found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a free hand path collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandPathCollection.Clone">
            <summary>
            Clones a free hand path collection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandSegment">
            <summary>
            The base class for all FreeHandSegment objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegment.Clone">
            <summary>
            Clones a FreeHandSegment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegment.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a FreeHandSegment.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection">
            <summary>
            Collection of FreeHandSegment objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.#ctor">
            <summary>
            Create a new empty collection of free hand segments.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Add(TallComponents.PDF.Layout.Shapes.FreeHandSegment)">
            <summary>
            Add an existing free hand segment to this collection.
            </summary>
            <param name="segment">Add this segment.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Remove(TallComponents.PDF.Layout.Shapes.FreeHandSegment)">
            <summary>
            Remove a segment from this collection.
            </summary>
            <param name="segment">Remove this segment.</param>
            <remarks>Removing a non-existing segment is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.AddRange(TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection)">
            <summary>
            Adds the elements of a Free hand segment collection to the end of this collection.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="segments">The FreeHandSegmentCollection whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="segments"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.AddRange(TallComponents.PDF.Layout.Shapes.FreeHandSegment[])">
            <summary>
            Adds the elements of a FreeHandSegment array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="segments">The array of segments whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="segments"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Count">
            <summary>
            Number of segments in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Item(System.Int32)">
            <summary>
            Get a segment by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.FreeHandSegment)">
            <summary>
            Insert an existing segment at the specified index.
            </summary>
            <param name="index">The zero-based index of the segment after insertion.</param>
            <param name="segment">Insert this segment.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a segment at the specified index.
            </summary>
            <param name="index">The index of the segment to remove.</param>
            <remarks>Removing a segment at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Clear">
            <summary>
            Remove all segments from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Contains(TallComponents.PDF.Layout.Shapes.FreeHandSegment)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandSegment"/> is in the <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection"/>.
            </summary>
            <param name="freeHandSegment">The <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandSegment"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandSegment"/> is found in this <see cref="T:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="freeHandSegment"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="freeHandSegment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.IndexOf(TallComponents.PDF.Layout.Shapes.FreeHandSegment)">
            <summary>
            Returns the index of the specified segment.
            </summary>
            <param name="segment">The segment to locate in this collection.</param>
            <returns>The zero-based index of the segment found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a FreeHandSegmentCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Clone">
            <summary>
            Clones a FreeHandSegmentCollection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandShape">
            <summary>
            The FreeHandShape allow you to build an arbitray curve composed of
            straight lines and bezier curves.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandShape.#ctor">
            <summary>
            Create a new open free hand shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandShape.Paths">
            <summary>
            The paths that make up this free hand shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandShape.Segments">
            <summary>
            The segments that make up this free hand shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandShape.FillRule">
            <summary>
            The FillRule used by this free hand shape. (Default = FillRule.NonzeroWindingNumber)
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment">
            <summary>
            The start point of the free hand path.
            </summary>
            <remarks>
            This class must be the first object in the FreeHandSegmentCollection, if it's not available 0,0 will be used.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment.#ctor">
            <summary>
            Create a new FreeHandStartSegment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new FreeHandStartSegment with given end point.
            </summary>
            <param name="x">Horizontal position of start point.</param>
            <param name="y">Vertical position of start point.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment.X">
            <summary>
            Horizontal position of start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment.Y">
            <summary>
            Vertical position of start point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.IBaseDocumentCache">
            <summary>
            Used in shapes to resolve a base document in multiple PageShapes [TallPDF.NET only]
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.IBaseDocumentCache.cacheDocument(TallComponents.PDF.Base.DocumentStructure.Document,System.String)">
            <summary>
            For internal usage only
            </summary>
            <param name="document">For internal usage only</param>
            <param name="path">For internal usage only</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.IBaseDocumentCache.findDocument(System.String)">
            <summary>
            For internal usage only
            </summary>
            <param name="path">For internal usage only</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.ImageShape">
            <summary>
            A shape containing bitmap image.
            </summary>
            <remarks>
            In XML you can specifiy the image data as Base64 encoded data.
            <example>
            You can convert an image file to Base64 using the .NET method <see cref="M:System.Convert.ToBase64String(System.Byte[])"/>.
            <para>C#</para>
            <code>
            string base64Data;
            using ( FileStream fs = new FileStream( fileName , FileMode.Open ) )
            {
              byte[] bytes  = new byte[ fs.Length ];
              fs.Read( bytes, 0, bytes.Length );
              base64Data = Convert.ToBase64String( bytes );
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Shapes.ImageShape.GetWebCredentials">
            <summary>
            Occurs when an image is loaded from a weblocation to retrieve the credentials.
            </summary>
            <remarks>Set the credentials in the arguments to perform authentication.
            To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor">
            <summary>
            Creates a new ImageShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.String)">
            <summary>
            Create a new image shape from a relative or virtual path.
            </summary>
            <param name="path">Relative, absolute or virtual path</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.String,System.Int32)">
            <summary>
            Create a new image shape from a relative, absolute or virtual path.
            </summary>
            <param name="path">Relative, absolute or virtual path</param>
            <param name="frameIndex">Index of frame. Typically used to select a page in a multi-page TIFF.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Create a new ImageShape from a System.Windows.Media.Imaging.BitmapSource.
            This constructor allows you to draw to a WPF image and pass it to the ImageShape
            class without intermediate, temporary file.
            </summary>
            <param name="bitmapSource">In-memory WPF bitmap object.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(TallComponents.Images.ImageData)">
            <summary>
            Creates a new ImageShape based on an existing ImageData object.
            </summary>
            <param name="imageData">The imagedata object.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(TallComponents.Images.ImageData,TallComponents.PDF.Base.Array)">
            <summary>
            Creates a new ImageShape based on an existing ImageData object.
            </summary>
            <param name="imageData">The imagedata object.</param>
            <param name="stencilFillColor">The color used to fill a stencil if the image shape is a mask.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.IO.Stream)">
            <summary>
            Create a new ImageShape from a stream of binary data.
            </summary>
            <remarks>
            The stream is not closed when the image is disposed. Make sure that it remains open until
            Document.Write has been completed.
            </remarks>
            <param name="stream">The stream containing the binairy image data.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Create a new ImageShape from a stream of binary data.
            </summary>
            <remarks>
            When setting disposeStream to true, the stream will disposed after the Image instance has been released
            from memory. Note that if this instance of the stream is used multiple times an error will
            be thrown if the stream is used after this Image class is removed from memory.
            </remarks>
            <param name="stream">The stream containing the binairy image data.</param>
            <param name="frameIndex">0-based frame index.</param>
            <param name="disposeStream">The stream will be disposed by this component.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ImageShape constructor for serialization purposes.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="ctxt">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.ProcessTextData(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Read initialize this instance from and XmlReader.
            </summary>
            <param name="reader">An XmlReader positioned on an node that represents this object.</param>
            <param name="preserveWhiteSpace">Whether whitespavce must be preserved.</param>
            <exception cref="T:TallComponents.PDF.Layout.InvalidImageException">Occures when invalid Base64 data is encountered.</exception>
            <exception cref="T:System.InvalidOperationException">Occures when image data has already been loaded.</exception>
            <exception cref="T:System.ArgumentNullException">Occures when the reader is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.loadFromBase64Content(System.Xml.XmlReader)">
            <summary>
            Loads image data from Base64 content in XML.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.Compression">
            <summary>
            The compression to apply to the image data.
            </summary>
            <remarks>
            This is a best-effort setting. Images that are already compressed
            will in most cases not be recoded to another compression.
            Uncompressed images will honor the compression setting.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.MaskColor">
            <summary>
            Set the color that will act as the transparent color.
            </summary>
            <remarks>
            Setting this color to any other color than <see langword="null"/> will enable color masking.
            The color that matches this color exactly will become transparent.
            <para>When the mask color is set, alpha transparency is ignored.</para>
            <para>For GIF images, the mask color can be specified in the file. Setting the MaskColor
            will override the transparent color in the GIF file.</para>
            <para>Color masking for images with lossy compression (JPEG) is not advised.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.FrameIndex">
            <summary>
            The FrameIndex which will be used to get the actual image data from the Bitmap
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.FrameCount">
            <summary>
            The number of frames in the image.
            </summary>
            <remarks>
            Most image types hold a single frame. TIFF images can have multiple frames.
            Use <see cref="P:TallComponents.PDF.Layout.Shapes.ImageShape.FrameIndex"/> to select the frame to show.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.GetFrameCount(System.String)">
             <summary>
             Extract the number of frames from the image data.
             </summary>
             <param name="path">The path to the image. May be a file path or a URL.</param>
             <returns>Number of frames in this image.</returns>
             <example>
             VB.NET
             <code>
             ' Get the number of frames
             Dim frameCount As Integer = ImageShape.GetFrameCount( path )
             Dim index As Integer
            
             For index = 0 To frameCount - 1
                ' Load the image for the frame
                Dim image as ImageShape = New ImageShape(path, index)
            
                'Create new page and append to document
                Dim page As New Page(image.Width, image.Height)
                document.Pages.Append(page)
                page.VisualOverlay.Add(image)
             Next index
             </code>
             </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.GetFrameCount(System.String,System.Object,TallComponents.PDF.Layout.GetWebCredentialsEventHandler)">
             <summary>
             Extract the number of frames from the image data.
             </summary>
             <param name="path">The path to the image. May be a file path or a URL.</param>
             <param name="sender">The sender for the GetWebCredentials event.</param>
             <param name="getWebCredentials">The event handlers to query for the web credentials.</param>
             <returns>Number of frames in this image.</returns>
             <example>
             VB.NET
             <code>
             ' Get the number of frames
             Dim frameCount As Integer = ImageShape.GetFrameCount( path )
             Dim index As Integer
            
             For index = 0 To frameCount - 1
                ' Load the image for the frame
                Dim image as ImageShape = New ImageShape(path, index)
            
                'Create new page and append to document
                Dim page As New Page(image.Width, image.Height)
                document.Pages.Append(page)
                page.VisualOverlay.Add(image)
             Next index
             </code>
             </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.GetFrameCount(System.IO.Stream)">
            <summary>
            Extract the number of frames from the image data.
            </summary>
            <remarks>
            The <paramref name="stream"/> may be closed when the method completes and it is no longer needed.
            It is the responsibility of the client to close the stream.
            </remarks>
            <param name="stream">A stream containing an image file.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.Path">
            <summary>
            Relative or absolute path of image file.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.Height">
            <summary>
            The height of the image.
            </summary>
            <remarks>
            If KeepAspectRatio is set:
            <para>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</para>
            <para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para>
            <para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para>
            <para>If both the height and width are specified: fit into area.</para>
            <para>Set to double.NaN to reset to the initial state (not set, use PhysicalHeight)</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.Width">
            <summary>
            The width of the image.
            </summary>
            <remarks>
            If KeepAspectRatio is set:
            <para>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</para>
            <para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para>
            <para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para>
            <para>If both the height and width are specified: fit into area.</para>
            <para>Set to double.NaN to reset to the initial state (not set, use PhysicalWidth)</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.VerticalSize">
            <summary>
            Get the vertical size (height) in pixels of this image.
            </summary>
            <remarks>
            This property cannot be set, it's readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.HorizontalSize">
            <summary>
            Get the horizontal size (width) in pixels of this image.
            </summary>
            <remarks>
            This property cannot be set, it's readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.VerticalResolution">
            <summary>
            Get the vertical resolution, in pixels per inch, of this image.
            </summary>
            <remarks>
            <para>
            Returns 0 (zero) if this information is not available in the image.
            </para>
            This property cannot be set, it's readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.HorizontalResolution">
            <summary>
            Get the horizontal resolution, in pixels per inch, of this image.
            </summary>
            <remarks>
            <para>
            Returns 0 (zero) if this information is not available in the image.
            </para>
            This property cannot be set, it's readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.AspectRatio">
            <summary>
            The pixel aspect ratio based on the physical image dimensions.
            </summary>
            <remarks>
            This includes a correction for images that have a different horizontal and vertical resolution.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.PhysicalHeight">
            <summary>
            The height where the resolution has been applied to.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.PhysicalWidth">
            <summary>
            The width where the resolution has been applied to.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.KeepAspectRatio">
            <summary>
            If KeepAspectRatio is set to true, the height is calculated from the
            width so that the width/height ratio is equal to the columns/rows ratio
            of the raster of the original image. If set to false, the specified
            width and height are used and the image will in general appear distorted.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.IgnoreAlpha">
            <summary>
            Set to true to completely ignore alpha transparency in the image. If no alpha information
            is available this setting is ignored.
            Default value is false.
            </summary>
            <remarks>
            Note that setting a MaskColor will cause all alpha information to be ignored.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.InvertCmykChannels">
            <summary>
            Set to true to invert the colors in a CMYK image.
            </summary>
            <remarks>
            Default = false.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.DesiredCompression">
            <summary>
            This is the desired compression.
            </summary>
            <remarks>It is not guaranteed that the requires compression will actually be used for each image type.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.IReference`1">
            <summary>
            Interface class for references.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.IReference`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.LayerShape">
            <summary>
            A layer shape can be seen as a canvas. You draw on this canvas by adding
            shapes to it, they will be placed inside this layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.#ctor">
            <summary>
            Create a new empty layer shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.#ctor(TallComponents.PDF.Layer)">
            <summary>
            Create a new empty layer shape, connected to the provided Layer. 
            </summary>
            <param name="layer">The layer this shape is connected to.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.LayerShape.Layer">
            <summary>
            The layer this shape is connected to.
            </summary>
            <remarks>
            If this entry is not set, it means the current layer (layer wise like this shape was not inserted).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.Add(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Add an existing shape to this layer.
            </summary>
            <param name="shape">Add this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.Remove(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Remove a shape from this layer.
            </summary>
            <param name="shape">Remove this shape.</param>
            <returns>true if removing the shape succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.AddRange(TallComponents.PDF.Layout.Shapes.ShapeCollection)">
            <summary>
            Adds the elements of a ShapeCollection to the end of this layer.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The ShapeCollection whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.AddRange(TallComponents.PDF.Layout.Shapes.Shape[])">
            <summary>
            Adds the elements of a Shape array to the end of this layer.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.LayerShape.Count">
            <summary>
            Number of shapes in this layer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.LayerShape.Item(System.Int32)">
            <summary>
            Get a shape by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.Contains(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Shapes.Shape">Shape</see> is in the <see cref="T:TallComponents.PDF.Layout.Shapes.LayerShape">LayerShape</see>.
            </summary>
            <param name="shape">The <see cref="T:TallComponents.PDF.Layout.Shapes.Shape"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Shapes.Shape"/> is found in this <see cref="T:TallComponents.PDF.Layout.Shapes.LayerShape"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="shape"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shape"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Insert an existing shape at the specified index.
            </summary>
            <param name="index">The index of the shape after insertion.</param>
            <param name="shape">Insert this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.RemoveAt(System.Int32)">
            <summary>
            Remove a shape at the specified index.
            </summary>
            <param name="index">The index of the shape to remove.</param>
            <remarks>Removing a shape at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.Clear">
            <summary>
            Remove all shapes from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.IndexOf(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Returns the index of the specified shape.
            </summary>
            <param name="shape">The shape to locate in this layer shape.</param>
            <returns>The zero-based index of the shape found in the layer shape; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LayerShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
            <remarks>
            If this shape refres a Layer, the layer will not be cloned.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.LayerShape.InnerShapes">
            <summary>
            Return the InnerShapes as ShapeCollection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.LineShape">
            <summary>
            A straight line. It has a start and an end point.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LineShape.#ctor">
            <summary>
            Create a new LineShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LineShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new LineShape with given start and end point.
            </summary>
            <param name="x1">Horizontal position of start point.</param>
            <param name="y1">Vertical position of start point.</param>
            <param name="x2">Horizontal position of end point.</param>
            <param name="y2">Vertical position of end point.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.LineShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
            <summary>
            Creates a new LineShape with given start and end point and pen.
            </summary>
            <param name="x1">Horizontal position of start point.</param>
            <param name="y1">Vertical position of start point.</param>
            <param name="x2">Horizontal position of end point.</param>
            <param name="y2">Vertical position of end point.</param>
            <param name="pen">Used to draw the line.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.LineShape.X1">
            <summary>
            Horizontal position of end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.LineShape.Y1">
            <summary>
            Vertical position of end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.MultilineTextShape">
            <summary>
            The MultilineTextShape allows you to stamp text that is wrapped given
            a certain maximum line width. The text is stored in 1 or more fragments.
            You can set layout properties such as alignment and indentation.
            </summary>
            <remarks>
            <para>
            The origin (X and Y properties) is the top-left position.
            </para>
            <para>Use a LineBreakFragment to insert a newline between two fragments.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MultilineTextShape.#ctor">
            <summary>
            Create a new empty multiline text shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MultilineTextShape.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new empty multiline text shape.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="width">Width of this MultilineTextShape.</param>
        </member>
        <member name="E:TallComponents.PDF.Layout.Shapes.MultilineTextShape.LineBreak">
            <summary>
            Will be fired when a word has to be broken on a line end.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.HorizontalAlignment">
            <summary>
            The horizontal alignment.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Justified">
            <summary>
            Whether text is justified.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.JustifyLastLine">
            <summary>
            Whether last line of the text is justified.
            </summary>
            <remarks>
            If Justified is false, this property has no effect.
            </remarks>/// 
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.HangIndentation">
            <summary>
            Indentation of all except first line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.FirstLineIndentation">
            <summary>
            Indentation of first line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.LineSpacing">
            <summary>
            Extra spacing between lines in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Fragments">
            <summary>
            Collection of text fragments. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Width">
            <summary>
            Width of this MultilineTextShape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Height">
            <summary>
            Height of this MultilineTextShape, when the contents should be auto-sized. The content will be auto-sized when the following constaints are true: 1) Only one fragment is present; 2) The font-size in that fragment is specified as zero (0).
            </summary>
            <remarks>
            If this MultilineTextShape isn't auto-sized, this height property isn't used at all.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.MeasuredHeight">
            <summary>
            The measured height is the space that will be used when drawing this shape on the page. 
            This height is calculated with the fragments available in the fragments collection, 
            it respects the Width property and font-sizes used in the fragments. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.MeasuredWidth">
            <summary>
            The measured width is the space that will be used when drawing this shape on the page. 
            This width is calculated with the fragments available in the fragments collection, 
            it respects the Width property and font-sizes used in the fragments. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.TabStops">
            <summary>
            Allows you to define points to jump to when a tab character is encountered.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.FlowDirection">
            <summary>
            The read direction of text elements (fragments).
            </summary>
            <remarks>
            The fragments contained can have a different read direction to allow
            left-to-right reading elements (numbers) in right to left text.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.MaxFontSize">
            <summary>
            The maximum font size the auto-sized text will be (default = 24).
            </summary>
            <remarks>
            If this MultilineTextShape isn't auto-sized, this property isn't used at all.
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Height"/>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.TextFieldMode">
            <summary>
            We need to set the Shape in 'special' mode, because acrobat dispays text different then we do.
            However we do not want to change it for all text we display.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.PageShape">
            <summary>
            A page shape is a placeholder for an existing page. 
            It is used to stamp existing pages on an other page, which could be either a new or an existing page.
            </summary>
            <remarks>
            Placing a page using the PageShape removes all interactive features such as links and form fields.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor">
            <summary>
            Create a new page shape. Use Path, Password and PageIndex to specify what page to use.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor(System.IO.Stream,System.Int32,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Int32,TallComponents.PDF.Layout.PageBoundary)">
            <summary>
            Create a new page shape. Using the specified page boundary.
            </summary>
            <remarks>
            The <paramref name="stream"/> may be closed when the constructor completes.
            It is the responsibility of the client to close the stream.
            </remarks>
            <param name="stream">The PDF Document.</param>
            <param name="pageIndex">Zero based page index.</param>
            <param name="password">The password needed to open the given PDF.</param>
            <param name="left">The horizontal position of the left edge of this page shape.</param>
            <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
            <param name="width">The width of this page shape.</param>
            <param name="height">The height of this page shape.</param>
            <param name="keepAspectRatio">The width/height ratio is equal to the ratio of the original page.</param>
            <param name="rotate">The rotation the page shape counter-clockwise (360 corresponds to a full circle).</param>
            <param name="pageBoundary">This shape has the contents from the specified page boundary. If the page does not have the specified page boundary, then it will be automatically using the following fallback: ArtBox --> CropBox; TrimBox --> CropBox; BleedBox --> CropBox; CropBox --> MediaBox.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor(System.IO.Stream,System.Int32,System.String)">
            <summary>
            Create a new PageShape from a PDF document in a stream with the original size of the page.
            </summary>
            <remarks>
            This constructor uses the Default page boundry to determine the page's size.
            <para>The <paramref name="stream"/> may be closed when the constructor completes.
            It is the responsibility of the client to close the stream.</para>
            </remarks>
            <param name="stream">The PDF Document.</param>
            <param name="pageIndex">Zero based page index.</param>
            <param name="password">The password needed to open the given PDF.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor(System.String,System.Int32,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Int32,TallComponents.PDF.Layout.PageBoundary)">
            <summary>
            Create a new page shape. Using the specified page boundary.
            </summary>
            <remarks>
            Loading PDF documents from a URL is currently not supported. You can use
            relative paths in a web environment (for example <c>~/documents/mydoc.pdf</c>)
            </remarks>
            <param name="path">The PDF Document.</param>
            <param name="pageIndex">Zero based page index.</param>
            <param name="password">The password needed to open the given PDF.</param>
            <param name="left">The horizontal position of the left edge of this page shape.</param>
            <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
            <param name="width">The width of this page shape.</param>
            <param name="height">The height of this page shape.</param>
            <param name="keepAspectRatio">The width/height ratio is equal to the ratio of the original page.</param>
            <param name="rotate">The rotation the page shape counter-clockwise (360 corresponds to a full circle).</param>
            <param name="pageBoundary">This shape has the contents from the specified page boundary. If the page does not have the specified page boundary, then it will be automatically using the following fallback: ArtBox --> CropBox; TrimBox --> CropBox; BleedBox --> CropBox; CropBox --> MediaBox.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new PageShape from a file with the original size of the page.
            </summary>
            <remarks>
            Loading PDF documents from a URL is currently not supported. You can use
            relative paths in a web environment (for example <c>~/documents/mydoc.pdf</c>)
            </remarks>
            <param name="path">The path to the PDF Document.</param>
            <param name="pageIndex">Zero based page index.</param>
            <param name="password">The password needed to open the given PDF.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Path">
            <summary>
            Path of the PDF file to load.
            </summary>
            <remarks>
            If the PDF file was loaded from a stream this value may be <see langword="null"/>.
            Loading PDF from a URL is not supported. When the path is relative, it is
            assumed to be relative to the applications current working folder.
            For web applications, the current working folder is the root folder of the web
            application.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.PageIndex">
            <remarks>
            This property has no effect if the PageShape was constructed using a Page instance.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Password">
            <summary>
            Set the password used to open the source PDF document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.PageCount">
            <summary>
            The number of pages in the source PDF document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.PageOrientation">
            <summary>
            The orienation or rotation specified on the Page this PageShape refers. 
            </summary>
            <remarks>
            The orientation is counter-clockwise in degrees.
            <para>
            You cannot set this property, it's read-only.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.PreserveFields">
            <summary>
            Preserve fields from the source page. Because annotations, and thus widgets, cannot be geometrically transformed in the same way that 
            shapes can, you should not transform the PageShape when you set PreserveFields to true. Default is false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Rotate">
            <summary>
            Number of degrees by which this page shape is rotated counter-clockwise around its lower-left corner.
            </summary>
            <remarks>Please use Rotation instead. 
            Please note that the rotation has changed from counter-clockwise to clockwise!</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.SkewX">
            <summary>
            Amount of horizontal skew in degrees, clockwise. (default = 0)
            </summary>
            <remarks>
            The y-axis will be skewed by the given angle. 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.SkewY">
            <summary>
            Amount of vertical skew in degrees, clockwise. (default = 0)
            </summary>
            <remarks>
            The x-axis will be skewed by the given angle. 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Width">
            <summary>
            The width of this page shape in points.
            </summary>
            <remarks>
            This must be a positive (non zero) number.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Height">
            <summary>
            The height of this page shape in points.
            </summary>
            <remarks>
            This must be a positive (non zero) number.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.KeepAspectRatio">
            <summary>
            If KeepAspectRatio is set to true, the size is calculated from the 
            width and height so that the width/height ratio is equal to the ratio
            of the original page. If set to false, the specified.
            width and height are used and the page will in general appear distorted.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.PageBoundary">
            <summary>
            Specifies which page boundary corresponds to this page shape, the space outside the specified boundary will be clipped. 
            </summary>
            <remarks>
            If the page does not have the specified page boundary, then it will be automatically using the following fallback: 
            ArtBox --> Default; 
            TrimBox --> Default; 
            BleedBox --> Default; 
            CropBox --> MediaBox.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.PathShape">
            <summary>
            PathShape is the base class for all shapes that have an associated pen or brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PathShape.#ctor">
            <summary>
            Create a new open path shape that starts at (0,0).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PathShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new open path shape with given start point.
            </summary>
            <param name="x">Horizontal position of start point.</param>
            <param name="y">Vertical position of start point.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PathShape.Pen">
            <summary>
            Used to draw the curves on this path.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PathShape.Brush">
            <summary>
            The brush that is used to fill this shape if closed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PathShape.Closed">
            <summary>
            Close this path shape by drawing a straight line from the end point to the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PathShape.PathShapes">
            <summary>
            The segments that make up this path shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PathShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.PathShape.PathShapeFillRule">
            <summary>
            The Fill Rule to be used in this path. (default NonzeroWindingNumber )
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.PieShape">
            <summary>
            A pie is an arc shape with the addition of two straight lines drawn
            from the center to the start and end point of the arc. The closed area
            is filled using the specified brush (if any).
            A pie is fully defined by attributes of its base classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor">
            <summary>
            Create a new, uninitialized PieShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius.
            </summary>
            <param name="x">X-position of the center of the pie.</param>
            <param name="y">Y-position of the center of the pie.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="x">X-position of the center of the pie.</param>
            <param name="y">Y-position of the center of the pie.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the pie.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="x">X-position of the center of the pie.</param>
            <param name="y">Y-position of the center of the pie.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the pie.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
            <param name="x">X-position of the center of the pie.</param>
            <param name="y">Y-position of the center of the pie.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,System.Double,System.Double)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
            <param name="x">X-position of the center of the pie.</param>
            <param name="y">Y-position of the center of the pie.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the pie.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush,System.Double,System.Double)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
            <param name="x">X-position of the center of the pie.</param>
            <param name="y">Y-position of the center of the pie.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the pie.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
            <param name="x">X-position of the center of the pie.</param>
            <param name="y">Y-position of the center of the pie.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
            <param name="closed">Close this path shape by drawing a straight line from the end point to the center and from the center to the start point.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
            <param name="x">X-position of the center of the pie.</param>
            <param name="y">Y-position of the center of the pie.</param>
            <param name="rx">Horizontal radius.</param>
            <param name="ry">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the pie.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
            <param name="closed">Close this path shape by drawing a straight line from the end point to the center and from the center to the start point.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.RectangleShape">
            <summary>
            A rectangle drawn using a pen and brush. 
            </summary>
            <remarks>
            The lower-left corner is defined by the X and Y properties of base class Shape.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.RectangleShape.#ctor">
            <summary>
            Create a new rectangle with zero width and height.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.RectangleShape.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new RectangleShape with given startpoint, width and height.
            </summary>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new RectangleShape with given startpoint, width and height.
            </summary>
            <param name="x">X-position of the lower-left corner.</param>
            <param name="y">Y-position of the lower-left corner.</param>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
            <summary>
            Creates a new RectangleShape with given startpoint, width, height and pen.
            </summary>
            <param name="x">X-position of the lower-left corner.</param>
            <param name="y">Y-position of the lower-left corner.</param>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
            <param name="pen">Used to draw the lines on this rectangle.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
            <summary>
            Creates a new RectangleShape with given startpoint, width, height, pen and brush.
            </summary>
            <param name="x">X-position of the lower-left corner.</param>
            <param name="y">Y-position of the lower-left corner.</param>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
            <param name="pen">Used to draw the lines on this rectangle.</param>
            <param name="brush">The brush that is used to fill the rectangle.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.RectangleShape.Width">
            <summary>
            Width of this rectangle.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.RectangleShape.Height">
            <summary>
            Height of this rectangle.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.RenderingIntent">
            <summary>
            Enumerates rendering intent types.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.RenderingIntent.RelativeColorimetric">
            <summary>
            Colors are represented with respect to the combination of the light source and the output medium’s white point.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.RenderingIntent.AbsoluteColorimetric">
            <summary>
            Colors are represented solely with respect to the light source; no correction is made for the output medium’s white point.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.RenderingIntent.Saturation">
            <summary>
            Colors are represented in a manner that preserves or emphasizes saturation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.RenderingIntent.Perceptual">
            <summary>
            Colors are represented in a manner that provides a pleasing perceptual appearance.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Shape">
            <summary>
            Base class for all vector and bitmap graphics objects.
            </summary>
            <seealso cref="T:TallComponents.PDF.Layout.Shapes.PathShape" />
            <seealso cref="N:TallComponents.PDF.Layout.Shapes" />
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.Dock">
            <summary>
            How this shape is docked.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.X">
            <summary>
            X-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
            <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.Y">
            <summary>
            Y-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
            <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.Margin">
            <summary>
            Get or set the margin of a shape.
            </summary>
            <remarks>
            This property is useful in combination with docking only, otherwise don't care.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.LeftMargin">
            <summary>
            Extra space to the left of this shape (only useful in combination with docking).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.RightMargin">
            <summary>
            Extra space to the right of this shape (only useful in combination with docking).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.TopMargin">
            <summary>
            Extra space above this shape (only useful in combination with docking).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.BottomMargin">
            <summary>
            Extra space below this shape (only useful in combination with docking).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.Opacity">
            <summary>
            The opacity (0...255) which must be used for this shape. Default is 255 (fully opaque).
            </summary>
            <remarks>
            0 means not visible (100% transparent), 255 means 100% visible (no transparancy).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Shape.ID">
            <summary>
            This Identifier (ID) can be used to track which shape raise an exception.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Shape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Shape.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Shape
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.ShapeCollection">
            <summary>
            Collection of shape objects. Shapes is a shape itself. This allows recursion.
            A shapes collection can be seen as a canvas. You draw on this canvas by adding
            shapes to it.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.#ctor">
            <summary>
            Create a new empty collection of shapes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.#ctor(System.Double,System.Double)">
            <summary>
            Create a new empty collection of shapes. Positioned at 0,0.
            </summary>
            <param name="width">The width of this shape with respect to parent coordinate system.</param>
            <param name="height">The height of this shape with respect to parent coordinate system.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new empty collection of shapes.
            </summary>
            <param name="x">The X position (left).</param>
            <param name="y">The Y position (bottom).</param>
            <param name="width">The width of this shape with respect to parent coordinate system.</param>
            <param name="height">The height of this shape with respect to parent coordinate system.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new empty collection of shapes.
            </summary>
            <param name="x">The X position (left).</param>
            <param name="y">The Y position (bottom).</param>
            <param name="width">The width of this shape with respect to parent coordinate system.</param>
            <param name="height">The height of this shape with respect to parent coordinate system.</param>
            <param name="virtualWidth">The virtual width of the virtual canvas on which child shapes are positioned. </param>
            <param name="virtualHeight">The virtual height of the virtual canvas on which child shapes are positioned. </param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Add(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Add an existing shape to this collection.
            </summary>
            <param name="shape">Add this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Remove(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Remove a shape from this collection.
            </summary>
            <param name="shape">Remove this shape.</param>
            <returns>true if removing the shape succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.AddRange(TallComponents.PDF.Layout.Shapes.ShapeCollection)">
            <summary>
            Adds the elements of a ShapeCollection to the end of this collection.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The ShapeCollection whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.AddRange(TallComponents.PDF.Layout.Shapes.Shape[])">
            <summary>
            Adds the elements of a Shape array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Count">
            <summary>
            Number of shapes in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Item(System.Int32)">
            <summary>
            Get a shape by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Contains(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Shapes.Shape">Shape</see> is in the <see cref="T:TallComponents.PDF.Layout.Shapes.ShapeCollection">ShapeCollection</see>.
            </summary>
            <param name="shape">The <see cref="T:TallComponents.PDF.Layout.Shapes.Shape"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Shapes.Shape"/> is found in this <see cref="T:TallComponents.PDF.Layout.Shapes.ShapeCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="shape"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shape"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Insert an existing shape at the specified index.
            </summary>
            <param name="index">The index of the shape after insertion.</param>
            <param name="shape">Insert this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a shape at the specified index.
            </summary>
            <param name="index">The index of the shape to remove.</param>
            <remarks>Removing a shape at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Clear">
            <summary>
            Remove all shapes from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.IndexOf(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Returns the index of the specified shape.
            </summary>
            <param name="shape">The shape to locate in this collection.</param>
            <returns>The zero-based index of the shape found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator">GetEnumerator</see>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Width">
            <summary>
            Width of this shape with respect to parent coordinate system.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Height">
            <summary>
            Height of this shape with respect to parent coordinate system.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.VirtualWidth">
            <summary>
            The width of the virtual canvas on which child shapes are positioned. 
            This implies a coordinate system transformation.
            </summary>
            <remarks>
            Setting the <see cref="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.VirtualHeight"/> to anything other than <see cref="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Height"/> will cause the child shapes to scale appropriately.
            <para>Fields cannot be scaled. Using virtual height with fields may lead to unexpected results.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.VirtualHeight">
            <summary>
            The height of the virtual canvas on which child shapes are positioned. 
            This implies a coordinate system transformation.
            </summary>
            <remarks>
            Setting the <see cref="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.VirtualHeight"/> to anything other than <see cref="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Height"/> will cause the child shapes to scale appropriately.
            <para>Fields cannot be scaled. Using virtual height with fields may lead to unexpected results.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Clip">
            <summary>
            Clip child shapes. Default is true.
            </summary>
            <remarks>
            Clipping does not work on fields.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.ClipPath">
            <summary>
            The clip path to use.
            </summary>
            <remarks>
            Will be used if Clip = true, and at least 1 segment is added to the collection.
            Otherwise the clip path will be the rectangle defined by this ShapeCollection.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Compose">
            <summary>
            Overide this method to construct custom shapes.
            </summary>
            <remarks>
            To build custom shapes, derive a class from Shapes and provide an
            implementation of Compose. This method is called just before PDF generation
            starts. Add shapes to create a custom appearance.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.UseFormX">
            <summary>
            Whether this collection represent a seperate formX object or not.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.ShapeSizeException">
            <summary>
            The exception that is thrown when a shape cannot be placed on a page because 
            the shape has an invalid size.
            </summary>
            <remarks>
            This exception can occur when the width or height of a shape is 0.
            The shape.ID is included into the error description
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.SimpleXhtmlFormatException">
            <summary>
            Thrown when badly formatted Simple Xhtml is encountered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.SimpleXhtmlFormatException.#ctor(System.String)">
            <summary>
            Create a new SimpleXhtmlFormatException.
            </summary>
            <param name="message">Description of the cause of this exception</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.SimpleXhtmlFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new SimpleXhtmlFormatException.
            </summary>
            <param name="message">Description of the cause of this exception</param>
            <param name="inner">The exception that caused this exception.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape">
             <summary>
             Renders one or more lines of text with "simple" xhtml markup.
             </summary>
             <remarks>
             <para>For the SimpleXhtml shape the formatting is restricted to what is possible in rich text
             form fields in PDF. In PDF, rich text strings consist of XML that is a subset of the XFA text specification,
             which is itself a subset of the XHTML 1.0 specification.</para>
             <para>Text will wrap at the specified <see cref="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Width"/> of the shape.
             You can set layout properties such as alignment and indentation.</para>
             <para>The origin (X and Y properties) is the top-left position.</para>
             </remarks>
             <example>
             The following example shows how xhtml can be used to specify formatting.
             <code>
             <![CDATA[
               string xhtml = "<?xml version='1.0'?><body xfa:APIVersion=\"PDFKit:3.0.0.0\" xfa:spec=\"2.1\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">";
               xhtml += "<p>With a simple Xhtml shape you can easily specify <b>bold</b> text, <i>italic</i> text, or <b><i>both</i></b>. ";
               xhtml += "It is also possible to specify a different <span style='color:#ff0000'>color</span>,";
               xhtml += "or a different <span style='font-family:courier'>font</span>, ";
               xhtml += "<span style ='text-decoration:underline'>underline</span>, or ";
               xhtml += "<span style ='text-decoration:line-through'>line-through</span>.</p> ";
               xhtml += "<p>Of course, text can also be <span style='font-size:72'>big</span>.</p>";
               xhtml += "<p>Note furthermore that &lt;p&gt; tags can be used to generate separate paragraphs.</p>";
               xhtml += "</body>";
               
               // stamp a text paragraph at the center
            
               TranslateTransform translate = new TranslateTransform();
               SimpleXhtmlShape xhtmlShape = new SimpleXhtmlShape();
               xhtmlShape.Text = xhtml;
               xhtmlShape.Transform = translate;
            
               xhtmlShape.DefaultTextIndent = 20;
               // center horizontally
               xhtmlShape.Width = page.Width / 2;
               translate.X = (page.Width - xhtmlShape.Width) / 2;
            
               // Y corresponds to the top of the paragraph
               translate.Y = page.Height / 2;
            
               page.VisualOverlay.Add(xhtmlShape);
             ]]></code>
             </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.#ctor">
            <summary>
            Creates a new SimpleXhtmlShape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.HorizontalAlignment">
            <summary>
            The horizontal alignment.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.LineBreak">
            <summary>
            Will be fired when a word has to be broken on a line end.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.LineSpacing">
            <summary>
            Extra spacing between lines in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.TabStops">
            <summary>
            Allows you to define points to jump to when a tab character is encountered.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.FlowDirection">
            <summary>
            The read direction of text elements (fragments).
            </summary>
            <remarks>
            The fragments contained can have a different read direction to allow
            left-to-right reading elements (numbers) in right to left text.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.MaxFontSize">
            <summary>
            The maximum font size the auto-sized text will be (default = 24).
            </summary>
            <remarks>
            If this MultilineTextShape isn't auto-sized, this property isn't used at all.
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Height"/>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Width">
            <summary>
            Width of this SimpleXhtmlShape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.MeasuredHeight">
            <summary>
            The measured height is the space that will be used when drawing this shape on the page. 
            This height is calculated with the current text available, it respects the Width property 
            and other properties. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.MeasuredWidth">
            <summary>
            The measured width is the space that will be used when drawing this shape on the page. 
            This width is is calculated with the current text available, it respects the Width property 
            and other properties. It can be less than the Width, if only a few data is available (or is forced broken after short words).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Text">
            <summary>
            The rich text string to display formatted as xhtml.
            </summary>
            <remarks>
            Supported tags include: strong, b, em, i,  span, p and a wide variety of CSS styles like
            font, font-family, font-size, color, text-decoration etc.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.FontResolver">
            <summary>
            The font resolver used to retrieve fonts.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultFont">
            <summary>
            The default font. (default Arial)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultFontSize">
            <summary>
            The default font size. (default 12)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultBold">
            <summary>
            If the text is default bold. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultItalic">
            <summary>
            If the text is default italic. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultUnderline">
            <summary>
            If the text is default underlined. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultStrikeOut">
            <summary>
            If the text is default striked through. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultColor">
            <summary>
            The default text color (default = black)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultJustified">
            <summary>
            Whether text is justified. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.FirstLineIndentation">
            <summary>
            Indentation of first line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultLineHeight">
            <summary>
            Minimal spacing between 2 lines (default 1.2).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.HangIndentation">
            <summary>
            Indentation of all except first line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Multiline">
            <summary>
            Specifies whether the text may span multiple lines. (default true)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.PreserveWhitespace">
            <summary>
            Specifies whether whitespace must be kept (default false).
            </summary>
            <remarks>If false, all whitespace will be reduced to a single space.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Height">
            <summary>
            Height of this MultilineTextShape, when the contents should be auto-sized. The content will be auto-sized when the following constaints are true: 1) Only one fragment is present; 2) The font-size in that fragment is specified as zero (0).
            </summary>
            <remarks>
            If this MultilineTextShape isn't auto-sized, this height property isn't used at all.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Justified">
            <summary>
            Whether text is justified.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Read(System.Xml.XmlReader)">
            <summary>
            Reads this <see cref="T:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape">SimpleXhtmlShape</see> from XML.
            </summary>
            <param name="reader">An XML reader.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Fragments">
            <summary>
            Collection of text fragments. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.TextShape">
            <summary>
            Used to add a single-line text to a layer.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.TextShape.ReferenceBridge`1">
            <summary>
            Provides an implementation for Base.IVariableText in terms of the public IVariable
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.#ctor">
            <summary>
            Create an empty text shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.#ctor(System.String,TallComponents.PDF.Layout.Fonts.Font,System.Double)">
            <summary>
            Create a text shape with given properties.
            </summary>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.#ctor(System.Double,System.Double,System.String,TallComponents.PDF.Layout.Fonts.Font,System.Double)">
            <summary>
            Create a text shape with given properties.
            </summary>
            <param name="x">Horizontal position of left edge.</param>
            <param name="y">Vertical position of bottom edge.</param>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.#ctor(System.Double,System.Double,System.String,TallComponents.PDF.Layout.Fonts.Font,System.Double,TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Create a text shape with given properties.
            </summary>
            <param name="x">Horizontal position of left edge.</param>
            <param name="y">Vertical position of bottom edge.</param>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
            <param name="textColor">Forecolor of the text.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.#ctor(TallComponents.PDF.Layout.Shapes.IReference{System.String},TallComponents.PDF.Layout.Fonts.Font,System.Double)">
            <summary>
            Create a variable (late-bound) text shape with given properties.
            </summary>
            <param name="textReference">The variable text implementation.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.#ctor(System.Double,System.Double,TallComponents.PDF.Layout.Shapes.IReference{System.String},TallComponents.PDF.Layout.Fonts.Font,System.Double)">
            <summary>
            Create a text shape with given properties.
            </summary>
            <param name="x">Horizontal position of left edge.</param>
            <param name="y">Vertical position of bottom edge.</param>
            <param name="textReference">The variable text implementation.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Bold">
            <summary>
            If set, the text appears bold. Note that the boldness is simulated by using a thicker stroke.
            It is preferrable to use a bold font if possible. E.g. use arialbd.ttf for bold Arial and arial.ttf for
            regular Arial. This property is ignored if applied to a Bold font.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.HorizontalScaling">
            <summary>
            Gets or sets the horizontal scaling 0.0 - 1.0.
            1.0 by default.
            </summary>
            <value>
            The horizontal scaling.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Italic">
            <summary>
            If set, the text appears italic. Note that the italicness is simulated by skewing the text slightly.
            It is preferrable to use an italic font if possible. E.g. use ariali.ttf for italic Arial and arial.ttf for
            regular Arial. This property is ignored if applied to an Italic font.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Width">
            <summary>
            The measured width is the space that will be used when drawing this shape on the page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Height">
            <summary>
            The measured height is the space that will be used when drawing this shape on the page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Font">
            <summary>
            Text is typeset using this font.
            </summary>
            <remarks>
            The default font is Helvetica at 12pt.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.FontSize">
            <summary>
            Size of font in points.
            </summary>
            <remarks>
            The default font is Helvetica at 12pt.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when trying to assign an invalid number (NaN or Infinity).</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Pen">
            <summary>
            Used to draw the curves on this text. (default = null)
            </summary>
            <remarks>
            You can use a pen to draw outlines. (most likely you want to set Brush = null).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Brush">
            <summary>
            The brush that is used to fill this text. (default = Black - SolidBrush)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.AppendToClipPath">
            <summary>
            Append this text to the clip path after the text is drawn, if any (default = false).
            </summary>
            <remarks>
            No text will be drawn if both Pen en Brush are null/nothing.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.KerningInfo">
            <summary>
            Gets or sets the kerning info.
            </summary>
            <value>
            The kerning info.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.TextBytes">
            <summary>
            Gets or sets the text bytes.
            </summary>
            <remarks>
            It turned out that in some fonts the ToUnicode table mapes to different characters
            and it leads to different text in a result of the CreateShapes roundtriping. Therefore
            in order to preserve the original text in untouched text shapes we save its text bytes
            and write them back unless the text shape was modified.
            </remarks>
            <value>
            The text bytes.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.TextColor">
            <summary>
            Forecolor of text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Text">
            <summary>
            Display this text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.StrikeOut">
            <summary>
            Get or set if the text shape is rendered striked out.
            </summary>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.Underline"/>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.Overline"/>
            <remarks>
            The color of the decoration will be:
            If a pen is available: the color of the pen.
            If no pen is available, but a SolidBrush is available: the color from this brush.
            if no pen and no brush are available: RgbBlack.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Underline">
            <summary>
            Get or set if the text shape is rendered with an underline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.StrikeOut"/>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.Overline"/>
            <remarks>
            The color of the decoration will be:
            If a pen is available: the color of the pen.
            If no pen is available, but a SolidBrush is available: the color from this brush.
            if no pen and no brush are available: RgbBlack.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Overline">
            <summary>
            Get or set if the text shape is rendered with an overline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.Underline"/>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.StrikeOut"/>
            <remarks>
            The color of the decoration will be:
            If a pen is available: the color of the pen.
            If no pen is available, but a SolidBrush is available: the color from this brush.
            if no pen and no brush are available: RgbBlack.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.DoubleUnderline">
            <summary>
            Get or set if the text shape is rendered with a double underline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.Underline"/>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.StrikeOut"/>
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.TextShape.Overline"/>
            <remarks>
            The color of the decoration will be:
            If a pen is available: the color of the pen.
            If no pen is available, but a SolidBrush is available: the color from this brush.
            if no pen and no brush are available: RgbBlack.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Direction">
            <summary>
            Read direction of this text (left-to-right or right-to-left).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.CharacterSpacing">
            <summary>
            Get or set the character spacing. This is the extra spacing (in points) occupied by each character. Default is 0 (no extra spacing).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.WordSpacing">
            <summary>
            Get or set the word spacing. This is the extra spacing (in points) occupied by each space character. Default is 0 (no extra spacing).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.BoundingBox">
            <summary>
            The size of the textshape after rotation is applied.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.TextShapeCollection">
            <summary>
            Represents a text object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TextShapeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Layout.Shapes.TextShapeCollection"/> class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.IdentityTransform">
            <summary>
            The identity transform. This class cannot be instanciated. 
            Instead you retrieve an existing IndentityTransform object from the static Identity property of the Transform class. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.IdentityTransform.#ctor">
            <summary>
            This class cannot be instanciated. 
            Instead you retrieve an existing IndentityTransform object from the static Identity property of the Transform class. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.MatrixOrder">
            <summary>
            Specifies the order for matrix transform operations.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.MatrixOrder.Append">
            <summary>
            The new operation is applied after the old operation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Shapes.MatrixOrder.Prepend">
            <summary>
            The new operation is applied before the old operation.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.MatrixTransform">
            <summary>
            A 2D geometric transform that is defined by a 3-by-3 affine matrix.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.#ctor">
            <summary>
            Create a new MatrixTransform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.#ctor(System.Windows.Media.Transform)">
            <summary>
            Create a new MatrixTransform.
            </summary>
            <param name="transform">Create a matrix transform from this WPF transform.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.#ctor(System.Windows.Media.Matrix)">
            <summary>
            Create a new MatrixTransform.
            </summary>
            <param name="matrix">Create a matrix transform from this WPF matrix.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new MatrixTransform based on the provided matrix entries.
            </summary>
            <param name="a">The first element</param>
            <param name="b">The second element</param>
            <param name="c">The third element</param>
            <param name="d">The fouth element</param>
            <param name="e">The fifth element</param>
            <param name="f">The sixth element</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.#ctor(TallComponents.PDF.Layout.Shapes.Transform)">
            <summary>
            Create a new MarixTransform from an existing transform.
            </summary>
            <param name="transform">A transform.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MatrixTransform.Inverse">
            <summary>
            Delivers the inverse transform.
            </summary>
            <remarks>This will not modify the current transform.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.Translate(System.Double,System.Double)">
            <summary>
            Translates over (x,y).
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.Translate(System.Double,System.Double,TallComponents.PDF.Layout.Shapes.MatrixOrder)">
            <summary>
            Translates over (x,y) and in the order specified in the order parameter.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.Scale(System.Double,System.Double)">
            <summary>
            Scales in the x and y direction.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.Scale(System.Double,System.Double,TallComponents.PDF.Layout.Shapes.MatrixOrder)">
            <summary>
            Scales in the x and y direction and in the order specified in the order parameter.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.Rotate(System.Double)">
            <summary>
            Rotates the transform the given amount of degrees.
            </summary>
            <param name="degrees">The degrees.</param>
            <remarks>The direction of the rotation depends on the coordinate system.
            If the origin is at the top left corner - with the y-axis going down -, the rotation
            will be clockwise. This is the case for interactors (and WinForms/WPF). If the
            origin is at the bottom left corner - with the y-axis going up -, the rotation
            will be counter-clockwise. This is the case for PDF shapes.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.Rotate(System.Double,TallComponents.PDF.Layout.Shapes.MatrixOrder)">
            <summary>
            Rotates the transform the given amount of degrees and in the order specified in the order parameter.
            </summary>
            <param name="degrees">The degrees.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.Shear(System.Double,System.Double,TallComponents.PDF.Layout.Shapes.MatrixOrder)">
            <summary>
            Applies the specified shear vector to this Matrix in the specified order.
            </summary>
            <param name="shx">The horizontal shear factor.</param>
            <param name="shy">The vertical shear factor.</param>
            <param name="order">The order. Default is Append.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.Append(TallComponents.PDF.Layout.Shapes.Transform)">
            <summary>
            Appends a transform.
            </summary>
            <param name="transformation"></param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.MatrixTransform.Prepend(TallComponents.PDF.Layout.Shapes.Transform)">
            <summary>
            Prepends a transformation to this one.
            </summary>
            <param name="transformation"></param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MatrixTransform.ScaleX">
            <summary>
            Gets the value of the first row and first column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MatrixTransform.ScaleY">
            <summary>
            Gets the value of the second row and second column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MatrixTransform.ShearX">
            <summary>
            Gets the value of the first row and second column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MatrixTransform.ShearY">
            <summary>
            Gets the value of the second row and first column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MatrixTransform.OffsetX">
            <summary>
            Gets the value of the third row and first column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.MatrixTransform.OffsetY">
            <summary>
            Gets the value of the third row and second column of this Matrix structure.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.RotateTransform">
            <summary>
            A 2D geometric transform that applies a clockwise rotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.RotateTransform.#ctor">
            <summary>
            Create a new RotateTransform with angle 0 and rotation offset (0,0).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.RotateTransform.#ctor(System.Double)">
            <summary>
            Create a new RotateTransform with given angle and rotation offset (0, 0).
            </summary>
            <param name="angle">Clockwise rotation in degrees.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.RotateTransform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new RotateTransform with given rotation and ration offset (0,0).
            </summary>
            <param name="angle">Clockwise angle in degrees.</param>
            <param name="rotationOffsetX">X-coordinate of the rotation center, relative to the origin of the shape.</param>
            <param name="rotationOffsetY">Y-coordinate of the rotation center, relative to the origin of the shape.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.RotateTransform.Angle">
            <summary>
            Clockwise angle in degrees around the origin of the shape.
            Default is 0.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.RotateTransform.RotationOffsetX">
            <summary>
            Get or set the x-coordinate of the rotation center, relative to the origin of the shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.RotateTransform.RotationOffsetY">
            <summary>
            Get or set the y-coordinate of the rotation center, relative to the origin of the shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.ScaleTransform">
            <summary>
            A 2D geometric transform that applies a horizontal and vertical scale.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ScaleTransform.#ctor">
            <summary>
            Create a new ScaleTransform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.ScaleTransform.#ctor(System.Double,System.Double)">
            <summary>
            Create a new ScaleTransform.
            </summary>
            <param name="sx">Scale along the x-axis.</param>
            <param name="sy">Scale along the y-axis.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ScaleTransform.ScaleX">
            <summary>
            Scale along the x-axis.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.ScaleTransform.ScaleY">
            <summary>
            Scale along the y-axis.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.SkewTransform">
            <summary>
            A 2D geometric transform that applies a horizontal or vertical skew.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.SkewTransform.#ctor">
            <summary>
            Create a new SkewTransform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.SkewTransform.#ctor(System.Double,System.Double)">
            <summary>
            Create a new SkewTransform.
            </summary>
            <param name="anglex">Skew angle along the x-axis.</param>
            <param name="angley">Skew angle along the y-axis.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SkewTransform.AngleX">
            <summary>
            Skew angle in degrees along the x-axis.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.SkewTransform.AngleY">
            <summary>
            Skew angle in degrees along the y-axis.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.Transform">
            <summary>
            A 2D geometric transform that can be used to transform ContentShape objects and Brushes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.Transform.CreateWpfMatrix">
            <summary>
            Creates a new System.Windows.Media.Matrix from the current Transform.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Transform.Identity">
            <summary>
            The identity transform.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.Transform.AsMatrixTransform">
            <summary>
            Returns Transform as MatrixTransform
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.TransformCollection">
            <summary>
            A collection of transforms that can be applied as a single transform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.#ctor">
            <summary>
            Create a new TransformCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.Add(TallComponents.PDF.Layout.Shapes.Transform)">
            <summary>
            Add a new transform.
            </summary>
            <param name="transform">Add this transform.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.Remove(TallComponents.PDF.Layout.Shapes.Transform)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Shapes.Transform">Transform</see> from this <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection">TransformCollection</see>.
            </summary>
            <param name="transform">The transform to remove.</param>
            <returns>true if removing the transform succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.AddRange(TallComponents.PDF.Layout.Shapes.Transform[])">
            <summary>
            Adds the entries in an array of <see cref="T:TallComponents.PDF.Layout.Shapes.Transform">transforms</see> to the end of the <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection">TransformCollection</see>.
            </summary>
            <param name="transforms">The array of <see cref="T:TallComponents.PDF.Layout.Shapes.Transform">transforms</see> to be added to the end of the <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection"/>.</param>
            <remarks>
            <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="transforms"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.Transform)">
            <summary>
            Inserts a transform into the TransformCollection at the specified index.
            </summary>
            <param name="index">At this index.</param>
            <param name="transform">Add this transform.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.Clear">
            <summary>
            Removes all transforms from the <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection">TransformCollection</see>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.IndexOf(TallComponents.PDF.Layout.Shapes.Transform)">
            <summary>
            Returns the index of the specified transform.
            </summary>
            <param name="transform">The transform to locate in this collection.</param>
            <returns>The zero-based index of the transform found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.Contains(TallComponents.PDF.Layout.Shapes.Transform)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Shapes.Transform">Transform</see> is in the <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection">TransformCollection</see>.
            </summary>
            <param name="transform">The <see cref="T:TallComponents.PDF.Layout.Shapes.Transform"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Shapes.Transform"/> is found in this <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="transform"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="transform"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Shapes.Transform">Transform</see> from the <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection">TransformCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Layout.Shapes.Transform"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TransformCollection.Item(System.Int32)">
            <summary>
            Get an <see cref="T:TallComponents.PDF.Layout.Shapes.Transform">Transform</see> by zero-based index from the <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection">TransformCollection</see>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TransformCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Layout.Shapes.Transform">Transform</see>s actually contained in the <see cref="T:TallComponents.PDF.Layout.Shapes.TransformCollection">TransformCollection</see>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TransformCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.TranslateTransform">
            <summary>
            A 2D geometric transform that applies a translation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TranslateTransform.#ctor">
            <summary>
            Create a new TranslateTransform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.TranslateTransform.#ctor(System.Double,System.Double)">
            <summary>
            Create a new TranslateTransform.
            </summary>
            <param name="x">Translation along the x-axis.</param>
            <param name="y">Translation along the y-axis.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TranslateTransform.X">
            <summary>
            Translation along the x-axis.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.TranslateTransform.Y">
            <summary>
            Translation along the y-axis.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Shapes.XfaBorderShape">
            <summary>
            An XFA Border. The lower-left corner is defined by 
            the X and Y properties of base class Shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.XfaBorderShape.#ctor">
            <summary>
            Create a new border with zero width and height.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Shapes.XfaBorderShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new border with given startpoint, width and height.
            </summary>
            <param name="left">X-position of the lower-left corner.</param>
            <param name="bottom">Y-position of the lower-left corner.</param>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.XfaBorderShape.Left">
            <summary>
            X-position of the lower-left corner.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.XfaBorderShape.Bottom">
            <summary>
            Y-position of the lower-left corner.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.XfaBorderShape.X">
            <summary>
            X-position of the lower-left corner.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.XfaBorderShape.Y">
            <summary>
            Y-position of the lower-left corner.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.XfaBorderShape.Width">
            <summary>
            Width of this border.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Shapes.XfaBorderShape.Height">
            <summary>
            Height of this border.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Compression">
            <summary>
            Compression types for Image and ImageShape.
            </summary>
            <remarks>
            Note that not all compressions are supported for all image formats. 
            If this is the case, the image will be written in it's native format
            or compressed using Zip if it's an uncompressed image format.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Compression.Zip">
            <summary>
            Lossless compression.
            </summary>
            <remarks>
            This compression is also known as flate.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Compression.Jpeg">
            <summary>
            Lossy compression.
            </summary>
            <remarks>
            This compression is also known as DCT.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Compression.Auto">
            <summary>
            Use source image compression or Zip if uncompressed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.FragmentReadDirection">
            <summary>
            Different read directions for text.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.FragmentReadDirection.LeftToRight">
            <summary>
            Text is read from left to right.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.FragmentReadDirection.RightToLeft">
            <summary>
            Text is read from right to left (e.g. Arabic).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.FragmentReadDirection.InheritFromParent">
            <summary>
            The direction of the parent is used.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.InvalidXhtmlException">
            <summary>
            Thrown when invalid XHTML is encountered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.InvalidXhtmlException.#ctor(System.String)">
            <summary>
            Create a new InvalidXhtmlException.
            </summary>
            <param name="message">Description of the cause of this exception</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.InvalidXhtmlException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new InvalidXhtmlException.
            </summary>
            <param name="message">Description of the cause of this exception</param>
            <param name="inner">The exception that caused this exception.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.ContextFieldsReplacer">
            <summary>
            Implementation of context field replacement.
            </summary>
            <remarks>This implementation derives implements both IReplacer and Context. Context is used in TallPDF4. IReplacer is the
            old interface that is used in TallPDF3. This implementation is just a way to bridge the gap between Tall 3 and 4 without
            having to use too many ifdefs in the code. It should be removed when support for Tall 3 ends.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ContextFieldsReplacer.Replace(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="text">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.ContextFieldsReplacer.EscapeRegexp">
            <summary>
            Escape replacment symbol
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.ContextFieldsReplacer.TempReplaceString">
            <summary>
            First temp escape char sequence.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.ContextFieldsReplacer.TempReplaceString1">
            <summary>
            Second temp escape char sequence
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ContextFieldsReplacer.PrepareReplacement(System.String)">
            <summary>
            Prepares the replacement.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ContextFieldsReplacer.ReturnEscapeCharacters(System.String)">
            <summary>
            Returns the escape characters.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ContextFieldsReplacer.MatchEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Matches the evaluator.
            </summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Fragment">
            <summary>
            The fragment class represents a piece of text.
            </summary>
            <remarks>
            The fragment is a part of a multiline text shape or a text paragraph.
            All text of a fragment is typeset equally.
            Fragments allow to contain pieces of text with different <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Font">font</see>, <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.TextColor">color</see> or
            have a different decoration (bold, italic, underlined,...).
            <para>
            A fragment may refer to a paragraph throug a <see cref="T:Actions.GoToAction"/>. In this case the text may contain <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Text">fields</see>
            that will be replaced by properties of the referenced paragraph.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.TallComponents#PDF#Layout#ITextWidthCalculator#GetWidth(System.Char)">
            <summary>
            For internal use only.
            </summary>
            <param name="c">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.TallComponents#PDF#Layout#ITextWidthCalculator#GetWidth(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="s">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor">
            <summary>
            Initializes a new empty instance of the Fragment class.
            </summary>
            <remarks>
            Create a new empty fragment with default properties.
            The default font is Helvetica at 12pt.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor(System.String)">
            <summary>
            Initialize a new instance of the Fragment class with given content.
            </summary>
            <remarks>
            Create a new fragment with given text.
            The default font is Helvetica at 12pt.
            </remarks>
            <param name="text">Content.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor(System.String,TallComponents.PDF.Layout.Fonts.Font)">
            <summary>
            Initialize a new instance of the Fragment class with given content and font.
            </summary>
            <remarks>
            Create a fragment with given text and font.
            The default font size is 12pt.
            </remarks>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor(System.String,System.Double)">
            <summary>
            Initialize a new instance of the Fragment class with given content and fontsize.
            </summary>
            <remarks>
            Create a fragment with given text and fractional font size.
            The default font is Helvetica.
            </remarks>
            <param name="text">Content.</param>
            <param name="fontSize">Font size.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor(System.String,TallComponents.PDF.Layout.Fonts.Font,System.Double)">
            <summary>
            Initialize a new instance of the Fragment class with given content, font and fontsize.
            </summary>
            <remarks>
            Create a fragment with given text, font and fractional font size.
            </remarks>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Font size.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Text">
            <summary>
            The content of this fragment.
            </summary>
            <remarks>
            <para>By default all whitespace characters (tabs, spaces and newlines) will be removed.
            To render pre-formatted text set <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.PreserveWhiteSpace">PreserveWhiteSpace</see> to true.
            </para>
            <para>
            Use <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.SuppressSpaceBefore">SuppressSpaceBefore</see> to prevent a space from being inserted before this fragment.
            </para>
            <para>
            Fragments may contain context fields. These fields will be resolved to values when <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.HasContextFields"/> is true.
            </para>
            The following fields are related to page numbering:
            <list type="table">
                 <listheader>
                    <term>Field</term><description>Description</description>
                 </listheader>
                 <item>
                    <term>#p</term>
                    <description>Current page number (starting at 1).</description>
                 </item>
                 <item>
                    <term>#P</term>
                    <description>Total number of pages in the document.</description>
                 </item>
                 <item>
                    <term>#Q</term>
                    <description>Total number of pages in this set. A page set starts when <see>Section.RestartPageNumber</see> is set.</description>
                 </item>
            </list>
            The following fields are restricted to header and footer fragments:
            <list type="table">
               <listheader>
                 <term>Field</term>
                 <description>Description</description>
               </listheader>
               <item>
                 <term>#c&lt;i&gt;</term>
                 <description>&lt;i&gt; ranges from 0 to 9. The caption of the last i-level heading.</description>
               </item>
               <item>
                 <term>#l&lt;i&gt;</term>
                 <description>&lt;i&gt; ranges from 0 to 9. The label of the last heading at level i.</description>
               </item>
               <item>
                 <term>#&lt;i&gt;</term>
                 <description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.).</description>
               </item>
               <item>
                 <term>#a&lt;i&gt;</term>
                 <description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.). Formatted alphabetically, lowercase.</description>
               </item>
               <item>
                 <term>#A&lt;i&gt;</term>
                 <description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.). Formatted alphabetically, uppercase.</description>
               </item>
               <item>
                 <term>#i&lt;i&gt;</term>
                 <description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.). Formatted as roman numerals, lowercase.</description>
               </item>
               <item>
                 <term>#I&lt;i&gt;</term>
                 <description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.). Formatted as roman numerals, uppercase.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Bold">
            <summary>
            Get or set if the text appears bold.
            </summary>
            <remarks>Note that the boldness is simulated by using a thicker stroke.
            It is preferrable to use a bold font if possible. E.g. use arialbd.ttf for bold Arial and arial.ttf for
            regular Arial. This property is ignored if applied to a Bold font.
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Italic"/>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Italic">
            <summary>
            Get or set if the text appears italic.
            </summary>
            <remarks>
            Note that the italicness is simulated by skewing the text slightly.
            It is preferrable to use an italic font if possible. E.g. use ariali.ttf for italic Arial and arial.ttf for
            regular Arial. This property is ignored if applied to an Italic font.
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Bold"/>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.DetermineReadDirection(TallComponents.PDF.Layout.ReadDirection)">
            <summary>
            Get the readdirection for the fragments words.
            </summary>
            <remarks>
            If the read direction for the fragment has been specified the assigned value
            is used. If the direction is set to "InheritFromParagraph" (Default) the paragraph's flow
            direction is used.
            </remarks>
            <param name="flowDirectionParagraph">The flow direction from the paragraph.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.ReadDirection">
            <summary>
            Get or set the direction of the text fragment.
            </summary>
            <remarks>
            If the read direction is set to "InheritFromParagraph" the read direction of the
            paragraph is used. The default value of the read direction is "InheritFromParent"
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.KeepWithNext">
            <summary>
            Get or set if the next fragment is started on the same line as this fragment.
            </summary>
            <remarks>
            Make sure this fragment always appears on the same line as the
            next fragment.
            A fragment that has keep with next set will not break across lines.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.FontSize">
            <summary>
            Font size in points. Fontsize 0 will autosize when the fragment is single
            in a MultilineTextShape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Font">
            <summary>
            The font for this fragment. You can use one of the 14 standard PDF fonts or a TrueType font.
            Note that the TrueType functionality is available in the Professional edition only.
            </summary>
            <example>
            C#
            <code>
              myFragment.Font = Font.Helvetica;
            </code>
            XML
            <code>
              &lt;paragraph type="textparagraph" &gt;
                 &lt;fragment font="helvetica" fontsize="10"&gt;
                    This text is in 10pt Helvetica
                 &lt;/fragment&gt;
              &lt;/paragraph&gt;
            </code>
            </example>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.PreserveWhiteSpace">
            <summary>
            Preserve spaces, tabs (\t), carriage returns (\r) and line feeds (\n).
            Set this property to true to include preformatted text like code fragments.
            </summary>
            <remarks>
            <para>
            Fragments that have PreserveWhiteSpace set to true cannot be Justified because justification
            modifies the whitespace between words.
            </para>
            <para>
            Use <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.TabSize">TabSize</see> to set the width of tabs in spaces.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.TrimStartOfLine">
            <summary>
            If PreserveWhiteSpace is true, for each (see remarks) line the leading whitespaces will be removed.
            </summary>
            <remarks>
            The first line, from the container this fragment is used in, will not be trimmed.
            Also the first line after a carriage return will not be trimmed.
            <para>
            So basically only the lines that are automatically broken by this component (due to the fact that there is no more space left on the current line to place the characters)
            will be trimmed.
            </para>
            <para>
            Meaningless when PreserveWhiteSpace is false.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.TabSize">
            <summary>
            If PreserveWhiteSpace is true, each tab character (\t) is replaced by
            TabSize number of spaces. Default is 3.
            </summary>
            <remarks>
            Meaningless when PreserveWhiteSpace is false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.HasContextFields">
            <summary>
            If set the text property is scanned for
            fields and these are substituted during PDF generation.
            If <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Reference">Reference</see> is not <see langword="null"/>, this property is ignored.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.SuppressSpaceBefore">
            <summary>
            Suppress the insertion of an extra space between two successive fragments.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.StrikeOut">
            <summary>
            Get or set if the fragment is rendered striked out.
            </summary>
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Underline"/>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Underline">
            <summary>
            Get or set if the fragment is rendered with an underline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.StrikeOut"/>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.DoubleUnderline">
            <summary>
            Get or set if the fragment is rendered with a double underline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Underline"/>
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.StrikeOut"/>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.TextColor">
            <summary>
            Get or set the color of the text and decoration.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Outline">
            <summary>
            Get or set if the fragment is rendered as an outline.
            </summary>
            <remarks>
            If the outline is set the characters will only draw the outline edges and
            the area will not be filled.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Note">
            <summary>
            Get or set the note to be inserted.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Superscript">
            <summary>
            Get or set if the fragment is rendered as superscript.
            </summary>
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Subscript"/>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Subscript">
            <summary>
            Get or set if the fragment is rendered as subscript.
            </summary>
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Superscript"/>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.VerticalAlign">
            <summary>
            Gets or sets the vertical align.
            </summary>
            <value>
            The vertical align.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Background">
            <summary>
            Get or set the brush that is used to paint the background of the fragment.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Border">
            <summary>
            Get or set the border around this content element.
            Default is null, meaning that there is no border.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.Clone">
            <summary>
            Clones a Fragment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Fragment
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Implement this method in a derived class to generate content
            dynamically.
            </summary>
            <remarks>
            This method will be called just before PDF generation starts.
            It allows you to setup custom content in derived classes.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Context">
            <summary>
            The paragraph used to substitute context fields.
            </summary>
            <remarks>
            This overrides any linked paragraph (Link.Reference).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Actions">
            <summary>
            The actions that the PDF reader will execute when this link is clicked.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Reference">
            <summary>
            Use this paragraph to resolve context fields.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Destination">
            <summary>
            Get the ParagraphDestination of the last GoToAction in the collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.IsLink">
            <summary>
            True if <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Actions">Actions</see> holds one or more actions.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.ShowLinkBorder">
            <summary>
            If true a black 1pt outline is drawn around the clickable area of the link.
            </summary>
            <remarks>Default value is false.</remarks>
            <example>
            XML
            <code>
              &lt;paragraph type="textparagraph"&gt;
                 &lt;fragment textcolor="blue" showlinkborder="true"&gt;
                    &lt;action type="uriaction" uri="http://www.tallcomponents.com"/ &gt;
                    Visit TallComponents online.
                 &lt;/fragment&gt;
              &lt;/paragraph&gt;
            </code>
            </example>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">
            <summary>
            Collection of fragment objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.#ctor">
            <summary>
            Create a new empty collection of fragments.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Add">
            <summary>
            Add a fragment to this collection.
            </summary>
            <remarks>
            Creates a new fragment, adds it to the collection and returns the created fragment.
            </remarks>
            <returns>New fragment.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Add(TallComponents.PDF.Layout.Paragraphs.Fragment)">
            <summary>
            Add an existing fragment to this collection.
            </summary>
            <param name="fragment">Add this fragment.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Remove(TallComponents.PDF.Layout.Paragraphs.Fragment)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">Fragment</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">FragmentCollection</see>.
            </summary>
            <param name="fragment">The fragment to remove.</param>
            <remarks>
            The <paramref name="fragment"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.FragmentCollection)">
            <summary>
            Adds the elements of a FragmentCollection to the end of this collection.
            </summary>
            <param name="fragments">The FragmentCollection whose elements should be added to
            the end of the collection.
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para></param>
            <exception cref="T:System.ArgumentNullException">The given FragmentCollection is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.Fragment[])">
            <summary>
            Adds the elements of an array of fragments to the end of this collection.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="fragments">The array of fragments whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given array is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Clear">
            <summary>
            Removes all fragments from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Contains(TallComponents.PDF.Layout.Paragraphs.Fragment)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">Fragment</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">FragmentCollection</see>.
            </summary>
            <param name="fragment">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment"/> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="fragment"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.Fragment)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">Fragment</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">FragmentCollection</see>.
            </summary>
            <param name="fragment">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.Fragment)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment"/> should be inserted.</param>
            <param name="fragment">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment"/> to be insert.</param>
            <remarks>
            The <paramref name="fragment"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">Fragment</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">FragmentCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Count">
            <summary>
            Number of fragment objects in this collecion.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Item(System.Int32)">
            <summary>
            0-based indexer that returns the fragments at the specified position.
            Returns <see langword="null"/> if index is invalid.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Clone">
            <summary>
            Clones a FragmentCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a FragmentCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Implement this method in a derived class to generate content
            dynamically.
            </summary>
            <remarks>
            This method will be called just before PDF generation starts.
            It allows you to setup custom content in derived classes.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.AnnotationList">
            <summary>
            Returns the annotations for this fragment
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.IPatternList">
            <summary>
            Returns the patterns for this fragment
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.TextFieldMode">
            <summary>
            We need to set the Shape in 'special' mode, because acrobat dispays text different then we do.
            However we do not want to change it for all text we display.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.FireLineBreak(TallComponents.PDF.Layout.Paragraphs.Fragment,TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs)">
            <summary>
            The function that will fire the assigned events for breaking words on line end.
            </summary>
            <param name="sender">The fragment (sender) that has a word that needs to be broken.</param>
            <param name="args">The event arguments that have to be updated to facilitate word breaking.</param>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.LineBreak">
            <summary>
            Will be fired when a word has to be broken.
            </summary>
            <remarks>Events have to be set (forwarded) in the owning object (TextParagraph, ML-TextShape)</remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.LineBreakContainer">
            <summary>
            Class that is used to hold the line break info.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.LineBreakContainer.#ctor(TallComponents.PDF.Layout.Paragraphs.Fragment)">
            <summary>
            The container that is used to determine word breaking positions.
            </summary>
            <param name="owner">The fragment that holds (creates) this container.</param>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.LineBreakContainer.LineBreakEventHandler">
            <summary>
            The event handlers for this event.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.LineBreakContainer.HandleEvent(TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs)">
            <summary>
            Handler that triggers the LineBreak event.
            </summary>
            <remarks>As sender of the event the owner (parent) of the container is used...</remarks>
            <param name="args">arguments that have to be supplied with the event.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs">
            <summary>
            Class containing data for LineBreak events.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.Word">
            <summary>
            Get the word that has to be broken into part.
            </summary>
            <remarks>The remainder part will be placed on the next line.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.BreakAt">
            <summary>
            The 0-based position at which the word will be broken into parts.
            </summary>
            <remarks>
            By default this value will be set the the default behavior.
            <para>Example: BreakAt=4 on 'WordBreak' results in 'Word'-'Break'.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.BreakBefore">
            <summary>
            The position before which the word has to be broken.
            </summary>
            <remarks>
            <para>The value returned will depend if a hyphen has to be inserted.</para>
            <para>The BreakAt must be set before or at this value.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.InsertHyphen">
            <summary>
            Get or set if a hyphen has to be inserted.
            </summary>
            <remarks>If the current breaking position has become invalid, it will be re-positioned 
            to the initial position.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.HyphenChar">
            <summary>
            Get or set the character to insert on the breaking position.
            </summary>
            <remarks>The hyphen will only be inserted if <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.InsertHyphen"/> has been set to true.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.LineBreakEventHandler">
            <summary>
            Represents the method that handles LineBreak events.
            </summary>
            <param name="sender">The fragment the word has to be broken for.</param>
            <param name="args">The LineBreak event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.LineBreakFragment">
            <summary>
            Insert this fragment to force a line break.
            </summary>
            <remarks>
            Any text added to this fragment is ignored.
            </remarks>
            <example>
            XML
            <code>
            &lt;paragraph type="TextParagraph"&gt;
              &lt;fragment&gt;First Line&lt;/fragment&gt;
              &lt;fragment type="LineBreakFragment" /&gt;
              &lt;fragment&gt;Second Line&lt;/fragment&gt;
            &lt;/paragraph&gt;
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.LineBreakFragment.#ctor">
            <summary>
            Create a new line break fragment.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.TabStop">
            <summary>
            A tab stop defines a point at which text continues after a tab character.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStop.#ctor">
            <summary>
            Create a new tab stop. Position is 0.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStop.#ctor(System.Double)">
            <summary>
            Create a new tab stop.
            </summary>
            <param name="position">The position of this tab stop.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TabStop.Position">
            <summary>
            The position of this tab stop measured from the left edge in points.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.TabStopCollection">
            <summary>
            Collection of tab stops.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Add(TallComponents.PDF.Layout.Paragraphs.TabStop)">
            <summary>
            Add a new tab stop.
            </summary>
            <param name="tabStop">Add this tab stop.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Add(System.Double)">
            <summary>
            Add a new tab stop.
            </summary>
            <param name="position">Position of new tab stop.</param>
            <returns>New tab stop.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Clear">
            <summary>
            Clear this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Count">
            <summary>
            Number of tab stops.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Item(System.Int32)">
            <summary>
            Get a tabstop by 0-based index.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TextLine.AddAnnotation(TallComponents.PDF.Base.Annotations.Annotation)">
            <summary>
            Adds an annotation to the list.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TextLine.AddPattern(TallComponents.PDF.Base.Graphics.Patterns.IPattern)">
            <summary>
            Adds a pattern to the list.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TextLine.fixate(TallComponents.PDF.Base.Graphics.Content)">
            <summary>
            Now that the exact position of this textline is known, we can
            set the exact positions of all annotations that are associated
            with this line.
            </summary>
            <param name="content">Graphical content stream</param>
            <returns>Generation result with eg annotation data</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Note">
            <summary>
            Used to add a note to a paragraph/fragment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Note.#ctor">
            <summary>
            Create a new sticky note.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Note.#ctor(System.String)">
            <summary>
            Create a new sticky note.
            </summary>
            <param name="text">The text for this sticky note.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Note.#ctor(System.String,System.String)">
            <summary>
            Create a new sticky note.
            </summary>
            <param name="subject">The subject for this sticky note.</param>
            <param name="text">The text for this sticky note.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Note.Text">
            <summary>
            The text displayed in the sticky note.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Note.Subject">
            <summary>
            The subject displayed in the sticky note.
            </summary>
            <remarks>Default 'Note'</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Note.Icon">
            <summary>
            The icon used to display this sticky note.
            </summary>
            <remarks>
            Default = comment.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Note.Open">
            <summary>
            The sticky note should be initially be displayed open (or closed).
            </summary>
            <remarks>
            Default = true (open).
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">
            <summary>
            The collection of all cells in a row.
            </summary>
            <remarks>
            The cells object represents the content of a row. 
            It is obtained through the Cells property of Row.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.#ctor">
            <summary>
            Initialize a new instance of the CellCollection class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.CellCollection.Count">
            <summary>
            Get the number of cells in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.CellCollection.AnnotationList">
            <summary>
            Get the annotations in the cells
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.CellCollection.Item(System.Int32)">
            <summary>
            Get the Cell by 0-based index.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Add">
            <summary>
            Add a new Cell to this collection.
            </summary>
            <returns>The new Cell.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Add(TallComponents.PDF.Layout.Paragraphs.Cell)">
            <summary>
            Add an existing Cell to this collection.
            </summary>
            <param name="cell">Add this cell.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Add(System.Object)">
            <summary>
            Add an existing Cell to this collection.
            </summary>
            <param name="obj">Add this cell.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.CellCollection)">
            <summary>
            Adds the elements of a CellCollection to the end of this collection.
            </summary>
            <param name="cells">The CellCollection whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.Cell[])">
            <summary>
            Adds the elements of an array of cells to the end of this collection.
            </summary>
            <param name="cells">The array of cells whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Clear">
            <summary>
            Removes all cells from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Contains(TallComponents.PDF.Layout.Paragraphs.Cell)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell">Cell</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">CellCollection</see>.
            </summary>
            <param name="cell">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell"/> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="cell"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="cell"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.Cell)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell">Cell</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">CellCollection</see>.
            </summary>
            <param name="cell">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.Cell)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell"/> should be inserted.</param>
            <param name="cell">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell"/> to be insert.</param>
            <remarks>
            The <paramref name="cell"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="cell"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Remove(TallComponents.PDF.Layout.Paragraphs.Cell)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell">Cell</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">CellCollection</see>.
            </summary>
            <param name="cell">The cell to remove.</param>
            <remarks>
            The <paramref name="cell"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="cell"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell">Cell</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">CellCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell"/> to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Clone">
            <summary>
            Clones a Bordered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Bordered
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.FlushAnnotations">
            <summary>
            Flushes all annotations stored for future adjustments (moving/aligning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Implement this method in a derived class to generate content
            dynamically.
            </summary>
            <remarks>
            This method will be called just before PDF generation starts.
            It allows you to setup custom content in derived classes.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">
            <summary>
            Collection of Paragraph objects.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintParagraph">
            <summary>
            Occurs during generation when a new <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/> is needed.
            </summary>
            <remarks>
            This event occures in Event-Driven mode. Implement a handler if you need to 
            provide content on the fly.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.updateDynamicContent(TallComponents.PDF.Layout.Document)">
            <summary>
            Calls the compose method of the paragraph.
            </summary>
            <remarks>
            Ensures the updateDynamicContent method of the included paragraphs is 
            called as well.
            </remarks>
            <param name="doc">The document currently generated.</param>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintFirstParagraph">
            <summary>
            Occures when the first paragraph is needed.
            </summary>
            <remarks>
            Implement a handler for this event if you need to provide content at the top of each page in the section.
            Note that the paragraph provided by the event handler will be inserted <em>before</em> a 
            broken or rolled-back paragraph from the previous page continues.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintParagraphXml(TallComponents.PDF.Layout.Paragraphs.ParagraphCollection,TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs)">
            <summary>
            Implementation for PrintParagraph event for Event-Driven Mode.
            </summary>
            <param name="sender">The Paragraphs object that fired the event.</param>
            <param name="args">The arguments for the event.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.#ctor">
            <summary>
            Initialize a new instance of the Paragraphs collection class.
            </summary>
            <remarks>
            Create an empty Paragraphs collection.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.#ctor(TallComponents.PDF.Layout.Paragraphs.ParagraphCollection)">
            <summary>
            Construct a ParagraphCollection and copy all items from an existing collection.
            </summary>
            <param name="pars">The collection to copy from.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Add(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
            <summary>
            Add an existing paragraph.
            </summary>
            <param name="paragraph"></param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.ParagraphCollection)">
            <summary>
            Adds the elements of a ParagraphCollection to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="paragraphs">The ParagraphCollection whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.Paragraph[])">
            <summary>
            Adds the elements of an array of paragraphs to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="paragraphs">The array of paragraphs whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Contains(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraph</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see>.
            </summary>
            <param name="paragraph">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="paragraph"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="paragraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraph</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see>.
            </summary>
            <param name="paragraph">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.Paragraph)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/> should be inserted.</param>
            <param name="paragraph">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/> to be insert.</param>
            <remarks>
            The <paramref name="paragraph"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="paragraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Remove(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraph</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see>.
            </summary>
            <param name="paragraph">The paragraph to remove.</param>
            <remarks>
            The <paramref name="paragraph"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="paragraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraph</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/> to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Data">
            <summary>
            Get or set the user defined data that will be passed with the PrintParagraph event.
            </summary>
            <remarks>
            It is a good place to store your data source (e.g. a SqlDataReader or an XmlReader).
            Note: If you want to serialize the document the data must be serializable.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Clear">
            <summary>
            Removes all paragraphs from this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Count">
            <summary>
            Get the number of paragraphs in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Item(System.Int32)">
            <summary>
            Get or set a paragraph by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Item(System.String)">
            <summary>
            Get or set a paragraph by it's ID.
            </summary>
            <remarks>
            Setting a paragraph with an ID that is not yet in the collection will throw an ArgumentOutOfRangeException. 
            Use <see cref="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Add(TallComponents.PDF.Layout.Paragraphs.Paragraph)"/> to add a new paragraph.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.IndexOf(System.String)">
            <summary>
            Get the index of a Paragraph with a given ID.
            </summary>
            <param name="id">The ID to look for.</param>
            <returns>0-based index of the Paragraph or -1 if not found.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.VerticalAlignment">
            <summary>
            Get or set the vertical alignment of this paragraphs collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.RollbackAllContent">
            <summary>
            Forces all content to rollback, regardless of text constraints.
            </summary>
            <remarks>This is used when a row is setup to not break across pages (DoNotBreak).</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.generate(TallComponents.PDF.Layout.Document,TallComponents.PDF.Layout.Cursor,System.Double,System.Double,System.Double,System.Boolean,System.Boolean@)">
            <summary>
            Create PDF content from all paragraphs in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.FlushAnnotations">
            <summary>
            Flushes all annotations stored for future adjustments (moving/aligning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Clone">
            <summary>
            Clones a ParagraphCollection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">
            <summary>
            The collection of all rows in a table.
            </summary>
            <remarks>
            The rows object represents the content of a table. 
            It is obtained through the Rows property of <see cref="T:TallComponents.PDF.Layout.Paragraphs.Table"/>.
            A row contains a number of cells.
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Row" />
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection" />
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" />
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.RowCollection.PrintRow">
            <summary>
            Occurs when is a new row is required to continue rendering.
            </summary>
            <remarks>
            This event lets the client specify a new row to add to the current table.
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.RowCollection.PrintFirstRow">
            <summary>
            Occurs before the first row at a page is added to a table.
            </summary>
            <remarks>
            This event lets the client specify the top of the current table. Note that
            it is possible to add multiple first rows.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.#ctor">
            <summary>
            Initialize a new instance of the RowCollection class.
            </summary>
            <remarks>
            Creates a new, empty collection of rows.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.RowCollection.Count">
            <summary>
            Get the number of rows.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.RowCollection.Item(System.Int32)">
            <summary>
            Get a row by index (0-based).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.RowCollection.Data">
            <summary>
            Get or set user defined data. 
            </summary>
            <remarks>
            The object set is passed to the PrintRow event handler.
            You typically store a reference to a data source such as a SqlDataReader or XmlReader object.
            Note: If you want to serialize the document the data must be serializable.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Add">
            <summary>
            Add a row to the table.
            </summary>
            <remarks>
            Instantiates a new row and adds the row to the table.
            </remarks>
            <returns>The row that has been added to the table.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Add(TallComponents.PDF.Layout.Paragraphs.Row)">
            <summary>
            Add an existing row to the table.
            </summary>
            <remarks>
            Adds the given row to the table.
            </remarks>
            <param name="row">Row to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.RowCollection)">
            <summary>
            Adds the elements of a RowCollection to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="rows">The RowCollection whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.Row[])">
            <summary>
            Adds the elements of an array of rows to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="rows">The array of rows whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Clear">
            <summary>
            Removes all rows from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Contains(TallComponents.PDF.Layout.Paragraphs.Row)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row">Row</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">RowCollection</see>.
            </summary>
            <param name="row">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row"/> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="row"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="row"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.Row)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row">Row</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">RowCollection</see>.
            </summary>
            <param name="row">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.Row)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row"/> should be inserted.</param>
            <param name="row">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row"/> to be insert.</param>
            <remarks>
            The <paramref name="row"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="row"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Remove(TallComponents.PDF.Layout.Paragraphs.Row)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row">Row</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">RowCollection</see>.
            </summary>
            <param name="row">The row to remove.</param>
            <remarks>
            The <paramref name="row"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="row"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row">Row</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">RowCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row"/> to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Clone">
            <summary>
            Clones a Bordered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Bordered
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.FlushAnnotations">
            <summary>
            Flushes all annotations stored for future adjustments (moving/aligning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Implement this method in a derived class to generate content
            dynamically.
            </summary>
            <remarks>
            This method will be called just before PDF generation starts.
            It allows you to setup custom content in derived classes.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">
            <summary>
            Definition for all cells in a column of a table.
            </summary>
            <remarks>
            To be able to simply assign formatting parameters to the cells in a table
            it is possible to assign a TableColumnDefinition.
            <list type="bullet">
            <listheader>The following cell properties will be overridden by the column definition:</listheader>
            <item>PreferredWidth<br/>
            In points, real world measurements (3cm) or relative (10%).</item>
            <item>Fixed<br/>
            Gives this cell a higher priority in case the cell width has to be 
            re-adjusted to make the table fit on the page/in the given space.</item>
            <item>FitToContent<br/>
            Specifies if the cell has to be adjusted to the contents size (if possible). 
            For a line of text this is when all text is on 1 line.</item>
            </list>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.#ctor">
            <summary>
            Initialize a new instance of the Column class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.#ctor(TallComponents.PDF.Layout.Unit)">
            <summary>
            Creates a new instance of the TableColumnDefinition class with the given settings.
            </summary>
            <param name="preferredWidth">The preferred width for all cells in points or parsable format (like 3cm or 40%).</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.#ctor(TallComponents.PDF.Layout.Unit,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the TableColumnDefinition class with the given settings.
            </summary>
            <param name="preferredWidth">The preferred width for all cells in points or parsable format (like 3cm or 40%).</param>
            <param name="fitToContent">Specifies if the cell has to be resized to fit to the content.</param>
            <param name="isFixed">Specifies if the size of the cell is fixed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.PreferredWidth">
            <summary>
            Get or set the preferred width for all cells in this column.
            </summary>
            <remarks>The width may be specified as a fixed value (in points) or a 
            value that can be parsed (like 3cm or 25%).</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.Fixed">
            <summary>
            Get or set if the width of the cell/column is fixed.
            </summary>
            <remarks>
            When it is not possible to respect the preferred width of all cells
            in the table, the preferred width of a Fixed cell will have precedence
            over non-fixed cells.
            <para>By default this is turned off (false).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.FitToContent">
            <summary>
            Get or set if the width of the cell/column has to grow with the content.
            </summary>
            <remarks>
            The width of this cell will be set to the minimum value that does
            not break any included paragraph across lines. If the available 
            space does not allow this, the content is broken anyway.
            <para>By default this is turned off (false).</para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">
            <summary>
            Contains the cell definitions for all cells in the corresponding table column.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.#ctor">
            <summary>
            Creates a new instance of the TableColumnDefinitionCollection class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Add(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
            <summary>
            Add a column definition to the collection.
            </summary>
            <remarks>
            Adds the given column definition to the collection.
            </remarks>
            <param name="column">Add this column definition.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection)">
            <summary>
            Adds the elements of a TableColumnDefinitionCollection to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="columns">The TableColumnDefinitionCollection whose elements should be added to 
            the end of this collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition[])">
            <summary>
            Adds the elements of an array of column definitions to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="columns">The array of column definitions whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Clear">
            <summary>
            Removes all column definitions from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Contains(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">TableColumnDefinition</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">TableColumnDefinitionCollection</see>.
            </summary>
            <param name="column">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition"/> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="column"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="column"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">Column</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">TableColumnDefinitionCollection</see>.
            </summary>
            <param name="column">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition"/> should be inserted.</param>
            <param name="column">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition"/> to be insert.</param>
            <remarks>
            The <paramref name="column"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="column"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Remove(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">TableColumnDefinition</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">TableColumnDefinitionCollection</see>.
            </summary>
            <param name="column">The column to remove.</param>
            <remarks>
            The <paramref name="column"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="column"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">Column</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">ColumnCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Count">
            <summary>
            Get the number of table row definitions in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Item(System.Int32)">
            <summary>
            Get a TableColumnDefinition by 0-based index.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.BreakParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.ContinueParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.EndParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.RollbackParagraphEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.RollbackParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.TransformParagraphEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.TransformParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.FitPolicy">
            <summary>
            Different policies for handling image paragraphs that do not fit the available space.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.FitPolicy.ThrowException">
            <summary>
            If the image width or height exceed the available space, an ImageSizeException is thrown.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.FitPolicy.Shrink">
            <summary>
            If the image width or height exceed the available space, the image shrinks to fit. Depending
            on KeepAspectRatio, it will keep the aspect ratio or not. The image will never grow.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.FitPolicy.Clip">
            <summary>
            If the image width or height exceed the avaiable space, the image is clipped. Either the
            right and/or bottom part is clipped.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.BookmarkParagraph">
            <summary>
            A bookmakt paragraph inserts a bookmark item, but has no content.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.BookmarkParagraph.#ctor">
            <summary>
            Initialize a new instance of the BookmarkParagraph class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.BookmarkParagraph.#ctor(System.Int32,System.String)">
            <summary>
            Initialize a new instance of the BookmarkParagraph class with given level and format.
            </summary>
            <param name="level">0-based bookmark level.</param>
            <param name="numberFormat">Bookmark text. Fields such as #c and #0 are replaced. 
            See also 'Fields' in the 'tutorial' section.
            </param>
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">For the resolved context field definition.</seealso>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.BookmarkParagraph.Bookmark">
            <summary>
            Get or set the bookmark text. 
            </summary>
            <remarks>
            Fields such as #c and #0 are replaced. 
            See also 'Fields' in the 'tutorial' section.
            </remarks>
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">For the resolved context field definition.</seealso>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Bordered">
            <summary>
            Base class for all classes that have a border.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Bordered.Margin">
            <summary>
            Get or set the margin of a border.
            </summary>
            <remarks>
            Margin is extra spacing outside the border.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Bordered.Padding">
            <summary>
            Get or set the padding of a border.
            </summary>
            <remarks>
            Padding is extra spacing between the border and the content. 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Bordered.Border">
            <summary>
            Get or set the border around this content element. 
            Default is null, meaning that there is no border.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Bordered.Clone">
            <summary>
            Clones a Bordered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Bordered.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Bordered
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Cell">
            <summary>
            A cell is part of a row. A cell has a collection of paragraphs.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Cell.#ctor">
            <summary>
            Initialize a new instance of the Cell class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.Paragraphs">
            <summary>
            Get all paragraphs in this cell.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.VerticalAlignment">
            <summary>
            Get or set the vertical alignment of the contained Paragraphs collection.
            </summary>
            <remarks>
            Setting or getting this property is equivalen to setting and getting the VAlignment 
            property of the Paragraphs collection. 
            Vertical alignment works within space available in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row"/>. 
            Use the Row's <see cref="P:TallComponents.PDF.Layout.Paragraphs.Row.MinHeight"/> to create room for alignment if needed.
            <para>For horizontal alignment, set the <see cref="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.HorizontalAlignment"/> on each Paragraph in the cell.</para>
            <para>This property maps directly to the <see cref="P:TallComponents.PDF.Layout.Paragraphs.Cell.VerticalAlignment"/> property on the Paragraphs collection.
             It is provided because the Paragraphs class is not normally used in XML declarations.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.PreferredWidth">
            <summary>
            Get or set the cells preferred width.
            </summary>
            <remarks>
            An attempt is made render the cell with this width.
            This property is ignored if FitToContent is true.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.FitToContent">
            <summary>
            Get or set if the width of the cell has to grow with the content.
            </summary>
            <remarks>
            The width of this cell will be set to the minimum value that does
            not break any included paragraph across lines. If the available 
            space does not allow this, the content is broken anyway.
            By default this is turned off (false).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.Fixed">
            <summary>
            Get or set if the width of the cell is fixed.
            </summary>
            <remarks>
            When it is not possible to respect the preferred width of all cells
            in the table, the preferred width of a Fixed cell will have precedence
            over non-fixed cells.
            By default this is turned off (false).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.ColSpan">
            <summary>
            Get or set the number of columns that this cell spans.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Cell.Clone">
            <summary>
            Clones a Cell.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Cell.FlushAnnotations">
            <summary>
            Flushes all annotations stored for future adjustments (moving/aligning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Cell.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Implement this method in a derived class to generate content
            dynamically.
            </summary>
            <remarks>
            This method will be called just before PDF generation starts.
            It allows you to setup custom content in derived classes.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Drawing">
            <summary>
            Can hold shapes (Graphical elements).
            </summary>
            <remarks>
            The drawing class is a specialization of paragraph. All members of paragraph 
            are members of drawing as well. Like any paragraph, a drawing can be added to any 
            paragraph collection, e.g.
            section, table cell, header and footer. The drawing has a collection of shapes.
            You draw by adding shapes to this collection.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Drawing.#ctor">
            <summary>
            Initialize a new instance of the Drawing class.
            </summary>
            <remarks>
            Creates a new Drawing instance.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Drawing.#ctor(System.Double,System.Double)">
            <summary>
            Initialize a new instance of the Drawing class with the given width and height.
            </summary>
            <param name="width">Width in points.</param>
            <param name="height">Height in points.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Drawing.Width">
            <summary>
            Get or set the width in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Drawing.Height">
            <summary>
            Get or set the height in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Drawing.Shapes">
            <summary>
            Get or set the collection of shapes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Drawing.Clone">
            <summary>
            Clones a ParagraphCollection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.BreakParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventArgs.Left">
            <summary>
            Get the left position of paragraph on page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventArgs.Bottom">
            <summary>
            Get the bottom position of paragraph on page before break.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventArgs.Width">
            <summary>
            Get the available width for paragraph on page.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.ContinueParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventArgs.Left">
            <summary>
            Get the left position of paragraph on page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventArgs.Bottom">
            <summary>
            Get the bottom position of continued paragraph on page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventArgs.Width">
            <summary>
            Get the available width for paragraph on page.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.EndParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventArgs.Left">
            <summary>
            Get the left position of paragraph on page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventArgs.Bottom">
            <summary>
            Get the bottom position of paragraph on page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventArgs.Width">
            <summary>
            Get the available width for paragraph on page.
            </summary>
            <remarks>
            This width does not account for left or right indentation.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Paragraph">
            <summary>
            Create a Paragraph and assign it to this property in the event handler.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Left">
            <summary>
            The horizontal position of the left edge of this paragraph.
            This position does not account for left indentation.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Top">
            <summary>
            The vertical position of the top edge of this paragraph.
            This position does not account for spacing before.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Width">
            <summary>
            The available width for this paragraph.
            This width does not account for left or right indentation.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Data">
            <summary>
            User-defined data. This member points to the same object
            as the <see cref="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Data"/> member. You typically store a reference to a data 
            source such as a SqlDataReader or XmlReader object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.MoreContent">
            <summary>
            Set to true if more content is available. 
            </summary>
            <remarks>
            If set to true, the event will fire again so 
            more content can be added. If set to false, the event will not fire again and generation 
            will continue with the next section (if any).
            <para>
            MoreContent is only meaning-full when Paragraph is not null/nothing, otherwise it's evaluated as false.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.RowCollection.PrintRow"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs.Data">
            <summary>
            Get the user-defined data, maps to <see cref="P:TallComponents.PDF.Layout.Paragraphs.RowCollection.Data"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs.Row">
            <summary>
            Get or set the row to be printed. 
            </summary>
            <remarks>
            The event handler will set this to a new row. If <see langword="null"/> (default), the PrintRowEvent
            event will not occur again.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs.PageNumber">
            <summary>
            Get or set the page number of the page where this row starts.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs.MoreContent">
            <summary>
            Get or set if more content is available. 
            </summary>
            <remarks>
            If set to true, the event will fire again so 
            more content can be added. If set to false, the event will not fire again.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.RollbackParagraphEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.RollbackParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.RollbackParagraphEventArgs.Position">
            <summary>
            Get the top position of paragraph on page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.RollbackParagraphEventArgs.Rollback">
            <summary>
            Get or set if the paragraph has to be rolled back / discarded.
            </summary>
            <remarks>
            If true, the paragraph is not printed and will be discarded. You can add
            the paragraph again the next time <see cref="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintParagraph"/> event is fired.
            Default value is true.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.TransformParagraphEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.TransformParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TransformParagraphEventArgs.VerticalOffset">
            <summary>
            Get the amount of vertical translation of this paragraph.
            </summary>
            <remarks>
            The Top and Bottom arguments of the PrintParagraph, BreakParagraph, ContinueParagraph
            and EndParagraph must be increased by the value of this property to determine the final
            position of this paragraph.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Heading">
            <summary>
            Headings are NumberedItems that appear in the table of contents.
            </summary>
            <remarks>
            The Heading class is a specialization of NumberedItem. 
            All members of NumberedItem are members of Heading as well. 
            A heading marks the start of a block of text at a certain outline level.
            Headings appear as an hierarchy of bookmarks in the PDF viewer.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Heading.#ctor">
            <summary>
            Initialize a new instance of the Heading class.
            </summary>
            <remarks>
            Create a new heading with outline level 0.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Heading.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the Heading class with the given outline level.
            </summary>
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">For the resolved context field definition.</seealso>
            <param name="level">Outline level of new Heading.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Heading.#ctor(System.Int32,System.String)">
            <summary>
            Initialize a new instance of the Heading class with given number or bullet format and outline level.
            </summary>
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">For the resolved context field definition.</seealso>
            <param name="level">Outline level of new Heading.</param>
            <param name="numberFormat">Number format of new Heading.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.HorizontalLine">
            <summary>
            The horizontal line class is a specialization of paragraph. 
            </summary>
            <remarks>
            All members of paragraph 
            are members of horizontal line as well. Like any paragraph, a horizontal line can be added to any 
            paragraph collection, e.g. section, table cell, header and footer. 
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor">
            <summary>
            Create a new horizontal line.
            </summary>
            <remarks>Draws a black horizontal line with a width of 1 point.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Unit)">
            <summary>
            Create a new horizontal line with given width and thickness.
            </summary>
            <remarks>The default color for the line is Black.</remarks>
            <param name="width">Width of the line in points or parsable length (eg. 3cm or 40%).</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(System.Double)">
            <summary>
            Create a new horizontal line with given thickness.
            </summary>
            <remarks>The default color for the line is Black.</remarks>
            <param name="lineWidth">Thickness of the line in points.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Create a new horizontal line with given wheight.
            </summary>
            <remarks>The default width of the line is 1 point.</remarks>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Unit,System.Double)">
            <summary>
            Create a new horizontal line with given width and thickness.
            </summary>
            <remarks>The default color for the line is Black.</remarks>
            <param name="width">Width of the line in points or parsable length (eg. 3cm or 40%).</param>
            <param name="lineWidth">Thickness of the line in points.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Unit,TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Create a new horizontal line with given width and color.
            </summary>
            <param name="width">Width of the line in points or parsable length (eg. 3cm or 40%).</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(System.Double,TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Create a new horizontal line with given width and color.
            </summary>
            <param name="lineWidth">Thickness of the line in points.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Unit,System.Double,TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Create a new horizontal line with given width and color.
            </summary>
            <param name="width">Width of the line in points or parsable length (eg. 3cm or 40%).</param>
            <param name="lineWidth">Thickness of the line in points.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.Color">
            <summary>
            Gets or sets the color for the horizontal line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.LineWidth">
            <summary>
            Get or set the width (thickness) of the line in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.Width">
            <summary>
            Get or set the (horizontal)width of the line.
            </summary>
            <remarks>The property accepts a double (is width in points) or as string (like 5cm or 50%).</remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Image">
            <summary>
            A paragraph that holds image (graphical) data.
            </summary>
            <remarks>
            The image class is a specialization of paragraph. Use this class to place a raster
            image on the page.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor">
            <summary>
            Initialize a new instance of the image class.
            </summary>
            <remarks>
            Create a new, uninitialized image.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.String)">
            <summary>
            Initialize a new instance of the image class from an image file.
            </summary>
            <param name="path">Absolute, relative or virtual path.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new instance of the image class from an image file and select the frame index.
            </summary>
            <param name="path">Absolute, relative or virtual path.</param>
            <param name="frameIndex">0-based frame index.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Create a new Image from a WPF image source.
            </summary>
            <param name="bitmapSource">The bitmap source</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of the image class from a stream of binary data.
            </summary>
            <remarks>
            Create a new Image from a stream of binary data.
            The stream is not closed when the image is disposed. Make sure it remains open until
            Document.Write is completed.
            </remarks>
            <param name="stream">The stream containing the binairy image data.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initialize a new instance of the image class from a stream of binary data.
            </summary>
            <remarks>
            Create a new Image from a stream of binary data.
            When setting disposeStream to true, the stream is disposed when this Image class is released
            from memory. Note that if this instance of the stream is used multiple times an error will
            be thrown if the stream is used after this Image class is removed from memory.
            </remarks>
            <param name="stream">The stream containing the binairy image data.</param>
            <param name="frameIndex">0-based frame index.</param>
            <param name="disposeStream">The stream will be disposed by this component.</param>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.Image.GetWebCredentials">
            <summary>
            Occurs when a image is loaded from a weblocation to retrieve the credentials needed.
            </summary>
            <remarks>Set the credentials in the arguments to perform authentication.
            <para>To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.ProcessTextData(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Initialize this object from an XmlReader.
            </summary>
            <param name="reader">An XmlReader positioned on an node that represents this object.</param>
            <exception cref="T:TallComponents.PDF.Layout.InvalidImageException">Occures when invalid Base64 data is encountered.</exception>
            <param name="preserveWhitespace">Whether whitespace must be preserved.</param>
            <exception cref="T:System.InvalidOperationException">Occures when image data has already been loaded.</exception>
            <exception cref="T:System.ArgumentNullException">Occures when the reader is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.Path">
            <summary>
            Get or set the absolute, relative or virtual path of the image file.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.MaskColor">
            <summary>
            Get or set the color that will act as the transparent color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.Compression">
            <summary>
            Get or set the compression applied to the image data inside the PDF document.
            </summary>
            <remarks>
            This is a best-effort setting. Images that are already compressed
            will in most cases not be recoded to another compression.
            Uncompressed images will honor the compression setting.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.FrameIndex">
            <summary>
            Get or set the 0-Based index of the frame to display.
            </summary>
            <remarks>
            Most images contain only 1 frame. TIFF images may contain more than one frame,
            use this proeprty to select the frame to display in the PDF document.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.FrameCount">
            <summary>
            Get the number of frames in the image.
            </summary>
            <remarks>
            Most images contain 1 frame. Use <see cref="P:TallComponents.PDF.Layout.Paragraphs.Image.FrameIndex"/> to select the frame to display.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.IgnoreAlpha">
            <summary>
            Get or set if the alpha transparancy layer is ignored.
            </summary>
            <remarks>
            Set to true to completely ignore alpha transparency in the image. If no alpha information
            is available this setting is ignored.
            Default value is false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.InvertCmykChannels">
            <summary>
            Set to true to invert the colors in a CMYK image.
            </summary>
            <remarks>
            Default = false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.FitPolicy">
            <summary>
            Get or set the fit policy of the image
            </summary>
            <remarks>
            What to do if this image does not fit the available space.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.Width">
            <summary>
            Get or set the width of this image in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.Height">
            <summary>
            Get or set the height of this image in points.
            </summary>
            <remarks>
            Only used if KeepAspectRatio is set to false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.KeepAspectRatio">
            <summary>
            Get or set if the aspect ratio is respected when resizing.
            </summary>
            <remarks>
            If set to true, the Height is calculated from the Width to keep the aspect ratio.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.Clone">
            <summary>
            Clones a ParagraphCollection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.NumberedItem">
            <summary>
            A textparagraph that has a number reference.
            </summary>
            <remarks>
            The NumberedItem class is a specialization of TextParagraph. 
            All members of TextParagraph are members of NumberedItem as well.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.#ctor">
            <summary>
            Initialize a new instance of the NumberedItem class.
            </summary>
            <remarks>
            Create a new NumberedItem with empty number format and 0 outline level.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.#ctor(System.String)">
            <summary>
            Initialize a new instance of the NumberedItem class with given number format.
            </summary>
            <param name="numberFormat">Format of number or bullet part.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the NumberedItem class with given 0-based outline level.
            </summary>
            <param name="level">Outline Level of this numbered item.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.#ctor(System.Int32,System.String)">
            <summary>
            Initialize a new instance of the NumberedItem class with given 0-based outline level and number format.
            </summary>
            <param name="level">Outline level of this numbered item.</param>
            <param name="numberFormat">Format of number or bullet part.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.NumberAlignment">
            <summary>
            Get or set horizontally alignment of the number part of this item. 
            </summary>
            <remarks>
            The left and right edges against which alignment occurs, is determined
            by the alignment of the item itself and the left and right indentation
            of the number part.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.NumberLeftIndentation">
            <summary>
            Get or set the left indentation of the number part.
            </summary>
            <remarks>
            The indentation respects the left margin of the current section.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.NumberRightIndentation">
            <summary>
            Get or set the right indentation of the number part
            </summary>
            <remarks>
            The indentation respects the left indentation of the body of this item.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.NumberFragments">
            <summary>
            Get the content of the number part of this item. 
            </summary>
            <remarks>
            These fragments may contain fields like #0, #1 and #a0 that will be resolved like 
            heading fragments. The difference between a numbered item and a heading is that a 
            heading appears in the document outline while a numbered item does not.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.Level">
            <summary>
            0-based outline level of this heading. E.g. 0 may be the outline level
            of a chapter.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.RestartNumbering">
            <summary>
            Get or set if the numbering at this level is restarted. 
            </summary>
            <remarks>
            The heading number of this paragraph will be the value assigned to <see cref="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.RestartNumberingAt"/>. 
            The default value is 1. Note that the numbers at a lower level are not reset.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.RestartNumberingAt">
            <summary>
            Gets or sets the number to start the numbered item range with.
            </summary>
            <remarks>This value is set when <see cref="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.RestartNumbering"/> is set to true. The default
            value is 1.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.Replace(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="text">For internal use only.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.Clone">
            <summary>
            Clones a NumberedItem.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.updateDynamicContent(TallComponents.PDF.Layout.Document)">
            <summary>
            Calls the compose method of the paragraph.
            </summary>
            <remarks>
            Ensures the updateDynamicContent method of the included 
            FragmentCollection is called as well.
            </remarks>
            <param name="doc">The document currently generated.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">
            <summary>
            The paragraph class is the base class for a number of specialized 
            classes.
            </summary>
            <remarks>
            A paragraph is part of exactly one section.
            Specializations are TextParagraph, Table, Image and Drawing. These 
            classes may be further specialized. The following applies to all 
            special paragraphs.
            <para>An empty paragraph will not render anything, not even SpacingBefore and SpacingAfter.</para>
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.BreakParagraph">
            <summary>
            Occurs when a paragraph is broken across pages.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.RollbackParagraph">
            <summary>
            Occurs when a paragraph is rolled back due to a text flow constraint.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.EndParagraph">
            <summary>
            Occurs when a paragraph ends.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.ContinueParagraph">
            <summary>
            Occurs when a paragraph continues.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.TransformParagraph">
            <summary>
            Occurs when a paragraph is transformed e.g. due to vertical alignment.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.Actions">
            <summary>
            The actions that will be executed when the paragraph is clicked.
            </summary>
            <remarks>
            The actions are executed by the PDF reader application.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.Label">
            <summary>
            Get or set the label for this paragraph.
            </summary>
            <remarks>
            This attribute can be referenced using the #l field.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.Caption">
            <summary>
            This attribute can be referenced using the #c field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.SpacingBefore">
            <summary>
            Get or set the number of added user space units above the rendered paragraph.
            </summary>
            <remarks>
            If this paragraph is at the top of the page the spacing is omitted.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.SpacingAfter">
            <summary>
            Get or set the number of added user space units below the rendered paragraph. 
            </summary>
            <remarks>
            This spacing may be omitted at the bottom of the page. 
            In other words, it cannot cause a page break.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.LeftIndentation">
            <summary>
            Get or set the left side indent for this paragraph.
            </summary>
            <remarks>
            For this paragraph only, the left margin shifts to the
            right by the amount specified. Can be negative (implies left shift).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.RightIndentation">
            <summary>
            Get or set the right side indent for this paragraph.
            </summary>
            <remarks>
            For this paragraph only, the right margin shifts to the
            left by the amount specified. Can be negative (implies right shift).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.HorizontalAlignment">
            <summary>
            Get or set the horizontal alignment of the paragraph.
            </summary>
            <remarks>
            How the complete paragraph is horizontally aligned on the page 
            with respect to the left and right page margins.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.Note">
            <summary>
            Get or set the note to be inserted.
            </summary>
            <remarks>The note is inserted in the left margin of the paragraph.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Implement this method in a derived class to generate content
            dynamically.
            </summary>
            <remarks>
            This method will be called just before PDF generation starts.
            It allows you to setup custom content in derived classes.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.DoNotBreak">
            <summary>
            Get or set if a paragraph may be broken on page edges.
            </summary>
            <remarks>
            If possible, this paragraph will not be broken across two pages.
            If a paragraph cannot be rendered entirely on the remaining available
            page space, it will start on the next page leaving some blank space.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.KeepWithNext">
            <summary>
            Get or set if the next paragraph needs start on the same page.
            </summary>
            <remarks>
            If possible, at least some of this paragraph will be rendered on the same page as 
            at least some of the next paragraph. Insufficient space causes a TextFlowException.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.CancelTransaction">
            <summary>
            Indicates if the transaction has to be cancelled and the paragraph has to be moved on the next page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.StartOnNewPage">
             <summary>
             Get or set if the paragraph needs to start on a new page. 
            </summary>
             <remarks>
             Start this paragraph on a new page (add page break before). Ignored if the paragraph already start on a new page.
             </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.StartOnNewColumn">
             <summary>
             Get or set if the paragraph needs to start on a new column. 
            </summary>
             <remarks>
             Start this paragraph on a new column (add column break before). 
             Ignored if the paragraph already starts on a new column.
             </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.ID">
            <summary>
            Get or set the ID for referencing the paragraph.
            </summary>
            <remarks>
            A fragment can refer to this paragraph by settings its
            ReferenceID property equal to this property. This is an alternative
            for setting the Reference property of a fragment to this paragraph.
            This is primarily relevant for making references in an XML file.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.Clone">
            <summary>
            Clones a Paragraph.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.MarkReferenced">
            <summary>
            Marks the paragraph as referenced.
            </summary>
            <remarks>
            This is called when assigning the paragraph directly (object reference).
            If no ID is set it fails during the generation. This ensures a ID is set. 
            <para>This ID can NOT be used for referencing!</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.Replace(System.String)">
            <summary>
            For internal use only
            </summary>
            <param name="text">For internal usage only</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.transactionStarted">
            <summary>
            Reports the overloaded class that a transaction has been started.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.transactionCancelled">
            <summary>
            Reports the overloaded class that a transaction has been canceled.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.transactionCommitted">
            <summary>
            Reports the overloaded class that a transaction has been committed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.FlushAnnotations">
            <summary>
            Flushes all annotations stored for future adjustments (moving/aligning).
            Can be overridden by a derived paragraph type to flush contained elements.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.getExternalWidth">
            <summary>
            Returns the total width required for padding, margin, borders and indentation.
            </summary>
            <returns>The space required for padding, margin, borders and indentation.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.AnnotationList">
            <summary>
            Get the annotations for this paragraph (generated in generate step)
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventHandler">
            <summary>
             Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintParagraph"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.PrintRowEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.RowCollection.PrintRow"/> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Row">
            <summary>
            A row is part of a table. A row consists of a list of cells.
            </summary>
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection" />
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection" />
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" />
            <seealso cref="T:TallComponents.PDF.Layout.Border" />
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Row.#ctor">
            <summary>
            Initialize a new instance of the row class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Row.Cells">
            <summary>
            Get all cells in this row.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Row.DoNotBreak">
            <summary>
            Get or set if the row may break across pages.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Row.MinHeight">
            <summary>
            Get or set the minimum height of this row.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Row.AnnotationList">
            <summary>
            Get annotations in the cells
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Row.Clone">
            <summary>
            Clones a Row.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Row.FlushAnnotations">
            <summary>
            Flushes all annotations stored for future adjustments (moving/aligning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Row.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Implement this method in a derived class to generate content
            dynamically.
            </summary>
            <remarks>
            This method will be called just before PDF generation starts.
            It allows you to setup custom content in derived classes.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Table">
            <summary>
            Table paragraph to hold rows and cells of data.
            </summary>
            <remarks>
            The table class is a specialization of paragraph. All members of paragraph 
            are members of table as well. Like any paragraph, a table can be added to 
            any paragraph collection, e.g. section, table cell, header and footer. 
            A table is build of rows of cells. A cell contains a collection of paragraphs (possibly tables).
            <seealso cref="N:TallComponents.PDF.Layout.Paragraphs" />
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Table.Rows" />
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Row" />
            <seealso cref="T:TallComponents.PDF.Layout.Border" />
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Table.#ctor">
            <summary>
            Initialize a new instance of the Table class.
            </summary>
            <remarks>
            Creates a new, empty table.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.Rows">
            <summary>
            Get all rows of this table.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.ColumnDefinitions">
            <summary>
            Get the column definitions for this table.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.RepeatFirstRow">
            <summary>
            Get or set if the first row is repeated if the table is broken on pages.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.RepeatFirstRows">
            <summary>
            Get or set the number of rows repeated if the table is broken by page edges pages.
            </summary>
            <remarks>
            The rows repeated are the first rows from the table.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.PreferredWidth">
            <summary>
            Get or set the preferred width of the table.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.ForceWidth">
            <summary>
            Get or set if the table width may vary dependinding on content.
            </summary>
            <remarks>
            If false, the contained rows and cells determine the width of this table, otherwise, 
            the PreferredWidth property is used to set the width of the table.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Table.Clone">
            <summary>
            Clones a Table.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Table.FlushAnnotations">
            <summary>
            Flushes all annotations stored for future adjustments (moving/aligning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Table.updateDynamicContent(TallComponents.PDF.Layout.Document)">
            <summary>
            Calls the compose method of the paragraph.
            </summary>
            <remarks>
            Ensures the updateDynamicContent method of the included 
            RowCollection is called as well.
            </remarks>
            <param name="doc">The document currently generated.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.ConversionSettings">
            <summary>
            This class contains several settings for the HTML or XHTML to PDF conversion.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.#ctor">
            <summary>
            The default constructor initiates a default ConversionSettings object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.BasePath">
            <summary>
            Absolute or virtual path to the folder containing loadable objects (images, CSS, ...) (default = empty)
            </summary>
            <remarks>
            If the base path is empty the path info from Path property will be used.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.FontPath">
            <summary>
            Absolute or virtual path to the folder containing fonts. Leave empty to use the systems font folder. (default = empty)
            </summary>
            <remarks>
            The system font folder may not be accessible during web requests if the anonymous user (IUSR_xxxx)
            does not have read access to this folder. Clone the required fonts into a different folder
            within the website instead.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.Credentials">
            <summary>
            The credentials used to supply to a password protected web-site. (default null)
            </summary>
            <remarks>
            These credentials are supplied to the default resource loader only, if
            you create a custom resource loaded, you should take care of this yourself 
            in the custom version.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.CustomResourceLoader">
            <summary>
            An optional resource loader which has the first opportunity to retrieve additional files. (default null)
            </summary>
            <remarks>
            If LoadResource returns null/nothing the default resource loader will be used as second change.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.EnableLinks">
            <summary>
            Convert the link elements (A with href) from the Xhtml into PDF links. (default = true)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.EnableTooltips">
            <summary>
            Convert Tooltip elements from the Xhtml into PDF. (default = true)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.EnableForms">
            <summary>
            Convert the Form elements from the Xhtml into PDF fields. (default = true)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.ExecuteJavaScript">
            <summary>
            Constant, set to false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.StyleSheets">
            <summary>
            The user style sheets that will be applied by the agent.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.UseDtd">
            <summary>
            Whether the DTD specified by the content-type should be loaded and used. (default = false)
            </summary>
            <remarks>
            Setting this property to true can result in output improvements, however will result is performance loss.
            Setting to true raises an exception when no content type is defined and entity names must be resolved.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.ContentFitBehavior">
            <summary>
            The behavior the content fit. (default = ScaleToWidth)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.FixedWidth">
            <summary>
            The fixed width this conversion use. (default 1000)
            </summary>
            <remarks>
            Applicable when ContentFitBehavior.FixedWidth only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.TextEncoding">
            <summary>
            This enum specifies if and howto the HTML content (text property only) should be decoded before processed. (default is None)
            </summary>
            <remarks>
            This is needed if you want to include non wellformed HTML or wellformed HTML with a CDATA section into XML. 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.ConversionSettings.FontEmbedMode">
            <summary>
            This enum specifies if and how to embed TrueType fonts
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet">
            <summary>
            Holds the style sheet definition.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.#ctor">
            <summary>
            Creates a new CssStyleSheet.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.#ctor(System.String)">
            <summary>
            Creates a new CssStyleSheet.
            </summary>
            <param name="path">The (relative) (web)path to the stylesheet to load.</param>
            <remarks>
            This 'wrapper' tries to resolve the location of the stylesheet by checking various 
            types. The first matching is evaluated:
            <para>- path is a complete url</para>
            <para>- path is a local file (relative to current working folder)</para>
            <para>- the application is running in a web context: the web path is resolved locally.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.#ctor(System.String,System.String)">
            <summary>
            Creates a new CssStyleSheet.
            </summary>
            <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various 
            types. The first matching is evaluated:
            <para>- path is already a complete url</para>
            <para>- basepath is a url, appends the stylesheetName</para>
            <para>- path is a local file (relative to current working folder)</para>
            <para>- path is a local file (relative to given basepath)</para>
            <para>- the application is running in a web context: the web path is resolved locally.</para>
            </remarks>
            <param name="path">The (relative) (web)path to the stylesheet to load.</param>
            <param name="basePath">Base path for loading path and included style sheets.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.#ctor(System.IO.Stream)">
            <summary>
            Creates a new CssStyleSheet.
            </summary>
            <param name="stream">The stream that holds the stylesheet to load.</param>
            <remarks>
            You should close/dispose the given stream, it can be done after this call is returned.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates a new CssStyleSheet.
            </summary>
            <param name="stream">The stream that holds the stylesheet to load.</param>
            <param name="basePath">Base path for loading included style sheets.</param>
            <remarks>
            You should close/dispose the given stream, it can be done after this call is returned.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.Read(System.Xml.XmlReader)">
            <summary>
            Read the stylesheet from XML.
            </summary>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.Parse(System.String)">
            <summary>
            Used by XML processor to load a css style sheet from a path.
            </summary>
            <param name="path">Path to load the stylesheet from.</param>
            <returns>The CssStyleSheet holding the loaded and parsed stylesheet.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.ApplyStyleSheetFromPath(System.String,System.String)">
            <summary>
            Process a batch of styles from a given location and apply them to the current stylesheet.
            </summary>
            <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various 
            types. The first matching is evaluated:
            <para>- path is already a complete url</para>
            <para>- basepath is a url, appends the path</para>
            <para>- path is a local file (relative to current working folder)</para>
            <para>- path is a local file (relative to given basepath)</para>
            <para>- the application is running in a web context: the web paths are resolved locally.</para>
            </remarks>
            <param name="path">The (relative) (web)path to the stylesheet to load.</param>
            <param name="basePath">The base path to load the style sheet from.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.ApplyStyleSheet(System.String,System.String)">
            <summary>
            Process a batch of styles and apply them to the current stylesheet.
            </summary>
            <remarks>
            This is used for inline stylesheets, including support for importing 
            additional external stylesheets.
            </remarks>
            <param name="styleSheet">The CSS style declarations to apply.</param>
            <param name="basePath">Base path for loading included style sheets.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.BasePath">
            <summary>
            Base path for loading included style sheets.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.Text">
            <summary>
            Get or set the verbatim content of this CSS stylesheet.
            </summary>
            <remarks>You should not set this property to <see langword="null"/>.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.Clone">
            <summary>
            Clones a CssStyleSheet.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a CssStyleSheet
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection">
            <summary>
            Collection of CssStyleSheet objects.
            </summary>
            <remarks>
            You cannot instanciate the collection, it can be retrieved through the ConversionSettings.StyleSheets getter.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.#ctor">
            <summary>
            Initialize a new instance of the CssStyleSheetCollection class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.Add(TallComponents.PDF.Layout.Paragraphs.CssStyleSheet)">
            <summary>
            Add an existing CssStyleSheet to this collection.
            </summary>
            <remarks>
            Adds the provided CssStyleSheet to the collection.
            </remarks>
            <param name="styleSheet">CssStyleSheet to be added.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection)">
            <summary>
            Adds the elements of an CssStyleSheetCollection to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="styleSheets">The CssStyleSheetCollection whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.CssStyleSheet[])">
            <summary>
            Adds the elements of an array of cssStyleSheets to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="styleSheets">The array of styleSheets whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.Clear">
            <summary>
            Removes all style sheets from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.Contains(TallComponents.PDF.Layout.Paragraphs.CssStyleSheet)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet">CssStyleSheet</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection">CssStyleSheetCollection</see>.
            </summary>
            <param name="styleSheet">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet"/> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="styleSheet"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="styleSheet"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.CssStyleSheet)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet">CssStyleSheet</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection">CssStyleSheetCollection</see>.
            </summary>
            <param name="styleSheet">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.CssStyleSheet)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet"/> should be inserted.</param>
            <param name="styleSheet">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet"/> to be insert.</param>
            <remarks>
            The <paramref name="styleSheet"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="styleSheet"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.Remove(TallComponents.PDF.Layout.Paragraphs.CssStyleSheet)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet">CssStyleSheet</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection">CssStyleSheetCollection</see>.
            </summary>
            <param name="styleSheet">The CssStyleSheet to remove.</param>
            <remarks>
            The <paramref name="styleSheet"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="styleSheet"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet">CssStyleSheet</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection">CssStyleSheetCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CssStyleSheet"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.Count">
            <summary>
            Number of CssStyleSheet objects in this collecion.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.Item(System.Int32)">
            <summary>
            Get the CssStyleSheet by 0-based index.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.CssStyleSheetCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.PdfWidthHelper">
            <summary>
            Width helper for PDF.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.PdfWidthHelper.CalculateUsedWidth(TallComponents.PDF.Layout.Shapes.ShapeCollection)">
            <summary>
            Calculate the used width based on the inner shapes.
            </summary>
            <param name="shapes">The parent shape collection.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.ScaleBehavior">
            <summary>
            This enum specifies the behavior of the page's scaling.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.ScaleBehavior.DoNotScale">
            <summary>
            In this mode the content width will be exact the same as specified by the section/area, it will be the PageSize minus the left and right margin.
            <para>
            No scale will be applied by the engine, the content can be flowed over multiple pages.
            </para>
            <para>
            Notice: 96 pixels correspond to 72 points = 96 DPI.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.ScaleBehavior.SpecifyWidth">
            <summary>
            In this mode the content width will be those which is specified by the FixedWidth property (default 1000).
            <para>
            The content can be flowed over multiple pages.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.ScaleBehavior.ScaleToWidth">
            <summary>
            In this mode the engine will automatically add a scale, so that the width of the HTML page will fit in the available content width. (this is the default setting)
            <para>
            The content can be flowed over multiple pages.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.ScaleBehavior.ScaleToSinglePage">
            <summary>
            In this mode the engine will add a scale so that the complete HTML will fit in both the width and the height of the available content.
            <para>
            The content can be very small in large HTML documents.
            </para>
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.TextEncoding">
            <summary>
            This enum specifies if and howto the HTML content (text property only) should be decoded before processed.
            </summary>
            <remarks>
            This is needed if you want to include non wellformed HTML or wellformed HTML with a CDATA section into XML. 
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.TextEncoding.None">
            <summary>
            The HTML content (text property only) will not be processed. (default)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.TextEncoding.Base64">
            <summary>
            The HTML content (text property only) will be base64 decoded, before other processing will be done.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Paragraphs.TextEncoding.Html">
            <summary>
            The HTML content (text property only) will be HTML decoded, before other processing will be done.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph">
            <summary>
            Renders HTML content as PDF.
            </summary>
            <remarks>
            DISCLAIMER: XhtmlPargraph tries its best to convert any XHTML to PDF. 
            The output may not be identical to that of a major browser. 
            It is recommended to use XhtmlParagraph in a controlled environment where the features used by your XHTML documents can be tested before being used. 
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.#ctor">
            <summary>
            Create a new empty XhtmlParagraph.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.#ctor(System.IO.Stream)">
            <summary>
            Create a new XhtmlParagraph from an existing HTML document.
            </summary>
            <param name="stream">The XHTML stream to import.</param>
            <remarks>
            After this constructor is executed the stream may be closed.
            Closing/Disposing the stream is the responsability from the client (caller).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.#ctor(System.String)">
            <summary>
            Create a new XhtmlParagraph from a string containing XHTML.
            </summary>
            <param name="xhtml">The XHTML content to include.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.GetMaxWidth(System.Double,System.Double)">
            <summary>
            Return the maximum width used by this Paragraph.
            </summary>
            <param name="maxMaxWidth">The maximun width this call should return.</param>
            <param name="externalWidth">The space required for padding, margin, borders and indentation.</param>
            <remarks>
            This information is used to calculate the optimal cell width for tables.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.GetMinWidth(System.Double)">
            <summary>
            Return the minimum width used by this Paragraph.
            </summary>
            <param name="externalWidth">The space required for padding, margin, borders and indentation.</param>
            <remarks>
            This information is used to calculate the fit-to-content cell width for tables.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.TransactionStarted">
            <summary>
            Reports this class that a transaction has been started.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.TransactionCancelled">
            <summary>
            Reports this class that a transaction has been cancelled.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.TransactionCommitted">
            <summary>
            Reports this class that a transaction has been committed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Render(TallComponents.PDF.Layout.Document,TallComponents.PDF.Layout.Shapes.ShapeCollection)">
            <summary>
            Render on the given ShapeCollection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Path">
            <summary>
            Get or set the absolute, relative or virtual path of the XHTML-document. (default = <see langword="null"/>)
            </summary>
            <remarks>
            The content of the file will be used to convert into PDF.
            <para>It is not allowed to set both the <see cref="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Path">Path</see> property as well 
            as the <see cref="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Text">Text</see> property.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Text">
            <summary>
            Get or set the XHTML content as string. (default = <see langword="null"/>)
            </summary>
            <remarks>
            The content of the text will be used to convert into PDF.
            <para>It is not allowed to set both the <see cref="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Path">Path</see> property as well 
            as the <see cref="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Text">Text</see> property.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Settings">
            <summary>
            Optional settings for the Web to PDF conversion. (default = <see langword="null"/>)
            </summary>
            <remarks>
            <see langword="null"/> means all default, see <see cref="T:TallComponents.PDF.Layout.Paragraphs.ConversionSettings">ConversionSettings</see> for details.  
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Messages">
            <summary>
            Informational messages collected during the conversion.
            </summary>
            <remarks>
            <para>This property is valid after the document is written.</para>
            You can expect info like css files/images which cannot be retrieved and
            invalid css properties.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.getBasePath">
            <summary>
            Determines the base path depending on the value of some properties.
            </summary>
            <remarks>
            <para>If the BasePath property has been set, this value is returned.</para>
            <para>If the Path property has been set the path-part will be used (stripped till the last / or \\).</para>
            Else an empty base path is returned.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.RenderResult">
            <summary>
            The render result for this cycle.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.RenderResult.UsedWidth">
            <summary>
            The used width by this render cycle.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.RenderResult.UsedHeight">
            <summary>
            The used height by this render cycle.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.RenderResult.MoreContent">
            <summary>
            If there comes more content.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.RenderResult.PageBreak">
            <summary>
            Force a page-break, before continue with the next part.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.CheckTextShapes(TallComponents.PDF.Layout.Shapes.Shape)">
            <summary>
            Looks for Text shapes and checks if it's inside of page box.
            </summary>
            <param name="shape"></param>
            <returns>True if the Text shape is inside page box, false otherwise.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.TextParagraph">
            <summary>
            The textparagraph holds text data to be flowed on the page.
            </summary>
            <remarks>
            The text paragraph is a specialization of the paragraph class.
            The text paragraph represents a block of text than spans 1 or more 
            lines. The text is stored in 1 or more fragments.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TextParagraph.#ctor">
            <summary>
            Initialize a new instance of the TextParagraph class.
            </summary>
            <remarks>
            Creates a new, empty text paragraph with default properties.
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.Fragments" />
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Paragraphs.TextParagraph.LineBreak">
            <summary>
            Will be fired when a word has to be broken on a line end.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.TabStops">
            <summary>
            Allows you to define points to jump to when a tab character is encountered.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.Justified">
            <summary>
            Get or set if the text is justified.
            </summary>
            <remarks>
            When a text paragraph is justified, the white space between all words (if any) will 
            be manipulated so that all space between the left and right margin of the 
            page is used. The last line is never justified.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.RtfMode">
            <summary>
            Get or set if the text must use Rtf specific whitespace rules, like justification.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.HangIndentation">
            <summary>
            Get or set the amount of extra LeftIndentation applied to all but the first line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.FirstLineIndentation">
            <summary>
            Get or set the amount of extra LeftIndentation applied to the first line only.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.LineSpacing">
            <summary>
            Get or set the extra amount of white space between lines.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.FlowDirection">
            <summary>
            Get or set the flow direction of text elements (fragments).
            </summary>
            <remarks>
            The fragments contained can have a different read direction to allow
            left-to-right reading elements (numbers) in right to left text.
            The text flow direction on a paragraph is the default flow direction for 
            contained fragments.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.Fragments">
            <summary>
            Collection of fragment objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TextParagraph.Clone">
            <summary>
            Clones a TextParagraph.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.TextParagraph.updateDynamicContent(TallComponents.PDF.Layout.Document)">
            <summary>
            Calls the compose method of the paragraph.
            </summary>
            <remarks>
            Ensures the updateDynamicContent method of the included 
            FragmentCollection is called as well.
            </remarks>
            <param name="doc">The document currently generated.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Paragraphs.Whitespace">
            <summary>
            The whitespace class is a specialization of paragraph. 
            </summary>
            <remarks>
            All members of paragraph 
            are members of whitespace as well. Like any paragraph, a whitespace can be added to any 
            paragraph collection, e.g.
            section, table cell, header and footer. The whitespace class has height only.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Whitespace.#ctor">
            <summary>
            Create a new whitespace with height 0.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Paragraphs.Whitespace.#ctor(System.Double)">
            <summary>
            Create a new whitespace with given wheight.
            </summary>
            <param name="height">Height in points.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Paragraphs.Whitespace.Height">
            <summary>
            Height in points.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.HorizontalAlignment">
            <summary>
            Horizontal alignment of text lines.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.HorizontalAlignment.Left">
            <summary>
            Left aligned
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.HorizontalAlignment.Center">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.HorizontalAlignment.Right">
            <summary>
            Right aligned
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.PageBoundary">
            <summary>
            The box which should be used as outline for the page.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageBoundary.Default">
            <summary>
            The dimensions of the intersection of the media box and the crop box. 
            If the crop box is not present, the visible box is set to the media box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageBoundary.MediaBox">
            <summary>
            The boundaries of the physical medium on which the page is intended to be displayed or printed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageBoundary.CropBox">
            <summary>
            The visible region. When the page is displayed or printed, its contents are to be clipped (cropped).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageBoundary.BleedBox">
            <summary>
            The region to which the contents of the page should be clipped when output in a production environment.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageBoundary.TrimBox">
            <summary>
            The intended dimensions of the finished page after trimming.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageBoundary.ArtBox">
            <summary>
            The extent of the page’s meaningful content (including potential white space) as intended by the page’s creator.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.PageOrientation">
            <summary>
            Orientations used by the Section to rotate the page in the viewer.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageOrientation.Rotate0">
            <summary>
            No rotation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageOrientation.Rotate90">
            <summary>
            90 degrees rotation, counter-clockwise.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageOrientation.Rotate180">
            <summary>
            180 degrees rotation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.PageOrientation.Rotate270">
            <summary>
            270 degrees rotation, counter-clockwise.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.ReadDirection">
            <summary>
            Different read directions for text.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.ReadDirection.LeftToRight">
            <summary>
            Text is read from left to right.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.ReadDirection.RightToLeft">
            <summary>
            Text is read from right to left (e.g. Arabic).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.VerticalAlignment">
            <summary>
            Vertical alignment of text lines.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.VerticalAlignment.Top">
            <summary>
            Top aligned
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.VerticalAlignment.Middle">
            <summary>
            Middle aligned
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.VerticalAlignment.Bottom">
            <summary>
            Bottom aligned
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.PdfException">
            <summary>
            Base class for all exceptions thrown from TallComponents components.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.PdfException.Create(TallComponents.PDF.Base.PdfException)">
            <summary>
            Class factory. Generates a generic TallComponents.PDF.Exception or a specialized 
            instance if available.
            </summary>
            <param name="baseException"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.PdfException.CreateUnsupportedException(System.String)">
            <summary>
            Class factory. Generates a System.Exception
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.PdfException.Source">
            <summary>
            Get or set the name of the application or the object that causes the error.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PdfException.StackTrace">
            <summary>
            Get a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.InvalidImageException">
            <summary>
            The exception that is thrown when an invalid or corrupt image is encountered.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.InvalidPdfException">
            <summary>
            The exception that is thrown when the PDF document is invalid.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.NoPagesException">
            <summary>
            The exception that is thrown when a document without any page is written.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.TextFlowException">
            <summary>
            The exception that is thrown when a text flow constraint cannot be satisfied.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.TextFlowException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:TallComponents.PDF.Layout.UnsupportedImageException">
            <summary>
            Thrown when an image is encountered that is not supported.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.UnsupportedImageException.#ctor(System.String)">
            <summary>
            Construct a new UnsupportedImageFormatException with a message.
            </summary>
            <param name="message">A descriptive message for this exception</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.UnsupportedImageException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a new UnsupportedImageFormatException with a message and an inner exception.
            </summary>
            <param name="message">A descriptive message for this exception</param>
            <param name="innerEx">The exception that caused this exception.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.UnsupportedPdfException">
            <summary>
            The exception that is thrown when the PDF document is not supported.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.WrongPasswordException">
            <summary>
            The exception that is thrown when a wrong password is specified or no password is specified where it is required.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.CharStringListener.ResetMoveFlag">
            <summary>
            Resets the move flag.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Fonts.EmbedMode">
            <summary>
            The different ways that a font can be stored inside a PDF.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.EmbedMode.Auto">
            <summary>
            The embed mode will be determined based on how the font is used. If the font is used to render static
            text only, then the subset will be embedded. If the font is associated with an editable field, then
            the full font will be embedded. This is the default embed mode of a newly created 
            TrueType font.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.EmbedMode.Unknown">
            <summary>
            The font embed mode could not be determined.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.EmbedMode.ReferenceOnly">
            <summary>
            The font is not embedded. Only a reference is stored inside the PDF.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.EmbedMode.Subset">
            <summary>
            A subset of the font is embdedded inside the PDF.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.EmbedMode.Full">
            <summary>
            The font is fully embedded inside the PDF.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Fonts.Font">
            <summary>
            A font is used to typeset text. 
            </summary>
            <remarks>
            There are 14 standard fonts available in PDF or you can load a TrueType font (Professional edition only).
            <example>
            C#
            <code>
            // Internal fonts
            myFragment.Font = Font.Helvetica;
              
            // TrueType fonts
            Font arialBold = Font.TrueType( @"c:\windows\fonts\ARIALBD.TTF" );
            myFragment.Font = arialBold;
            
            // TrueType fonts can also be constructed through the Path property
            Font arialBold = new Font();
            arialBold.Path = @"c:\windows\fonts\ARIALBD.TTF";
            myFragment.Font = arialBold;
            </code>
            XML
            <code><![CDATA[
            <paragraph type="textparagraph">
              <fragment font="Helvetica">Helvetica is a built-in PDF Font.</fragment>
              <fragment font="c:\windows\fonts\ARIALBD.TTF">Arial is a TrueType Font.</fragment>
            </paragraph>]]>
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.#ctor">
            <summary>
            Creates a new font object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.LicensingRights">
            <summary>
            Font licensing rights.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.EmbedMode">
            <summary>
            How the font is stored inside the PDF.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.CreatePaths(System.Char,System.Double)">
            <summary>
            Return the glyph for the given Unicode chararacter as a FreeHandPathCollection.
            </summary>
            <param name="character"></param>
            <param name="fontSize"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Path">
            <summary>
            The path of the TrueType file of this font. 
            </summary>
            <remarks>
            Note that this functionality is available in the Professional edition only.
            <para>When using TrueType collection fonts, you can specify the name of the font like this: <code>"c:\windows\fonts\myfont.ttf?MyFontBold"</code>
            Within a web application a relative path will be mapped relative to the web application root using MapPath.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.AddToSubset(System.Char[])">
            <summary>
            Add characters to the embedded subset.
            </summary>
            <param name="subset">Add these characters to the subset.</param>
            <remarks>
            <para>It is only valid to call this method if the EmbedMode of this font is Subset.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.GetWidth(System.String)">
            <summary>
            Width of a piece of text, which is calculated by means of glyph drawing and getting its boundary box. 
            Divide by 1000 and multiply by font size to get size in points
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.Contains(System.Char)">
            <summary>
            Check whether this font contains the given character.
            </summary>
            <remarks>
            It is only usefull to call this method with newly created fonts, for existing fonts false (meaning: don't know) is returned.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.SubscriptScale">
            <summary>
            The subscript scale of this font. Multiply with the font size to get the subscript font size.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.SuperscriptScale">
            <summary>
            The superscript scale of this font. Multiply with the font size to get the superscript font size.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.SubscriptOffset">
            <summary>
            The subscript offset is the distance in points between the lower extreme of a font and the 
            lower extreme where to place subscript text for a font of size 1 pt.  
            Multiply with the font size to get the offset in points.
            </summary>
            <remarks>This property can be used to vertically align multiple TextShape instances with subscript text.</remarks>
            <seealso cref="P:TallComponents.PDF.Layout.Fonts.Font.SubscriptScale"/>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.SuperscriptOffset">
            <summary>
            The superscript offset is the distance in points between the lower extreme of a font and the 
            lower extreme where to place superscript text for a font of size 1 pt. 
            Multiply with the font size to get the offset in points.
            </summary>
            <remarks>This property can be used to vertically align multiple TextShape instances with superscript text.</remarks>
            <seealso cref="P:TallComponents.PDF.Layout.Fonts.Font.SuperscriptScale"/>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.FontHeight">
            <summary>
            Height of the font. Divide by 1000 and multiply by font size to get size in points
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Height">
            <summary>
            The height of this font at a font size of 1 pt. Multiply the height with the font size to
            get the height in points.
            </summary>
            <remarks>
            This is the height specified by the bounding box. 
            This height is used as line spacing.
            <para>
            For TrueType this value is : YMax - YMin (notice that YMin is negative).
            </para>
            </remarks>
            <returns>Height of this font at 1 pt.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.BaselineOffset">
            <summary>
            The distance in points between the lower extreme of a font and the visual baseline  for a font of size 1 pt. 
            Multiply the value of this property with the font size to get the distance in points.
            </summary>
            <remarks>This property can be used to vertically align multiple TextShape instances with different heights. 
            <para>
            For TrueType this value is : - YMin (notice that YMin is most likely negative, so returning a positive value).
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.UnderlineOffset">
            <summary>
            The distance in points between the lower extreme of a font and the position of an underline for a font of size 1 pt. 
            Multiply the value of this property with the font size to get the distance in points.
            </summary>
            <remarks>This property can be used to draw underlines.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.DecorationLineWidth">
            <summary>
            The width of decoration lines for a font with a size of 1 pt. 
            </summary>
            <remarks>
            Decoration lines are lines that are drawn to underline or strike-out text amongst others.
            Multiply the value of this property with the font size to get the line width in points.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.StrikeOutOffset">
            <summary>
            The distance in points between the lower extreme of a font and the position of a strikethrough for a font of size 1 pt. 
            Multiply the value of this property with the font size to get the distance in points.
            </summary>
            <remarks>This property can be used to draw strikethroughs.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.XHeight">
            <summary>
            The height of the small letter x this font at a font size of 1 pt. Multiply the x-height with the font size to
            get the x-height in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Ascender">
            <summary>
            The ascender of this font at a font size of 1 pt. Multiply the ascender with the font size to
            get the ascender in points. 
            </summary>
            <remarks>
            For roman font programs: typically the y-value of the top of the lowercase d. 
            <para>
            If this font program contains no ascender double.NaN is returned.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Descender">
            <summary>
            The descender of this font at a font size of 1 pt. Multiply the descender with the font size to
            get the descender in points.
            </summary>
            <remarks>
            For roman font programs: typically the y-value of the bottom of the lowercase p. 
            <para>
            If this font program contains no decender double.NaN is returned.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.LineGap">
            <summary>
            The height of the line gap specified inside this font at a font size of 1 pt. Multiply the line gap with the font size to
            get the line gap in points.
            </summary>
            <remarks>
            If this font program contains no line gap information double.NaN is returned.
            </remarks> 
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Weight">
            <summary>
            The Weight this font has by design [100...900]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Bold">
            <summary>
            Whether this font is bold by design.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Italic">
            <summary>
            Whether this font is italic by design.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.ItalicAngle">
            <summary>
            The italic angle the font designer has assigned to this font (counter-clockwise from vertical).
            </summary>
            <remarks>
            Most likely useful only if Italic is true. 
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.CalculateHeight(System.String,System.Double,System.Double)">
            <summary>
            Calculate the height of the given text in points
            </summary>
            <param name="text">The text that the height will be calculated of.</param>
            <param name="fontSize">The font size.</param>
            <param name="textWidth">The maximum width of the text.</param>
            <returns>The height in points.</returns>
            <remarks>
            The the text will be wrapped so that it fits in the specified width.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.CalculateWidth(System.String,System.Double)">
            <summary>
            Calculate the width of given text in points.
            </summary>
            <param name="text">The text that the height will be calculated of.</param>
            <param name="fontSize">The font size.</param>
            <returns>Width in points.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.CalculateLength(System.String)">
            <summary>
            Calculate the length of given text. Multiply the result with the font size to
            get the length in points.
            </summary>
            <param name="text">Calculate the length of this text.</param>
            <returns>Length in points. Multiply this with the font size to
            get the length in points.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.Parse(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="path">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.TrueType(System.String)">
            <summary>
            Get a TrueType font from file.
            </summary>
            <param name="path">Relative or absolute path to TrueType file.</param>
            <returns></returns>
            <remarks>To specifiy a TrueType font in XML use the font attribute and assign a value equal to the TrueType path.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.TrueType(System.IO.Stream)">
            <summary>
            Get a TrueType font from a stream. 
            </summary>
            <remarks>
            <para>The <paramref name="stream"/> may be closed when the constructor completes.
            It is the responsibility of the client to close the stream.</para>
            Note that this functionality is available in the Professional edition only.
            </remarks>
            <param name="stream">Stream containing TrueType font data.</param>
            <returns>The created font.</returns>
            <remarks>To specifiy a TrueType font in XML use the font attribute and assign a value equal to the TrueType path.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.TrueType(System.String,System.String)">
            <summary>
            Get a TrueType font from a TrueType collection (.TTC) file.
            </summary>
            <param name="path">Relative or absolute path to TrueType collection file.</param>
            <param name="fontName">Name (case-insensitive) of the TrueType font inside the collection.</param>
            <returns></returns>
            <remarks>To specifiy a TrueType font in XML use the font attribute and assign a value equal to the concatenation of the TrueType collection path and the font name, separated by a question mark.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.TrueType(System.IO.Stream,System.String)">
            <summary>
            Get a TrueType font from a TrueType collection stream. 
            </summary>
            <param name="stream">Stream containing TrueType collection font data.</param>
            <param name="fontName">Name (case-insensitive) of the TrueType font inside the collection.</param>
            <returns>The created font.</returns>
            <remarks>
            To specifiy a TrueType font in XML use the font attribute and assign a value equal to the concatenation 
            of the TrueType collection path and the font name, separated by a question mark.
            <para>The <paramref name="stream"/> may be closed when the constructor completes.
            It is the responsibility of the client to close the stream.</para>
            Note that this functionality is available in the Professional edition only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Name">
            <summary>
            The name of the font.
            </summary>
            <remarks>
            Returns <see langword="null"/> if no name can be found.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.FamilyName">
            <summary>
            The family name of the font.
            </summary>
            <remarks>
            Returns <see langword="null"/> is no family name can be found.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.GetFont(System.String)">
            <summary>
            Used by the javascript dom to obtain a font with a particular name.
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.SaveFamilies(System.IO.Stream)">
            <summary>
            Save the font family collection. 
            </summary>
            <param name="stream">Save to this stream.</param>
            <remarks>
            You can use the saved stream to initialize the collection the next time.
            This will reduce the load-time.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.LoadFamilies(System.IO.Stream)">
            <summary>
            Load the font family collection. 
            </summary>
            <param name="stream">Save to this stream.</param>
            <remarks>
            You can use the stream saved by SaveFamilies to initialize the collection.
            This will reduce the load-time.
            <para>
            You must Load the file, before you call the static Create().
            </para>
            <para>
            If an exception is thrown the previous state is restored. 
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Helvetica">
            <summary>
            Get standard PDF font Helvetica.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.HelveticaBold">
            <summary>
            Get standard PDF font Helvetica bold.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.HelveticaOblique">
            <summary>
            Get standard PDF font Helvetica oblique.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.HelveticaBoldOblique">
            <summary>
            Get standard PDF font Helvetica bold oblique.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Courier">
            <summary>
            Get standard PDF font Courier.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.CourierBold">
            <summary>
            Get standard PDF font Courier bold.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.CourierOblique">
            <summary>
            Get standard PDF font Courier oblique.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.CourierBoldOblique">
            <summary>
            Get standard PDF font Courier bold oblique.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.TimesRoman">
            <summary>
            Get standard PDF font TimesRoman.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.TimesBold">
            <summary>
            Get standard PDF font TimesRoman bold.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.TimesItalic">
            <summary>
            Get standard PDF font TimesRoman italic.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.TimesBoldItalic">
            <summary>
            Get standard PDF font TimesRoman bold italic.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.Symbol">
            <summary>
            Get standard PDF font Symbol.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Fonts.Font.ZapfDingbats">
            <summary>
            Get standard PDF font ZapfDingbats.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.Font.GetTrueTypeFontNames(System.String)">
            <summary>
            Retrieve the names of all TrueType files inside a TrueType collection file.
            </summary>
            <param name="path">Relative, absolute or virtual path to TrueType collection (.TTC) file.</param>
            <returns>Array of TrueType font names. These names can be passed to the TrueType overload that creates a TrueType font from a TrueType collection file.</returns>
            <remarks>
            When this method is performed on a TTF file, an empty string array is returned.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Fonts.FontFamily">
            <summary>
            A FontFamily describes 4 fonts which belongs to the same family (aka that have a similar font face), the regular (normal), italic, bold and bold-italic font.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Fonts.FontFamilyCollection">
            <summary>
            A FontFamilyCollection holds multiple FontFamilies.
            	/// </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.FontFamilyCollection.GetFont(System.String,System.Boolean,System.Boolean)">
            <summary>
            Tries to find the first matching font in a comma seperated list.
            </summary>
            <remarks>Used by (x)HTML parser...</remarks>
            <param name="familyNameList">The list of font families to look for.</param>
            <param name="bold">True if a bold font needs to be resolved.</param>
            <param name="italic">True if a bold font needs to be resolved.</param>
            <returns>the font or null if none found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.FontFamilyCollection.GetFont(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Tries to find the first matching font in a comma seperated list.
            </summary>
            <remarks>Used by (x)HTML parser...</remarks>
            <param name="familyNameList">The list of font families to look for.</param>
            <param name="bold">True if a bold font needs to be resolved.</param>
            <param name="italic">True if a bold font needs to be resolved.</param>
            <param name="customFamiliesOnly">only search in the custom fonts, not the standard or windows fonts</param>
            <returns>the font or null if none found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.FontFamilyCollection.GetFontNamesInPath(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Gets the full pathname for all fonts in the specified folder
            </summary>
            <param name="fontPath">The path to search for fonts.</param>
            <param name="fontPaths">The collection to which the paths will be added.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.FontFamilyCollection.AddFromPathList(System.Collections.Specialized.StringCollection,System.Collections.Hashtable)">
            <summary>
            Adds the fonts in the list to the given familylist
            </summary>
            <param name="fontPaths">Array of strings holding the full paths to the fonts to be added.</param>
            <param name="families">the family group the fonts have to be added to.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.FontFamilyCollection.Save(System.IO.Stream)">
            <summary>
            Save the font family collection.
            </summary>
            <param name="stream">Save to this stream.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.FontFamilyCollection.Load(System.IO.Stream)">
            <summary>
            Load font family collection.
            </summary>
            <param name="stream">Load from this stream.</param>
            <remarks>
            If an exception is thrown the previous state is restored. 
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Fonts.FontLicensingRights">
            <summary>
            Font licensing rights.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.FontLicensingRights.Unknown">
            <summary>
            The font licensing rights could not be determined.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.FontLicensingRights.InstallableEmbedding">
            <summary>
            This setting indicates that the font may be embedded and permanently installed on the 
            remote system by an application. The user of the remote system acquires the identical rights, 
            obligations and licenses for that font as the original purchaser of the font, and is subject 
            to the same end-user license agreement, copyright, design patent, and/or trademark as was the 
            original purchaser.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.FontLicensingRights.RestrictedLicenseEmbedding">
            <summary>
            This setting indicates that the font must not be modified, embedded or exchanged in any manner 
            without first obtaining permission of the legal owner. Caution: For Restricted License embedding 
            to take effect, it must be the only level of embedding selected.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.FontLicensingRights.PreviewAndPrintEmbedding">
            <summary>
            This setting indicates that the font may be embedded, and temporarily loaded on the 
            remote system. Documents containing Preview &amp; Print fonts must be opened "read-only;" no edits 
            can be applied to the document. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.FontLicensingRights.EditableEmbedding">
            <summary>
            This setting indicates that the font may be embedded but must only be installed temporarily 
            on other systems. In contrast to Preview &amp; Print fonts, documents containing Editable fonts may be 
            opened for reading, editing is permitted, and changes may be saved. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.FontLicensingRights.NoSubsetting">
            <summary>
            This setting indicates that the font may not be subsetted prior to embedding. 
            Other embedding restrictions may also apply.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Fonts.FontLicensingRights.BitmapEmbeddingOnly">
            <summary>
            This setting indicates that only bitmaps contained in the font may be embedded. 
            No outline data may be embedded. If there are no bitmaps available in the font, 
            then the font is considered unembeddable and the embedding services will fail. 
            Other embedding restrictions may also apply. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Fonts.IFontCache">
            <summary>
            For internal usage only. 
            </summary>
            <remarks>
            Do not use this interface in your code
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.IFontCache.GetFont(System.String)">
            <summary>
            For internal usage only.
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Fonts.IFontCache.AddFont(System.String,TallComponents.PDF.Layout.Fonts.Font)">
            <summary>
            For internal usage only.
            </summary>
            <param name="fontName"></param>
            <param name="font"></param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Border">
            <summary>
            Specifies the border for objects.
            </summary>
            <remarks>
            A border is a rectangle that can be applied to a table,
            row and cell. The appearance of a border is defined by the four pens with which
            the left, right, top en bottom edges are drawn and the brush with which the
            background is filled. The size and position of a border is determined by the enclosed content.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Border.#ctor">
            <summary>
            Initialize a new instance of the Border class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double)">
            <summary>
            Initialize a new instance of the Border class with the given color and width.
            </summary>
            <remarks>
            Create a new border with given pen color and fractional width.
            </remarks>
            <param name="color">Color of pen.</param>
            <param name="width">Width of pen.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Brushes.Brush)">
            <summary>
            Initialize a new instance of the Border class with the given brush.
            </summary>
            <remarks>
            Create a new border with given background brush.
            </remarks>
            <param name="background">Background is painted with this brush.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double,TallComponents.PDF.Layout.Brushes.Brush)">
            <summary>
            Initialize a new instance of the Border class with the given color, width and brush.
            </summary>
            <remarks>
            Create a new border with given pen color and fractional width and background brush.
            </remarks>
            <param name="color">Color of pen.</param>
            <param name="width">Fractional width of pen.</param>
            <param name="background">Background is painted with this brush.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
            <summary>
            Initialize a new instance of the Border class with given pen and brush.
            </summary>
            <remarks>
            Create a new border with given pen and background brush.
            </remarks>
            <param name="pen">The pen that is used to draw the the edges. Must not be <see langword="null"/>.</param>
            <param name="background">Background is painted with this brush.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double,TallComponents.PDF.Layout.Pens.DashPattern,TallComponents.PDF.Layout.Brushes.Brush)">
            <summary>
            Initialize a new instance of the Border class with given color, width, patern and brush.
            </summary>
            <remarks>
            Create a new border with given pen color, fractional width, pattern and background brush.
            </remarks>
            <param name="color">Color of pen.</param>
            <param name="width">Width of pen, must be a valid, non-negative number.</param>
            <param name="pattern">Pattern of pen.</param>
            <param name="background">Background is painted with this brush.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when width is negative or invalid (NaN or Infinity).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when pattern is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Border.Left">
            <summary>
            Get or set the pen that is used to draw the left edge.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Border.Right">
            <summary>
            Get or set the pen that is used to draw the right edge.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Border.Top">
            <summary>
            Get or set the pen that is used to draw the top edge.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Border.Bottom">
            <summary>
            Get or set the pen that is used to draw the bottom edge.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Border.Background">
            <summary>
            Get or set the brush that is used to fill the background.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Border.CopyFrom(TallComponents.PDF.Layout.Border)">
            <summary>
            Copy the values for left, right, top and bottom and Background from another Border object.
            </summary>
            <param name="other">The object to copy values from.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Border.Clone">
            <summary>
            Clones a Bordered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Border.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Border
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Object">
            <summary>
            Base class of all objects that can be read from XML.
            </summary>
            <remarks>
            <see cref="T:TallComponents.PDF.Layout.Object"/> features most of the logic used to load
            object declarations from XML. You can use this feature in your own classes 
            by deriving from this class. 
            <para>Derived classes must have a public parameterless constructor, otherwise it cannot be instatiated.</para>
            <para>The XML processor can handle all public properties if:</para>
            <list type="bullet">
            <item>
            <description>of type System.String.</description>
            </item>
            <item>
            <description>that have a 'public static [type] Parse( string )' method
              (this includes many value-types such as double, bool, etc.</description>
            </item>
            <item>
            <description>that have public static get-properties that return 
              instances of that type.</description>
            </item>
            <item>
            <description>enumeration members</description>
            </item>
            </list>
            The attribute name should match (case-insensitive) the name of the public property.
            <see cref="T:TallComponents.PDF.Layout.Object"/> will use <see cref="M:TallComponents.PDF.Layout.Unit.Parse(System.String)">Unit.Parse</see> to process doubles.
            <para>Use the type attribute to specify derived classes using their fully qualified type name.</para>
            <para>To implement custom XML reading, create a class with a public parameterless constructor and
            add a <code>void Read(XmlReader)</code> method. The XML reader will invoke the Read method right
            after construction. Note that if you use this approach, you are completely on your own in processing the XML.
            Make sure that, when the method finishes processing the XML, the XmlReader is positioned at the first
            node after the end element.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.Read(System.Xml.XmlElement)">
            <summary>
            Read from XML element.
            </summary>
            <param name="element">The element that holds the data from which this layout object is read.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.Read(System.String)">
            <summary>
            Read from XML file.
            </summary>
            <param name="path">The path of the XML file that holds the data from which this layout object is read.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.Read(System.Xml.XmlReader)">
            <summary>
            Read from XML reader.
            </summary>
            <remarks>
            Override this method to implement custom XML reading. When called, the reader is positioned on the
            start element associated with the type. When the method finishes, the reader must be positioned
            on the first XML node after the end element (i.e. make sure you consume the end element).
            </remarks>
            <param name="reader">The XML reader that holds the data from which this layout object is read.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.readSimpleAggregate(System.Xml.XmlReader)">
            <summary>
            Read a simple aggregated value. A simple value is a single object that is not a collection.
            </summary>
            <param name="reader">The XmlReader to read from.</param>
            <returns>True if the value was succesfully read, false if the value was ignored.</returns>
            <remarks>
            Will throw an exception if the getter for the property returns <see langword="null"/> and a new instance of the class cannot be created.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.createNewInstance(System.Type)">
            <summary>
            Create a new instance of the specified type.
            </summary>
            <remarks>Requires a parameterless constructor.</remarks>
            <param name="elementType">The type to instanciate.</param>
            <returns>A new object.</returns>
            <exception cref="T:System.InvalidOperationException">Occures when the type could not be instanciated.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.createNewInstance(System.Type,System.Xml.XmlReader)">
            <summary>
            Create a new instance of the specified type.
            </summary>
            <remarks>Will try to use a static Read(XmlReader) method if reader != <see langword="null"/>.</remarks>
            <param name="elementType">The type to instanciate.</param>
            <param name="reader">The XmlReader to use or <see langword="null"/>.</param>
            <returns>A new object.</returns>
            <exception cref="T:System.InvalidOperationException">Occures when the type could not be instanciated.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.findReadMethod(System.Type)">
            <summary>
            Find a Read method that takes an XmlReader as an argument. 
            </summary>
            <remarks>
            The Read method may be internal or public.
            </remarks>
            <param name="instanceType"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.findCreateMethod(System.Type)">
            <summary>
            Find a static Create method that takes an XmlReader as an argument.
            </summary>
            <remarks>
            The method may be internal or public.
            </remarks>
            <param name="instanceType"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.getType(System.Xml.XmlReader)">
            <summary>
            Get the type for the current element.
            </summary>
            <param name="reader">An XmlReader positioned on an element.</param>
            <returns>The type of the element.</returns>
            <exception cref="T:System.InvalidOperationException">Occures when the reader is not positioned on an element.</exception>
            <exception cref="T:System.ArgumentException">Occures when the type could not be determined from the type attribute.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.getType(System.String,System.Type)">
            <summary>
            Determine a type from a name.
            </summary>
            <param name="typeName">The type name to look for.</param>
            <param name="containingType">The containign type or <see langword="null"/>.</param>
            <returns>A type or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.readDirectCollectionAggregate(System.Xml.XmlReader)">
            <summary>
            Try to add an aggregate to the object itself
            </summary>
            <param name="reader">An XmlReader to read from.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.readCollectionAggregate(System.Xml.XmlReader)">
            <summary>
            Try to add an aggregate to a collection property named type+s (shape-s, section-s etc.).
            </summary>
            <param name="reader">An XmlReader to read from.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.ProcessTextData(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Override in derived classes to implement custom processing of
            text inside an element. E.g. interpret base64 data.
            </summary>
            <param name="reader">The XmlReader to read from.</param>
            <param name="preserveWhitespace">Indicates whether whitespace must be kept.</param>
            <remarks>By default, text is processed in the same way as for html: whitespace is insignificant,
            unless explicitly marked as significant. Objects that support a preserveWhitespace attribute should
            at least override this method and pass the correct value.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.appendTextToProperty(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Append a string to a properties value.
            </summary>
            <remarks>
            Used to assign and concatenate multiple text nodes that resolve to a single property.
            </remarks>
            <param name="text">The string to append.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="preserveWhitespace">Whether whitespace must be preserved.</param>
            <param name="owner">The object that owns the property.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.appendTextToProperty(System.Reflection.PropertyInfo,System.String,System.Object,System.Boolean)">
            <summary>
            Append a string to a properties value.
            </summary>
            <remarks>
            Used to assign and concatenate multiple text nodes that resolve to a single property.
            </remarks>
            <param name="text">The string to append.</param>
            <param name="textProperty">the property.</param>
            <param name="preserveWhitespace">Whether whitespace must be preserved.</param>
            <param name="owner">The object that owns the property.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.assignTextToProperty(System.Reflection.PropertyInfo,System.String,System.Xml.XmlReader)">
            <summary>
            Assign a string to a property.
            </summary>
            <param name="property"></param>
            <param name="attributeValue"></param>
            <param name="reader"></param>
            <remarks>This method tries to convert the passed string into the type that is required by the the
            object property.</remarks>
            <exception cref="T:TallComponents.PDF.Layout.Xml.PropertyReadOnlyException">Occurs when the property is read only.</exception>
            <exception cref="T:TallComponents.PDF.Layout.Xml.EnumConstantNotFoundException">Occurs when an unknown enumeration value is encountered.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.GetStaticValue(System.Type,System.String)">
            <summary>
            Get a static property by it's name.
            </summary>
            <remarks>Only returns a result for static properties that are of the same type as they are declared on.</remarks>
            <param name="type">The type to query.</param>
            <param name="name">The name of the value, case insensitive.</param>
            <returns>The value of the static property or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.getValue(System.Type,System.String,System.Xml.XmlReader)">
            <summary>
            Process a string to get a value of the specified type.
            </summary>
            <param name="valueType">The expected value type.</param>
            <param name="value">The string to process.</param>
            <param name="reader"></param>
            <returns>An object of the specified type.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.readProperties(System.Type,System.Xml.XmlReader)">
            <summary>
            Reads all properties for a given type from XML into a HashTable.
            </summary>
            <remarks>Keys are strings, values are parsed objects.</remarks>
            <param name="type">The type to read the properties for.</param>
            <param name="reader">The XML reader.</param>
            <returns>A hastable of properties.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Object.ReadBase64Content(System.Xml.XmlReader)">
            <summary>
            Read Base64 encoded data into a stream.
            </summary>
            <param name="reader">The XmlReader to read from.</param>
            <returns>A stream containing decoded Base64 data or <see langword="null"/> if no data is found.</returns>
            <exception cref="T:System.FormatException">Occures when invalid Base64 data is found.</exception>
        </member>
        <member name="T:TallComponents.PDF.Layout.Spacing">
            <summary>
            Spacing is used to define Margin and Padding.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Spacing.#ctor">
            <summary>
            Initializes a new instance of the Spacing class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Spacing.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Spacing class with the given spacing.
            </summary>
            <param name="val">The spacing in points to be assigned to all sides.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Spacing.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Spacing class with the given spacing.
            </summary>
            <param name="top">The spacing in points to be assigned to the top.</param>
            <param name="left">The spacing in points to be assigned to the left.</param>
            <param name="right">The spacing in points to be assigned to the right.</param>
            <param name="bottom">The spacing in points to be assigned to the bottom.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Spacing.Left">
            <summary>
            Spacing on the left side
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Spacing.Right">
            <summary>
            Spacing on the right side
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Spacing.Top">
            <summary>
            Spacing above.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Spacing.Bottom">
            <summary>
            Spacing below.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Spacing.op_Implicit(System.Double)~TallComponents.PDF.Layout.Spacing">
            <summary>
            Set the Left, Right, Top and Bottom values to the same value.
            </summary>
            <param name="val">The value to assign.</param>
            <returns>A new Spacing instance.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Spacing.op_Implicit(TallComponents.PDF.Layout.Unit)~TallComponents.PDF.Layout.Spacing">
            <summary>
            Set the Left, Right, Top and Bottom values to the same value.
            </summary>
            <param name="val">The value to assign.</param>
            <returns>A new Spacing instance.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Spacing.Clone">
            <summary>
            Clones a Spacing.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Spacing.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Spacing.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Spacing.CopyFrom(TallComponents.PDF.Layout.Spacing)">
            <summary>
            Copy the values for left, right, top and bottom from another Spacing object.
            </summary>
            <remarks>Using this method is preferred above assigning the object.</remarks>
            <param name="other">The object to copy values from.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.XMLVisible">
            <summary>
            Attribute to specify whether a property is available in (TallPDF) XML or not.
            </summary>
            <remarks>Properties without this attribute are visible when they are public. This
            attribute can be used to either make internal properties visible in XML (see widget.FieldName),
            or to make public properties invisible in XML. See Widget.Field. This attribute must not
            be obfuscated, otherwise our XSD generation tool cannot find it.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.XMLVisible.#ctor(System.Boolean)">
            <summary>
            Initialize a new XMLVisible attribute.
            </summary>
            <param name="visible">Whether the attribute is visible.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.XMLVisible.Visible">
            <summary>
            Whether this property is visible.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Metadata.CustomXmpSchema">
            <summary>
            CustomXmpSchema that reads and writes custom properties.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.CustomXmpSchema.#ctor(TallComponents.PDF.Base.Metadata.Xmp.XmpPacket,System.String,System.String)">
            <summary>
            Create a new Custom XMP schema
            </summary>
            <param name="packet">The XMP packet to use.</param>
            <param name="prefix">The prefix for this schema.</param>
            <param name="namespaceUri">The namespace URI for the schema.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.CustomXmpSchema.Item(System.String)">
            <summary>
            Get or set a property in this schema.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.CustomXmpSchema.Clear">
            <summary>
            Remove all properties in this schema.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.CustomXmpSchema.Add(System.String,System.String)">
            <summary>
            Add a property to the schema.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.CustomXmpSchema.Prefix">
            <summary>
            The prefix for this schema.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.CustomXmpSchema.NamespaceUri">
            <summary>
            The namespace URI for this schema.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Metadata.MetadataSchema">
            <summary>
            Base class for Metadata schemas.
            </summary>
            <remarks>
            The XMP metadata cannot be specified from XML.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchema.Item(System.String)">
            <summary>
            Get or set data by name.
            </summary>
            <param name="name">The name of the value.</param>
            <returns>The <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataValue"/> associated with the given key, or <see langword="null"/> if not found.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/></exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchema.Add(System.String,System.String)">
            <summary>
            Add a simple value to the schema.
            </summary>
            <remarks>
            Currently only simple values are supported for XMP schemas. Collections such as Bag, Alt and Seq are not supported.
            <para>
            The XMP metadata cannot be specified from XML.
            </para>
            </remarks>
            <param name="name">The name of this value.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/></exception>
            <exception cref="T:System.ArgumentException">Thrown when a value with the same name is already set.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchema.Names">
            <summary>
            The names of all values in this metadata schema.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/></exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchema.Prefix">
            <summary>
            The prefix associated to the namespace uri.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/></exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchema.NamespaceUri">
            <summary>
            The namespace URI.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/></exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchema.Clear">
            <summary>
            Clear all the values from this schema.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection">
            <summary>
            The XMP Metadata Schema collection.
            </summary>
            <remarks>
            The XMP metadata cannot be specified from XML.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.#ctor">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection">MetadataSchemaCollection</see>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.#ctor(TallComponents.PDF.Base.Metadata.Xmp.XmpPacket)">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection">MetadataSchemaCollection</see>.
            </summary>
            <remarks>
            The XMP metadata cannot be specified from XML.
            </remarks>
            <param name="packet">The XmpPacket to work on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="packet"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Add(System.String,System.String)">
            <summary>
            Create and add a new MetadataSchema to this collection.
            </summary>
            <param name="prefix">The prefix of the new schema.</param>
            <param name="namespaceUri">The namespace URI of the new schema.</param>
            <returns>The new schema.</returns>
            <remarks>
            <para>A schema must have a unique prefix.</para>
            <para>
            The XMP metadata cannot be specified from XML.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Contains(System.String)">
            <summary>
            Determine whether the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> with gicen prefix is in the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/>.
            </summary>
            <param name="prefix">The <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> to look for.</param>
            <returns>True if the prefix is found in this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="prefix"/> does not accept <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="prefix"/> is <see langword="null"/>.</exception>
            <example>
            C#
            <code>
            Document doc = new Document();
            doc.Metadata.Create( "tc", "http://www.tallcomponents.com/xmp/schema/v1.0/" );
            bool found = doc.Metadata.<b>Contains</b>( "tc" ); //found = true
            found = doc.Metadata.<b>Contains</b>( "anotherPrefix" ); //found = false
            </code>
            VB.NET
            <code>
            Dim doc as Document = new Document()
            doc.Metadata.Create( "tc", "http://www.tallcomponents.com/xmp/schema/v1.0/" )
            Dim found as Boolean
            found = doc.Metadata.<b>Contains</b>( "tc" ) 'found = True
            found = doc.Metadata.<b>Contains</b>( "anotherPrefix" ) 'found = False
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Remove(System.String)">
            <summary>
            Remove a <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> from this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/>.
            </summary>
            <remarks>
            The schema is remove from the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/> and all properties are cleared.
            The <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> is no longer valid and cannot be used anymore.
            </remarks>
            <param name="prefix">The prefix of the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="prefix"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Item(System.String)">
            <summary>
            Retrieve an <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> by its prefix from the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/>s actually contained in the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection"/>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Clone">
            <summary>
            Clones a MetadataSchemaCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a MetadataSchemaCollection
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Metadata.MetadataString">
            <summary>
            A string value for a <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema">MetadataSchema</see>.
            </summary>
            <remarks>
            The XMP metadata cannot be specified from XML.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.MetadataString.Value">
            <summary>
            Gets or sets the value for a XMP Metadata entry.
            </summary>
            <remarks>
            The XMP metadata cannot be specified from XML.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Metadata.MetadataValue">
            <summary>
            Abstact base class for Metadata values
            </summary>
            <remarks>
            The XMP metadata cannot be specified from XML.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Metadata.MetadataValue.Create(TallComponents.PDF.Base.Metadata.Rdf.RdfNode)">
            <summary>
            Factory method.
            </summary>
            <param name="rdfValue"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Metadata.MetadataValue.RdfValue">
            <summary>
            The underlaying RDF value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Metadata.UnsupportedMetadataValue">
            <summary>
            A value for a <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema"/> that has an unupported type.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.HyphenatorResult">
            <summary>
            Returned by IHyphenator.GetNext.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.HyphenatorResult.text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.HyphenatorResult.width">
            <summary>
            The width in points needed to render the text.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.HyphenatorResult.forceLineBreakAfter">
            <summary>
            True if a new line should be started after the text is rendered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.HyphenatorResult.isWhiteSpace">
            <summary>
            True if it is white space.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.HyphenatorResult.jumpToNextTabStop">
            <summary>
            True if text is followed by a tab. Caller should append text and then jump to the next tab stop.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.HyphenatorResult.spaceCount">
            <summary>
            The number of spaces in the text.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.ITextWidthCalculator">
            <summary>
            For internal usage only. 
            </summary>
            <remarks>
            Do not use this interface in your code
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.ITextWidthCalculator.GetWidth(System.Char)">
            <summary>
            Calculate the width of a single character.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.ITextWidthCalculator.GetWidth(System.String)">
            <summary>
            Calculate the width of a string.
            </summary>
            <remarks>Also performs glyph substitution to compensate for ligatures.</remarks>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.ITextWidthCalculator.TabSize">
            <summary>
            The tab size expressed in spaces.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.PreserveWhiteSpaceHyphenator">
            <summary>
            Summary description for PreserverWhiteSpaceHyphenator.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.PreserveWhiteSpaceHyphenator.canNotBreak(System.Char,System.Char)">
            <summary>
            Checks if the line may be broken
            </summary>
            <param name="current">current character</param>
            <param name="last">previous character</param>
            <returns>false if either parameter is a whitespace, true if both are 'printable' characters</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.PreserveWhiteSpaceHyphenator.LineBreakContainer">
            <summary>
            The container that will handle line breaking
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.WhiteSpaceHyphenator.LineBreakContainer">
            <summary>
            The container that will handle word breaking
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.PageLayout">
            <summary>
            The page layout of the document in the PDF viewer.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageLayout.SinglePage">
            <summary>
            Display one page at a time.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageLayout.OneColumn">
            <summary>
            Display pages in one column.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageLayout.TwoColumnLeft">
            <summary>
            Display pages in 2 columns; odd page left.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageLayout.TwoColumnRight">
            <summary>
            Display pages in 2 column; odd page right.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.PageMode">
            <summary>
            The page mode of the document in the PDF viewer.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageMode.None">
            <summary>
            Display none.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageMode.Outlines">
            <summary>
            Display outlines (also known as bookmarks).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageMode.Thumbnails">
            <summary>
            Display thumbnails.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageMode.FullScreen">
            <summary>
            Display document fullscreen.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.ViewerPreferences">
            <summary>
            Settings used to control the way the document is displayed in a PDF viewer.
            </summary>
            <remarks>
            If no viewer preferences are set, the user defaults will be used.
            <para>You can override the user defaults for a document by assigning a new instance
            of this class to the <see cref="P:TallComponents.PDF.Layout.Document.ViewerPreferences"/> property.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.ViewerPreferences.#ctor">
            <summary>
            Creates a new ViewerPreferences object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.HideToolbar">
            <summary>
            Hide toolbar.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.HideMenubar">
            <summary>
            Hide menubar.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.HideWindowUI">
            <summary>
            Hides everything except the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.FitWindow">
            <summary>
            Fits the first page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.CenterWindow">
            <summary>
            Centers document window.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.DisplayDocTitle">
            <summary>
            Displays the document title in the caption bar.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.PageMode">
            <summary>
            Display none, outlines or thumbnails.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.PageLayout">
            <summary>
            How to display pages.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.ZoomFactor">
            <summary>
            The default zoom factor for this document (1 corresponds to 100%).
            </summary>
            <remarks>
            0 means that the current value is to be retained unchanged.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.ViewArea">
            <summary>
            The page boundary representing the area of the page to be displayed when viewing the document on the screen.
            </summary>
            <remarks>This entry is intended for prepress applications that manipulate page boundaries.
            Most consumer applications disregard it.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.ViewClip">
            <summary>
            The page boundary to which the contents of the page are to be clipped when viewing the document on the screen.
            </summary>
            <remarks>This entry is intended for prepress applications that manipulate page boundaries.
            Most consumer applications disregard it.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.PrintArea">
            <summary>
            The page boundary representing the area of the page to be rendered when printing the document.
            </summary>
            <remarks>This entry is intended for prepress applications that manipulate page boundaries.
            Most consumer applications disregard it.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.PrintClip">
            <summary>
            The page boundary to which the contents of the page are to be clipped when printing the document.
            </summary>
            <remarks>This entry is intended for prepress applications that manipulate page boundaries.
            Most consumer applications disregard it.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.Duplex">
            <summary>
            The paper handling option that shall be used when printing the file from the print dialog.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.PrintScaling">
            <summary>
            The page scaling option that shall be selected when a print dialog is displayed for this document.
            </summary>
            <remarks>Default value is AppDefault.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.PickTrayByPdfSize">
            <summary>
            A flag specifying whether the PDF page size shall be used to select the input paper tray.
            </summary>
            <remarks>
            This setting influences only the preset values used to populate the print dialog presented by a conforming reader.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.NumCopies">
            <summary>
            The number of copies that shall be printed when the print dialog is opened for this file.
            </summary>
            <remarks>
            Values outside this range shall be ignored. This property will store any integer specified,
            but Adobe Reader appears not to show values larger than 5 in its document properties
            panel.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.PrintPageRange">
            <summary>
            The page numbers used to initialize the print dialog box when the file is printed.
            </summary>
            <remarks><para>This value can be null.</para><para>If a range is specified outside
            the actual pages of the document that this method will store this range, but Adobe
            Reader may not show it in its document properties panel.</para>
            <para>The PDF reference manual
            erroneously states that the first page is denoted by 1. If you specify a range (0, 3) here, Adobe Reader will list
            it as (1 - 4) in its document properties panel.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.ReadDirection">
            <summary>
            The predominant reading order for the text in the document.
            </summary>
            <remarks>
            Default is LeftToRight.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.ViewerPreferences.Clone">
            <summary>
            Clones a ViewerPreferences.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.ViewerPreferences.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a ViewerPreferences.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.Duplex">
            <summary>
            The duplex setting print dialog is displayed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.Duplex.Simplex">
            <summary>
            Print single-sided.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.Duplex.DuplexFlipShortEdge">
            <summary>
            Duplex and flip on the short edge of the sheet.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.Duplex.DuplexFlipLongEdge">
            <summary>
            Duplex and flip on the long edge of the sheet.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.Duplex.Unspecified">
            <summary>
            Do not specify a duplex setting. 
            </summary>
            <remarks>
            It appears that the presence of this setting has unwanted side effects. E.g. if Duplex is set
            to Simplex, checking the 'print on both sides' option in the print dialog of the Adobe PDF reader
            is ignored. By setting Duplex to 'Unspecified', the corresponding entry will be absent in the 
            viewer preferences dictionary.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.PrintScaling">
            <summary>
            The print scaling option when a print dialog is displayed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PrintScaling.None">
            <summary>
            No scaling.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PrintScaling.AppDefault">
            <summary>
            Use the current print scaling of the application.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.Destination">
            <summary>
            Base class for classes that describe a location in a PDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.Destination.#ctor">
            <summary>
            Create a new Destination.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.Destination.Left">
            <summary>
            The horizontal position (measured from the left in points) of the page that is displayed at the left edge of the page window.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> values, see <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.Destination.Right">
            <summary>
            The horizontal position (measured from the left in points) of the page that is displayed at the right edge of the page window.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all PageDisplay values, see <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.Destination.Top">
            <summary>
            The vertical position (measured from the bottom in points) of the page that is displayed at the top edge of the page window.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all PageDisplay values, see <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.Destination.Bottom">
            <summary>
            The vertical position (measured from the bottom in points) of the page that is displayed at the bottom edge of the page window.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all PageDisplay values, see <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.Destination.ZoomFactor">
            <summary>
            The zoom factor to use when displaying the page. 1 means actual size; 2 means magnify twice.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all PageDisplay values, see <see cref="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay">
            <summary>
            Specifies how the page is displayed after the destination is resolved.
            </summary>
            <remarks>
            Default = PageDisplay.PositionZoom;
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.InternalPageDestination">
            <summary>
            Describes a location inside this PDF document. 
            </summary>
            <remarks>
            Allows to specify the pagenumber directly. This allows having references in 
            event driven generation mode.
            <para>NOTE: By setting an invalid page (e.g.: page 99 in a 3 page document)
            this will result in a broken link!</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.InternalPageDestination.#ctor">
            <summary>
            Create a new Internal Page Destination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.InternalPageDestination.#ctor(System.Int32)">
            <summary>
            Create a new InternalPageDestination.
            </summary>
            <param name="pageIndex">The zero-based index.</param>
            <remarks>
            WindowBehavior.UserPreference will be used.
            PageDisplay.FitEntire will be used. 
            <para>NOTE: There is no check that the page given is valid (existing)!</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.InternalPageDestination.PageIndex">
            <summary>
            The pageIndex this destination points to.
            <para>NOTE: There is no check that the page given is valid (existing)!</para>
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.IDestinationResolver">
            <summary>
            This interface is implemented by classes that resolve a Base.Object to a Destination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.IDestinationResolver.ResolveInternal(TallComponents.PDF.Base.Object)">
            <summary>
            Resolve an internal destination (Named destinations are resolved).
            </summary>
            <param name="destinationObject">The Base.Object tot resolve.</param>
            <returns>An InternalDestination.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.IDestinationResolver.ResolveNamedOrInternal(TallComponents.PDF.Base.Object)">
            <summary>
            Resolve a named or internal destination.
            </summary>
            <param name="destinationObject">The Base.Object tot resolve.</param>
            <returns>A Destination.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.IDestinationResolver.ResolveRemote(TallComponents.PDF.Base.Object)">
            <summary>
            Resolve a remote destination.
            </summary>
            <param name="destinationObject">The Base.Object tot resolve.</param>
            <returns>A RemoteDestination.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.InternalDestination">
            <summary>
            Describes a location inside a PDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.InternalDestination.#ctor">
            <summary>
            Create a new internal destination.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.PageDisplay">
            <summary>
            Different ways to specifiy how the page is displayed in the viewer.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.PositionZoom">
            <summary>
            The page is displayed with specified zoom and specified position.
            <para>
            The top and left positions and the zoom are specified by the Top, Left and Zoom properties of ExplicitDestination.
            </para>
            <para>
            The Right and Bottom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitEntire">
            <summary>
            Fit the entire page both horizontally and vertically.
            </summary>
            <para>
            The Left, Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitHorizontally">
            <summary>
            Fit the page horizontally.
            <para>
            The top position is specified by the Top property of ExplicitDestination.
            </para>
            <para>
            The Left, Right, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitVertically">
            <summary>
            Fit the page vertically.
            <para>
            The left position is specified by the Left property of ExplicitDestination.
            </para>
            <para>
            The Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitRectangle">
            <summary>
            Fit the specified rectangle. 
            <para>
            The rectangle is specified by the Left, Right, Top and Bottom properties of ExplicitDestination.
            </para>
            <para>
            The Zoom property of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitBoundingBox">
            <summary>
            Fit the bounding box of the page contents both horizontally and vertically.
            <para>
            The Left, Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitBoundingBoxHorizontally">
            <summary>
            Fit the bounding box of the page contents horizontally.
            <para>
            The top position is specified by the Top property of ExplicitDestination.
            </para>
            <para>
            The Left, Right, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitBoundingBoxVertically">
            <summary>
            Fit the bounding box of the page contents vertically.
            <para>
            The left position is specified by the Left property of ExplicitDestination.
            </para>
            <para>
            The Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.ParagraphDestination">
            <summary>
            Describes a location inside a PDF document.
            </summary>
            <remarks>
            The paragraph destination is used to construct <see cref="T:TallComponents.PDF.Layout.Actions.GoToAction">GoTo actions</see> that 
            jump to a location within the same document. Note that the exact location that the action jumps 
            to is determined by the <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph"/> that the destination references.
            Setting the position ( e.g. Left and Top ) has no effect.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.ParagraphDestination.#ctor">
            <summary>
            Create a new ParagraphDestination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.ParagraphDestination.#ctor(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
            <summary>
            Create a new ParagraphDestination that points to a <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph"/>.
            </summary>
            <param name="target">The target <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph"/>.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.ParagraphDestination.#ctor(System.String)">
            <summary>
            Create a new ParagraphDestination that points to a <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph"/> identified by it's unique <see cref="M:Paragraph.ID"/>.
            </summary>
            <param name="targetId">The <see cref="M:Paragraph.ID"/> of the target <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph"/>.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph">
            <summary>
            The <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph"/> that this destination points to.
            </summary>
            <remarks>
            Setting the target <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph"/> explicitly overrides the <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.ParagraphId"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.ParagraphId">
            <summary>
            The <see cref="M:Paragraph.ID"/> of the <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph"/> that this destination points to.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.RemoteDestination">
            <summary>
            Describes a location inside an other PDF document. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.RemoteDestination.#ctor">
            <summary>
            Create a new Remote Destination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.RemoteDestination.#ctor(System.String,System.Int32)">
            <summary>
            Create a new Remote Destination.
            </summary>
            <param name="path">The uniform resource locator (url) for this remote destination.</param>
            <param name="pageIndex">The zero-based index.</param>
            <remarks>
            WindowBehavior.UserPreference will be used.
            PageDisplay.FitEntire will be used.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Navigation.RemoteDestination.#ctor(System.String,System.Int32,TallComponents.PDF.Layout.Navigation.WindowBehavior)">
            <summary>
            Create a new Remote Destination.
            </summary>
            <param name="path">The uniform resource locator (url) for this remote destination.</param>
            <param name="pageIndex">The zero-based index.</param>
            <param name="windowBehavior">Whether to open the destination in a new windows, current one or specified by the user preferences.</param>
            <remarks>
            PageDisplay.FitEntire will be used.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.RemoteDestination.Path">
            <summary>
            The uniform resource locator (url) for this remote destination.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.RemoteDestination.PageIndex">
            <summary>
            The pageIndex this destination points to.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Navigation.RemoteDestination.WindowBehavior">
            <summary>
            Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Navigation.WindowBehavior">
            <summary>
             Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.WindowBehavior.NewWindow">
            <summary>
            Open in a new window.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.WindowBehavior.CurrentWindow">
            <summary>
            Open in the current window.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Navigation.WindowBehavior.UserPreference">
            <summary>
            Use the current user preference.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Pens.DashPattern">
            <summary>
            A pattern for a pen (e.g. solid, dotted, dashed, etc.).
            </summary>
            <remarks>
            A DashPattern is an array of numbers that specify alternating lengths of ink
            followed by no-ink. The array is applied repeatedly to draw the full length of
            the path to which the pattern is applied.
            </remarks>
            <example>
            This sample demonstrates how to declare a DashPattern in XML
            <code>
              &lt;document&gt;
                 &lt;section&gt;
                    &lt;paragraph type="drawing" width="200" height="200"&gt;
                       &lt;shape type="lineshape" x="0" y="0" x1="200" y1="200"&gt;
                          &lt;pen width="1" color="red"&gt;
                             &lt;pattern phase="2"&gt;1, 1, 5, 5, 20&lt;/pattern&gt;
                          &lt;/pen&gt;
                       &lt;/shape&gt;
                    &lt;/paragraph&gt;
                 &lt;/section&gt;
              &lt;/document&gt;
            </code>
            </example>
        </member>
        <member name="P:TallComponents.PDF.Layout.Pens.DashPattern.Solid">
            <summary>
            A solid pattern.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.#ctor(System.Int32,System.Double[])">
            <summary>
            Create a custom pattern with given phase and pattern.
            </summary>
            <param name="phase">The start phase.</param>
            <param name="pattern">The pattern of dashes.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Pens.DashPattern.Dashes">
            <summary>
            The pattern of dashes.
            </summary>
            <remarks>
            Should be all non zero and non negative values.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Pens.DashPattern.Phase">
            <summary>
            The phase of the pattern.
            </summary>
            <remarks>
            The phase determines the distance within the pattern at which the line starts drawing.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.Read(System.Xml.XmlReader)">
            <summary>
            Reads a dash pattern from XML.
            </summary>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.Parse(System.String)">
            <summary>
            Create a new DashPattern from a string description of alternating ink lengths..
            </summary>
            <remarks>
            <para>This method is provided to enable <see cref="T:TallComponents.PDF.Layout.Pens.DashPattern"/>s to be specified in XML.</para>
            <para>The string must be formatted as a list of comma separated positive integers.
            Each value is a length of alternating ink or whitespace.</para>
            <para>The phase defaults to 0.</para>
            </remarks>
            <param name="pattern">A comma separated list of positive integers.</param>
            <returns>A new dash pattern.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.Equals(System.Object)">
            <summary>
            Compare two DashPatterns.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.Clone">
            <summary>
            Clones a DashPattern.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a DashPattern.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.isEqual(System.Double[],System.Double[])">
            <summary>
            Compare two sets of dashes.
            </summary>
            <param name="dashes1"></param>
            <param name="dashes2"></param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.GetHashCode">
            <summary>
            Returns base.GetHashCode().
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Pens.LineCapStyle">
            <summary>
            Different styles for line caps (end-points).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Pens.LineCapStyle.Butt">
            <summary>
            Flat end. Ends exactly at end point.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Pens.LineCapStyle.Round">
            <summary>
            Rounded end. Center lies exactly at end point.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Pens.LineCapStyle.ProjectingSquare">
            <summary>
            Flat end. The end is drawn half the width of the pen beyond the end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Pens.LineJoinStyle">
            <summary>
            Different styles for line joints.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Pens.LineJoinStyle.Miter">
            <summary>
            The outer edges of the joining segments are extended until they meet.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Pens.LineJoinStyle.Round">
            <summary>
            A circle is drawn around the point where the centers of the segments meet.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Pens.LineJoinStyle.Bevel">
            <summary>
            The two segments are finished with butt caps.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Pens.Pen">
            <summary>
            A pen defines the characteristics of a line such as
            color and pattern (solid, dashed, etc.).
            </summary>
            <remarks>
            Lines, curves and borders are drawn using a pen. A pen defines how line ends are
            connected (<see cref="P:TallComponents.PDF.Layout.Pens.Pen.JoinStyle"/>) and how open ends are drawn (<see cref="P:TallComponents.PDF.Layout.Pens.Pen.CapStyle"/>).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.Pen.#ctor">
            <summary>
            Create a solid black pen that has a width of 1 user space unit.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.Pen.#ctor(TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Create a solid pen with given color that has a width of 1 user space unit.
            </summary>
            <param name="color">Color of this pen.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.Pen.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double)">
            <summary>
            Create a solid pen with given color and fractional width.
            </summary>
            <param name="color">Color of this pen.</param>
            <param name="width">Width of this pen.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.Pen.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double,TallComponents.PDF.Layout.Pens.DashPattern)">
            <summary>
            Create a solid pen with given color, fractional width and <see cref="T:TallComponents.PDF.Layout.Pens.DashPattern">pattern</see>.
            </summary>
            <param name="color">Color of this pen.</param>
            <param name="width">Width of this pen.</param>
            <param name="pattern">Pattern of this pen.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Pens.Pen.Width">
            <summary>
            Width of this pen.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when trying to assign a negative or invalid number (e.g. NaN or Infinity).
            </exception>
            <remarks>
            Setting the pen width to zero (0) a hairline is drawn.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Pens.Pen.Color">
            <summary>
            Color of this pen.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Pens.Pen.Pattern">
            <summary>
            Pattern of this pen.
            </summary>
            <remarks>
            The pattern is an array of integers that specify alternating lengths of ink followed by no-ink.
            Please see <see cref="T:TallComponents.PDF.Layout.Pens.DashPattern"/> for more information.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Pens.Pen.CapStyle">
            <summary>
            How caps (end-points) are drawn.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Pens.Pen.JoinStyle">
            <summary>
            How joints are drawn.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Pens.Pen.MiterLimit">
            <summary>
            The Miter Limit imposes a maximum on the ratio of the miter length to the line width.
            When the limit is exceeded, the join is converted from a miter to a bevel. (default = 10.0)
            </summary>
            <remarks>
            Meaningfull when JoinStyle is LineJoinStyle.Miter only.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.Pen.Equals(System.Object)">
            <summary>
            Compare two Pens.
            </summary>
            <param name="obj"></param>
            <returns>True if the pens are equal.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.Pen.Clone">
            <summary>
            Clones a Pen.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.Pen.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Pen.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Pens.Pen.GetHashCode">
            <summary>
            Returns base.GetHashCode().
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Security.EncryptionLevel">
            <summary>
            This enum specifies the available encryption levels.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Security.EncryptionLevel.RC4_40bit">
            <summary>
            Encrypt this document with RC4 40-bit. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Security.EncryptionLevel.RC4_128bit">
            <summary>
            Encrypt this document with RC4 128-bit.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Security.EncryptionLevel.AES_128bit">
            <summary>
            Encrypt this document with AES v2 128-bit. (default)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Security.EncryptionLevel.AES_256bit">
            <summary>
            Encrypt this document with AES v3 256-bit.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Security.PasswordSecurity">
            <summary>
            This class encapsulates all security settings of a PDF document.
            You secure a document by assigning a new instance of this class to the 
            Security property of the Document class.
            This class is only available in TallPDF.NET Professional.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Security.PasswordSecurity.#ctor">
            <summary>
            Creates a new password security object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.PasswordSecurity.UserPassword">
            <summary>
            User password. You may set this string to "" to allow viewing by anyone but to 
            restrict privileges such as printing.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.PasswordSecurity.OwnerPassword">
            <summary>
            Owner password. The owner has all privilages, including changing the user password.
            </summary>
            <remarks>
            The owner password is required. Setting this to "" (an empty string) is valid but 
            will allow anybody to change the security settings on the document.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.PasswordSecurity.EncryptionLevel">
            <summary>
            This encryption level used to encrypt this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.PasswordSecurity.Strong">
            <summary>
            Use strong (128-bit key) encryption. Otherwise weak (40-bit key) encryption is used.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.PasswordSecurity.StandardSecurityHandler">
            <summary>
            Use an existing SecurityHandler.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Security.Security">
            <summary>
            This class encapsulates all security settings of a PDF document.
            You secure a document by assigning a new instance of this class to the
            Security property of the Document class.
            This class is only available in TallPDF.NET Professional.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Security.Security.#ctor">
            <summary>
            Creates a new Security object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.Security.Print">
            <summary>
            Allow printing.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.Security.Change">
            <summary>
            Allow changing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.Security.CopyExtract">
            <summary>
            Allow content copying or extraction.
            </summary>
            <remarks>
            When CopyExtract is false content can be selected but cannot be copied to the clipboard.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.Security.AuthorCommentsFormFields">
            <summary>
            Allow authoring comments and form fields.
            </summary>
            <remarks>
            Meaningfull if Change = false only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.Security.FormFillSign">
            <summary>
            Allow form field fill-in or signing.
            </summary>
            <remarks>
            Meaningfull if Change = false and AuthorCommentsFormFields = false only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.Security.ExtractAccessibilityContents">
            <summary>
            Enable content accessibility.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.Security.Assembly">
            <summary>
            Allow document assemble (insert, rotate, or delete pages and bookmarks or thumbnail images).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Security.Security.PrintHighQuality">
            <summary>
            Allow printing at high quality.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Security.Security.Clone">
            <summary>
            Clones a Security.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Security.Security.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Security.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.DocumentInfoProperties">
            <summary>
            Stores a set of document custom properties.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.DocumentInfoProperties.Add(System.String,System.String)">
            <summary>
            Adds a custom property name and property value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.DocumentInfoProperty">
            <summary>
            Represents a DocumentInfo property with its value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.GetWebCredentialsEventArgs">
            <summary>
            Class containing data for the GetWebCredentials event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.GetWebCredentialsEventArgs.Url">
            <summary>
            The url to get the credentials for.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.GetWebCredentialsEventArgs.Credentials">
            <summary>
            The credentials for the url.
            </summary>
            <remarks>
            This value can be updated to set the credentials.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.GetWebCredentialsEventHandler">
            <summary>
            Represents the method that handles the GetWebCredentials event.
            </summary>
            <remarks>Set the credentials in the arguments to perform authentication.
            To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</remarks>
            <param name="sender">The sender.</param>
            <param name="e">The GetWebCredentials event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.NameValuePair`1">
            <summary>
            Represents a name value pair.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="P:TallComponents.PDF.Layout.NameValuePair`1.Name">
            <summary>
            The name of the property. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.NameValuePair`1.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.NameValuePair`1.ToString">
            <summary>
            Returns this instance of System.String.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.NameValuePairCollection`1">
            <summary>
            Collection of pairs Name and Value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="P:TallComponents.PDF.Layout.NameValuePairCollection`1.Item(System.String)">
            <summary>
            Gets of sets the value of a property with a specific name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.NameValuePairCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.NameValuePairCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.NameValuePairCollection`1.Add(System.String,`0)">
            <summary>
            Adds a custom property name and property value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.NameValuePairCollection`1.Clear">
            <summary>
            Removes all custom properties from the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.NameValuePairCollection`1.Contains(System.String)">
            <summary>
            Determines whether the collection contatins a property with specific name.
            </summary>
            <param name="name">The property name.</param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.NameValuePairCollection`1.Count">
            <summary>
            Gets the number of properties.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.NameValuePairCollection`1.Remove(System.String)">
            <summary>
            Removes the custom property with the provided name.
            </summary>
            <param name="name">The name of the property.</param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.IndexRange">
            <summary>
            A range of indexes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRange.#ctor(System.Int32)">
            <summary>
            Creates a new, zero-based range that consists of a single index.
            </summary>
            <param name="n">The zero-based index.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new, zero-based range.
            </summary>
            <param name="from">The start index of the range.</param>
            <param name="to">The end index of the range (inclusive)</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.IndexRange.From">
            <summary>
            The start index of the range.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.IndexRange.To">
            <summary>
            The end index of the range (inclusive).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.IndexRangeCollection">
            <summary>
            A collection (sequence) of index ranges.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRangeCollection.GetEnumerator">
            <summary>
            Get a PageRange enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRangeCollection.Add(TallComponents.PDF.Layout.IndexRange)">
            <summary>
            Add a PageRange to the collection.
            </summary>
            <param name="item">The page range.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRangeCollection.Remove(TallComponents.PDF.Layout.IndexRange)">
            <summary>
            Remove a PageRange from the collection.
            </summary>
            <param name="item">The page range.</param>
            <returns>True if sucessful/</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRangeCollection.AddRange(TallComponents.PDF.Layout.IndexRange[])">
            <summary>
            Add a collection of PageRange items.
            </summary>
            <param name="items">The PageRange items.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRangeCollection.Insert(System.Int32,TallComponents.PDF.Layout.IndexRange)">
            <summary>
            Insert a PageRange at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The PageRange item.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRangeCollection.Clear">
            <summary>
            Remove all PageRange elements from the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the PageRange at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.IndexRangeCollection.Count">
            <summary>
            The number of PageRange items in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRangeCollection.Contains(TallComponents.PDF.Layout.IndexRange)">
            <summary>
            Returns true if the collection contains the specified item.
            </summary>
            <param name="item">The PageRange item.</param>
            <returns>True if the collection contains the specified item.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.IndexRangeCollection.IndexOf(TallComponents.PDF.Layout.IndexRange)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The PageRange item.</param>
            <returns>The index of the specified item, or - 1 if it does not exist in this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.IndexRangeCollection.Item(System.Int32)">
            <summary>
            Returns the PageRange at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The PageRange at the specified index.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Rectangle">
            <summary>
            A rectangle represents an area on the page.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Rectangle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Rectangle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Rectangle.#ctor">
            <summary>
            Creates a new instance of the Rectangle class with (0,0,0,0) 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new rectangle.
            </summary>
            <param name="left">The left position in points.</param>
            <param name="bottom">The bottom position in points.</param>
            <param name="width">The rectangle width in points.</param>
            <param name="height">The rectangle height in points.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Rectangle.Left">
            <summary>
            The left position in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Rectangle.Bottom">
            <summary>
            The bottom position in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Rectangle.Width">
            <summary>
            The rectangle width in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Rectangle.Height">
            <summary>
            The rectangle height in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Rectangle.Top">
            <summary>
            The top position in points.
            </summary>
            <remarks>
            This property is read-only, set the height to adjust.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Rectangle.Right">
            <summary>
            The right position in points.
            </summary>
            <remarks>
            This property is read-only, set the width to adjust.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Rectangle.ToString">
            <summary>
            Return a string in format '[' Left Bottom Width Height ']'.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.DocumentInfo">
            <summary>
            Document Info for the document like Author, Title and Subject.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DocumentInfo.CustomProperties">
            <summary>
            A collection of custom properties.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DocumentInfo.Author">
            <summary>
            The person who authored this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DocumentInfo.Title">
            <summary>
            Title of this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DocumentInfo.Subject">
            <summary>
            Subject of this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DocumentInfo.Keywords">
            <summary>
            Keywords of this document.
            </summary>
            <remarks>
            Semicolons can be used to seperate multiple keywords.  
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DocumentInfo.Creator">
            <summary>
            The application that created this document before it was converted to PDF (this is your application).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.DocumentInfo.Producer">
            <summary>
            The component or application that created this document (this component after it is written).
            </summary>
            <remarks>
            <para>
            You can read the existing producer if was an existing document.
            </para>
            <para>
            This property is readonly.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DocumentInfo.CreationDate">
            <summary>
            The date this PDF was originally created.
            </summary>
            <remarks>
            This property is readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.DocumentInfo.LastModifiedDate">
            <summary>
            The date this PDF was last modified.
            </summary>
            <remarks>
            This property is readonly.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.PageSize">
            <summary>
            Encapsulates the width and height of a page and provides standard page sizes. 
            </summary>
            <remarks>
            <example>
            Specify a custom page size in XML:
            &lt;section&gt;
            &lt;!-- A4 Landscape --&gt;
              &lt;pagesize width="297mm" height="210mm" /&gt;
            &lt;!-- Section content goes here --&gt;
            &lt;/section&gt;
            </example>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.PageSize.#ctor">
            <summary>
            Create a new page size with default size (Letter).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.PageSize.#ctor(System.Double,System.Double)">
            <summary>
            Create a new page size with given width and height both in in points.
            </summary>
            <param name="width">Width in points.</param>
            <param name="height">Height in points.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.Letter">
            <summary>
            8.5 x 11 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.Tabloid">
            <summary>
            11 x 17 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.Ledger">
            <summary>
            17 x 11 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.Legal">
            <summary>
            8.5 x 14 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.Statement">
            <summary>
            5.5 x 8.5 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.Executive">
            <summary>
            7.25 x 10.5 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.Folio">
            <summary>
            8.5 x 13 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.A3">
            <summary>
            297 x 420 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.A4">
            <summary>
            210 x 297 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.A5">
            <summary>
            148.5 X 210 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.A6">
            <summary>
            105 X 148.5 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.B5">
            <summary>
            182 x 257 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.Width">
            <summary>
            Width in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.PageSize.Height">
            <summary>
            Height in points.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Unit">
            <summary>
            Unit is used to convert a wide variety of units to points, which is the
            unit used in PDF.
            </summary>
            <remarks>
            A point in PDF is exactly 1/72 inch. This is also known as a PostScript point.
            This class converts all units to PostScript points.
            </remarks>
            <example>
            <para>C#</para>
              <code>
                 myTable.PreferredWidth = Unit.Parse("50mm");
              </code>
              <code>
                 myFragment.FontSize = Unit.Parse("0.5in");
              </code>
            <para>VB.NET</para>
              <code>
                 myTable.PreferredWidth = Unit.Parse("50mm")
              </code>
              <code>
                 myFragment.FontSize = Unit.Parse("0.5in")
              </code>
            </example>
        </member>
        <member name="P:TallComponents.PDF.Layout.Unit.Value">
            <summary>
            The value (specified in the unit from the Unit property) 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Unit.Type">
            <summary>
            The unit type in which the Value is given.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.#ctor(System.Double)">
            <summary>
            Create a Unit from a value. The value is assumed to be in Points.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.#ctor(System.Double,TallComponents.PDF.Layout.UnitType)">
            <summary>
            Create a Unit from a value and a UnitType
            </summary>
            <param name="val">The value of the Unit object expressed in the unit specified by type.</param>
            <param name="type">The unit of val, for example Inch.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Unit.IsRelative">
            <summary>
            This Unit is a relative value. True if this Unit is a percentage.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Unit.Points">
            <summary>
            Return the value of this Unit in points.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.op_Equality(TallComponents.PDF.Layout.Unit,TallComponents.PDF.Layout.Unit)">
            <summary>
            Compares two Unit objects for equality.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.op_Inequality(TallComponents.PDF.Layout.Unit,TallComponents.PDF.Layout.Unit)">
            <summary>
            Compares two Unit objects for inequality.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.GetHashCode">
            <summary>
            Calculates a hash for this type.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.Parse(System.String,System.Double)">
            <summary>
            Create a unit from a string.
            </summary>
            <remarks>
              <list type="table">
                 <listheader>
                    <term>Unit</term>
                    <description>Description</description>
                 </listheader>
                 <item>
                    <term>pt</term>
                    <description>Point, 1/72 Inch</description>
                 </item>
                 <item>
                    <term>pica</term>
                    <description>Pica, 1/12 Point</description>
                 </item>
                 <item>
                    <term>px</term>
                    <description>Pixel, assumes a resolution of 72dpi.</description>
                 </item>
                 <item>
                    <term>m</term>
                    <description>Meter</description>
                 </item>
                 <item>
                    <term>cm</term>
                    <description>Centimeter, 2.54cm is 1 Inch</description>
                 </item>
                 <item>
                    <term>mm</term>
                    <description>Millimeter</description>
                 </item>
                 <item>
                    <term>um</term>
                    <description>Micrometer</description>
                 </item>      
                 <item>
                    <term>in</term>
                    <description>Inch</description>
                 </item>      
                 <item>
                    <term>ft</term>
                    <description>Foot, 12 inch is 1 foot</description>
                 </item>      
                 <item>
                    <term>yd</term>
                    <description>Yard, 36 inch is 1 yard</description>
                 </item>      
                 <item>
                    <term>%</term>
                    <description>Percentage. Result will be calculated relative to parameter <paramref name="relativeBase"/></description>
                 </item>   
              </list>
            </remarks>
            <param name="unitString">The unitstring to parse</param>
            <param name="relativeBase">The base value for relative sizes.</param>
            <returns>The resulting parsed value.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.Parse(System.String)">
            <summary>
            Create a unit from a string.
            </summary>
            <remarks>
              <list type="table">
                 <listheader>
                    <term>Unit</term>
                    <description>Description</description>
                 </listheader>
                 <item>
                    <term>pt</term>
                    <description>Point, 1/72 Inch</description>
                 </item>
                 <item>
                    <term>pica</term>
                    <description>Pica, 1/12 Point</description>
                 </item>
                 <item>
                    <term>px</term>
                    <description>Pixel, assumes a resolution of 72dpi.</description>
                 </item>
                 <item>
                    <term>m</term>
                    <description>Meter</description>
                 </item>
                 <item>
                    <term>cm</term>
                    <description>Centimeter, 2.54cm is 1 Inch</description>
                 </item>
                 <item>
                    <term>mm</term>
                    <description>Millimeter</description>
                 </item>
                 <item>
                    <term>um</term>
                    <description>Micrometer</description>
                 </item>      
                 <item>
                    <term>in</term>
                    <description>Inch</description>
                 </item>      
                 <item>
                    <term>ft</term>
                    <description>Foot, 12 inch is 1 foot</description>
                 </item>      
                 <item>
                    <term>yd</term>
                    <description>Yard, 36 inch is 1 yard</description>
                 </item>      
                 <item>
                    <term>%</term>
                    <description>Percentage. Values of this type are converted into a fraction. (e.g. 50% is 0.5 )</description>
                 </item>   
              </list>
            </remarks>
            <param name="unitString"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.FromPixels(System.Int32,System.Double)">
            <summary>
            Create a unit from pixels and a resolution. Useful for
            working with images.
            </summary>
            <remarks>
            Default resolution for screen display is normally 72dpi, though 96dpi is used by GDI+.
            </remarks>
            <param name="pixels">Length in pixels</param>
            <param name="dpi">Resolution in dpi (Dots Per Inch)</param>
            <returns></returns>
            <example>
              <code>
                 ImageShape image = new ImageShape( "image.jpg" );
                 image.KeepAspectRatio = true;
                 // Calculate width at resolution of 300dpi
                 image.Width = Unit.FromPixels( bitmap.Width, 300 );
              </code>
             </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.ToPoint(System.String)">
            <summary>
            Convert a unit string to points
            </summary>
            <param name="unitString">A unit string.</param>
            <returns>The value in points</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.ToString">
            <summary>
            Returns the value of the Unit as a formatted string in points.
            </summary>
            <returns></returns>
            <example>
              <code>
                 Unit.Parse("1 in").ToString()
              </code>
              Returns the string "72pt".
            </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.op_Implicit(TallComponents.PDF.Layout.Unit)~System.Double">
            <summary>
            Implicit conversion to double. The value is expressed in points.
            </summary>
            <param name="unit">Instance to convert.</param>
            <returns>Value of the unit in points.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.op_Implicit(System.Double)~TallComponents.PDF.Layout.Unit">
            <summary>
            Implicit conversion from double. This allows you to assign a double 
            to any variable or property of type Unit without constructors or casting.
            </summary>
            <param name="val">The value in points</param>
            <returns>A Unit with the value val and UnitType Points</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Unit.op_Implicit(System.String)~TallComponents.PDF.Layout.Unit">
            <summary>
            Implicit conversion from string. This allows you to assign a sized string 
            to any variable or property of type Unit without constructors or casting.
            </summary>
            <param name="val">The value in a format that can be parsed</param>
            <returns>A Unit with the value val and UnitType found.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.UnitType">
            <summary>
            Known units handled by the <see cref="T:TallComponents.PDF.Layout.Unit">Unit</see> class.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Micrometer">
            <summary>
            Unit of length. 1/1000.0000 meter.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Millimeter">
            <summary>
            Unit of length. 1/1000 meter.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Centimeter">
            <summary>
            Unit of length. 1/100 meter.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Meter">
            <summary>
            Unit of length.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Pica">
            <summary>
            Unit of length. 1/12 point
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Point">
            <summary>
            Unit of length. 1/72 inch. Point is the base unit used in PDF documents.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Pixel">
            <summary>
            Unit of length. Usually 1/96 inch.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Inch">
            <summary>
            Unit of length. 1 inch is 2.54 cm.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Foot">
            <summary>
            Unit of length. 12 inch is 1 foot.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Yard">
            <summary>
            Unit of length. 36 inch is 1 yard.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.UnitType.Percentage">
            <summary>
            Relative unit, represented as a fraction. 100% is 1.0, 50% is 0.5.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.Action">
            <summary>
            Abstract base class of all action classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.Action.System#ICloneable#Clone">
            <summary>
            Clone this action
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.Action.Clone">
            <summary>
            Clone this action
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.ActionCollection">
            <summary>
            An action collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.#ctor">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.#ctor(System.Boolean)">
            <summary>
            /// Creates an empty <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>.
            </summary>
            <param name="readOnly">Specify if the collection is read-only or editable.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Add(TallComponents.PDF.Layout.Actions.Action)">
            <summary>
            Adds an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> to the end of the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="action">The <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> to be addded to the end of the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>.</param>
            <returns>
            The <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/> index at which the <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> has been added.
            </returns>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>
            <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/> does not accept duplicate elements.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="action"/> is already in this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>. (Duplicate <paramref name="action"/>)</exception>
            <example>
            C#
            <code> 
            ActionCollection actions = new ActionCollection();
            actions.<b>Add</b>( new GoToAction( page ) );
            </code>
            VB.NET
            <code>
            Dim actions as ActionCollection = new ActionCollection()
            actions.<b>Add</b>( new GoToAction( page ) )
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Remove(TallComponents.PDF.Layout.Actions.Action)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> from this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="action">The action to remove.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.AddRange(TallComponents.PDF.Layout.Actions.Action[])">
            <summary>
            Adds the entries in an array of <see cref="T:TallComponents.PDF.Layout.Actions.Action">actions</see> to the end of the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="actions">The array of <see cref="T:TallComponents.PDF.Layout.Actions.Action">actions</see> to be added to the end of the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>.</param>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            <para><see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/> does not accept duplicate elements.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="actions"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="actions"/> is already in this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>. (Duplicate <see cref="T:TallComponents.PDF.Layout.Actions.Action"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Clear">
            <summary>
            Removes all actions from the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <example>
            C#
            <code> 
            ActionCollection actions = new ActionCollection();
            actions.Add( new GoToAction( page ) );
            actions.<b>Clear()</b>;
            </code>
            VB.NET
            <code>
            Dim actions as ActionCollection = new ActionCollection()
            actions.Add( new GoToAction( page ) )
            actions.<b>Clear()</b>
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Contains(TallComponents.PDF.Layout.Actions.Action)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> is in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="action">The <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> is found in this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="action"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="action"/> is <see langword="null"/>.</exception>
            <example>
            C#
            <code> 
            GoToAction goToAction = new GoToAction( page );
            UriAction uriAction = new UriAction( "http://www.tallcomponents.com" );
            ActionCollection actions = new ActionCollection();
            actions.Add( goToAction );
            bool found = actions.<b>Contains</b>( goToAction ); //found = true
            found = actions.<b>Contains</b>( uriAction ); //found = false
            </code>
            VB.NET
            <code>
            Dim goToAction1 as GoToAction = new GoToAction( page )
            Dim uriAction1 as UriAction = new UriAction( "http://www.tallcomponents.com" )
            Dim actions as ActionCollection = new ActionCollection()
            actions.Add( goToAction1 )
            Dim found as Boolean
            found = actions.<b>Contains</b>( goToAction1 ) 'found = True
            found = actions.<b>Contains</b>( uriAction1 ) 'found = False
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.IndexOf(TallComponents.PDF.Layout.Actions.Action)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="action">The <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Insert(System.Int32,TallComponents.PDF.Layout.Actions.Action)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> should be inserted.</param>
            <param name="action">The <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> to be insert.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.InsertRange(System.Int32,TallComponents.PDF.Layout.Actions.Action[])">
            <summary>
            Insert the entries in an array of <see cref="T:TallComponents.PDF.Layout.Actions.Action">Actions</see> to the specific locations in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="index">The zero based start index for the inserted actions.</param>
            <param name="actions">The <see cref="T:TallComponents.PDF.Layout.Actions.Action">actions</see> to be interted in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>.</param>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Layout.Actions.Action">Actions</see> does not accept a <see langword="null"/> as a valid value. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="actions"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="actions"/> is already in this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection"/>. (Duplicate <paramref name="actions"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> from the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Layout.Actions.Action"/> to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.RemoveRange(TallComponents.PDF.Layout.Actions.Action[])">
            <summary>
            Removes multiple actions from the collection.
            </summary>
            <param name="actions">The actions to remove</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.ActionCollection.Item(System.Int32)">
            <summary>
            Get an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> by zero-based index from the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.ActionCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see>s actually contained in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.ActionCollection.IsReadOnly">
            <summary>
            Get a value indicating whether this collection is read-only.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.FormAction">
            <summary>
            The form action is the base class for several form related actions.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.GoToAction">
            <summary>
             A go-to action.
            </summary>
            <remarks>
            Instructs the PDF reader application to jump to a different position, determined by the <see cref="P:TallComponents.PDF.Layout.Actions.GoToAction.Destination"/>.
            <example>
            C#
            <code>
            Document document = new Document();
            Section section = document.Sections.Add();
            TextParagraph text1 = new TextParagraph();
            text1.Fragments.Add( new Fragment( "Jump to this paragraph" ) );
            section.Add( text1 );
            
            // The second paragraph links to the first using a GoToAction:
            Section section2 = document.Sections.Add();
            TextParagraph text2 = new TextParagraph();
            text2.Fragments.Add( new Fragment( "Click here" ) );
            text2.Actions.Add( new GoToAction( new ParagraphDestination( text1 ) );
            section.Add( text2 );
            </code>
            </example>
            <seealso cref="T:TallComponents.PDF.Layout.Navigation.ParagraphDestination"/><seealso cref="T:TallComponents.PDF.Layout.Navigation.RemoteDestination"/>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor">
            <summary>
            Create a new GoTo action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned go-to action.</returns>
            <remarks>
            The cloned goto-action will point to the same Destination.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
            <summary>
            Create a new GoTo action that points tot the specified paragraph.
            </summary>
            <param name="target">The paragraph to go to.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor(System.String)">
            <summary>
            Create a new GoTo action that points tot the specified paragraph.
            </summary>
            <param name="targetId">The ID of the paragraph to go to.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor(System.String,System.Int32)">
            <summary>
            Create a new GoTo action that jumps to the specified document.
            </summary>
            <remarks>
            Uses a <see cref="T:TallComponents.PDF.Layout.Navigation.RemoteDestination"/> to jump to another file. Note that the fileSpecification must be 
            a path to a file, not a URI.
            </remarks>
            <param name="fileSpecification">The name of the file.</param>
            <param name="pageIndex">The 0-based index of the page.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor(TallComponents.PDF.Layout.Navigation.Destination)">
            <summary>
            Create a new go-to action based on a Destination
            </summary>
            <param name="destination">The destination</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.GoToAction.Destination">
            <summary>
            The destination this go-to action points to.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.HideAction">
            <summary>
            The hide action sets or clears the annotation's Hidden flag.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.HideAction.#ctor">
            <summary>
            Creates a new hide action.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.HideAction.Show">
            <summary>
            Specify if the annotations should be shown (true) of hidden (false).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.HideAction.Annotations">
            <summary>
            The annotations which must be showns or hidden, depending of the Show boolean.
            </summary>
            <remarks>
            <para>Note that the widget annotations located in the Fields can or cannot be available in this collection.</para>
            <para>Adding 1 or more annotations in this collection makes the PDF incompatible with Adobe Acrobat Standard or Professional designer mode.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.HideAction.Fields">
            <summary>
            The fields which must be showns or hidden, depending of the Show boolean.
            </summary>
            <remarks>
            <para>Note that the widget annotations located in this collection can or cannot be available in the Annotations.</para>
            <para>Adding more than 1 field in this collection makes the PDF incompatible with Adobe Acrobat Standard or Professional designer mode.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.HideAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned hide action.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.HttpMethod">
            <summary>
            The http method specifies how to submit to the server.
            </summary>
            <remarks>
            This property is meaningfull for SubmitFormat: Pdf and Html
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Layout.Actions.HttpMethod.Post">
            <summary>
            Use Http post request.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Actions.HttpMethod.Get">
            <summary>
            Use Http get.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.IActionResolver">
            <summary>
            This interface is used to get instances to other resolvers.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.IActionResolver.GetDestinationResolver">
            <summary>
            Returns a Destination Resolver
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.IActionResolver.GetAnnotationResolver">
            <summary>
            Returns a Annotations Resolver
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.IActionResolver.GetFieldResolver">
            <summary>
            Returns a Field Resolver
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.ImportDataAction">
            <summary>
            The ImportData action imports field values from a file.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ImportDataAction.#ctor">
            <summary>
            Create a new ImportData action.
            </summary>
            <remarks>
            By default the path of the FDF file will be "".
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ImportDataAction.#ctor(System.String)">
            <summary>
            Create a new ImportData action.
            </summary>
            <param name="path">The path of the FDF file to import.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.ImportDataAction.Path">
            <summary>
            The path of the FDF file to import.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ImportDataAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned ImportData action.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.JavaScriptAction">
            <summary>
            A JavaScript action executes javascript.
            </summary>
            <remarks>
            This class does not exectute the JavaScript directly, it depends on the context (location) whare it lives and the 
            ScriptBehavior specified on the document.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.JavaScriptAction.#ctor">
            <summary>
            Create a new JavaScript action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.JavaScriptAction.#ctor(TallComponents.PDF.Layout.JavaScript.JavaScript)">
            <summary>
            Create a new JavaScript action.
            </summary>
            <param name="javaScript">The JavaScript to embed.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.JavaScriptAction.#ctor(System.String)">
            <summary>
            Create a new JavaScript action.
            </summary>
            <param name="javaScriptCode">The JavaScript code to embed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.JavaScriptAction.JavaScript">
            <summary>
            The java script code in this java script action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.JavaScriptAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned JavaScript action.</returns>
            <remarks>
            The cloned javascript-action will point to a cloned JavaScript object.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.LaunchAction">
            <summary>
            A LaunchAction starts an external Application.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.LaunchAction.#ctor">
            <summary>
            Creates a new LaunchAction that starts an external Application.
            </summary>
            <remarks>
            By default the fileName will be ''.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.LaunchAction.#ctor(System.String)">
            <summary>
            Creates a new LaunchAction that starts an external Application.
            </summary>
            <param name="path">The complete path of the application to launch.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.LaunchAction.Path">
            <summary>
            The complete path of the application to launch.
            </summary>
            <remarks>
            You cannot set this property to <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.LaunchAction.WindowBehavior">
            <summary>
            Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.LaunchAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned named action.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.NamedAction">
            <summary>
            A Named action executes an action predefined by the viewer application.
            </summary>
            <remarks>
            Well known (standard) names are: NextPage, PrevPage, FirstPage and LastPage.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.NamedAction.#ctor">
            <summary>
            Create a new Named action.
            </summary>
            <remarks>
            By default the Name will be 'NoName'.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.NamedAction.#ctor(System.String)">
            <summary>
            Create a new Named action.
            </summary>
            <param name="name">The name for the action to be performed by this named action.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.NamedAction.Name">
            <summary>
            The name for the action to be performed by this named action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.NamedAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned named action.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.ResetFormAction">
            <summary>
            The reset form action resets the fields to there default value.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ResetFormAction.#ctor">
            <summary>
            Create a new reset form action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.ResetFormAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned reset form action.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.SubmitFormAction">
            <summary>
            The submit form action send form data (containing field values) to a URL in a specified format.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.SubmitFormAction.#ctor">
            <summary>
            Create a new submit form action.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.Url">
            <summary>
            The uniform resource locator (url) for this submit form action.
            </summary>
            <remarks>
            You cannot set this property to <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.SubmitFormat">
            <summary>
            The submit format specifies what to submit to the server.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.HttpMethod">
            <summary>
            The http method specifies how to submit to the server.
            </summary>
            <remarks>
            This property is meaningfull for SubmitFormat: Pdf and Html
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.IncludeEmptyFields">
            <summary>
            Fields without a value should be submitted also.
            </summary>
            <remarks>
            This property has no meaning for SubmitFormat: Pdf 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.ConvertDatesToStandardFormat">
            <summary>
            When submitting all fields which contains a date are converted to a predefined format, 
            otherwise the value is submitted as-is (aka how the user entered the data).
            </summary>
            <remarks>
            <para>This property has no meaning for SubmitFormat: Pdf.</para>
            <para>The predefined format: 'D:yyyymmdd' (without the quotes)</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.SubmitFormAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned submit form action.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.SubmitFormat">
            <summary>
            The submit format specifies what to submit to the server.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Actions.SubmitFormat.Pdf">
            <summary>
            Complete PDF document.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Actions.SubmitFormat.Html">
            <summary>
            HTML form format.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Actions.SubmitFormat.Xfdf">
            <summary>
            XML Forms Data Format.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Actions.SubmitFormat.Fdf">
            <summary>
            Forms Data Format (saved as .fdf file).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.UnknownAction">
            <summary>
            Unknown action. This action will be created if the action is unknown or different from the supported types.
            </summary>
            <remarks>
            You cannot instanciate this class.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.UnknownAction.Name">
            <summary>
            The name for this unknown action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.UnknownAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned unknown action.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Actions.UriAction">
            <summary>
            A UriAction starts an external web site from its URL.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.UriAction.#ctor">
            <summary>
            Creates a new UriAction that starts an external web site from its URL. Initial URL is empty.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.UriAction.#ctor(System.String)">
            <summary>
            Creates a new UriAction that starts an external web site from the given URL.
            </summary>
            <param name="uri">The uniform resource identifier (uri) for this Uri action.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.UriAction.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new UriAction that starts an external web site from the given URL.
            </summary>
            <param name="uri">The uniform resource identifier (uri) for this Uri action.</param>
            <param name="isMap">A flag specifying whether to track the mouse position when the Uri is resolved.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.UriAction.Uri">
            <summary>
            The uniform resource identifier (uri) for this Uri action.
            </summary>
            <remarks>
            You cannot set this property to <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Actions.UriAction.IsMap">
            <summary>
            A flag specifying whether to track the mouse position when the Uri is resolved.
            </summary>
            <remarks>
            This entry  applies only to actions triggered by the user's clicking annotation; 
            it is ignored for actions associated with a bookmark or with a document's open action.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Actions.UriAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned uri action.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Annotation">
            <summary>
            An annotation is the base class all annotations.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Annotations.Annotation.PropertyChanged">
            <summary>
            Occurs when any property of the annotation has changed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Annotation.#ctor">
            <summary>
            Creates a new Annotation, without specifying the underlaying data.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Annotation.#ctor(TallComponents.PDF.Base.Annotations.Annotation,TallComponents.PDF.Layout.Actions.IActionResolver)">
            <summary>
            Creates a new Annotation.
            </summary>
            <param name="annotation">The base annotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Annotation.BeginUpdate">
            <summary>
            This method can be used to begin a properties bulk updat .
            </summary>
            <remarks>
            Notice that you should call EndUpdate when the bulk update is ready.
            You can nest BeginUpdate / EndUpdate pairs.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Annotation.EndUpdate">
            <summary>
            This method can be used to end the properties bulk update.
            </summary>
            <remarks>
            You can nest BeginUpdate / EndUpdate pairs.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Annotation.firePropertyChanged(System.String)">
            <summary>
            Fire the property changed event.
            </summary>
            <param name="name">The name of the changed property.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Annotation.updateAPAndFirePropertyChanged(System.String)">
            <summary>
            Update the AP entry and then fire the PropertyChanged event.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Annotation.updateAPAndFirePropertyChanged(System.String,System.Boolean)">
            <summary>
            Update the AP entry and then fire the PropertyChanged event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.Left">
            <summary>
            Position of annotation's left edge. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.Bottom">
            <summary>
            Position of annotation's bottom edge. 
            </summary> 
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.Right">
            <summary>
            Position of annotation's right edge. 
            </summary>
            <remarks>
            This property cannot be set, it will be calculated from the left and width properties.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.Top">
            <summary>
            Position of annotation's top edge. 
            </summary>
            <remarks>
            This property cannot be set, it will be calculated from the bottom and height properties.
            </remarks> 
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.Width">
            <summary>
            Width of this annotation. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.Height">
            <summary>
            Height of this annotation. 
            </summary> 
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.Locked">
            <summary>
            Specifies if the annotations properties are locked in a viewer application.
            </summary>
            <remarks>
            This flag does not restrict changing Field properties, such as the value of a TextField.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.BorderColor">
            <summary>
            The color of the border of this annotation.
            </summary>
            <remarks>This property returns either an RgbColor or Transparent. You should only assign an RgbColor to this property.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.BorderWidth">
            <summary>
            The width in points of the border of this annotation.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.BorderStyle">
            <summary>
            The border style of this annotation.
            </summary>    
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.Invisible">
            <summary>
            This annotation will not be visible in the pdf-viewer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.Print">
            <summary>
            This annotation will be visible on a printout.
            </summary>   
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Annotation.Flatten(TallComponents.PDF.Layout.Shapes.Canvas)">
            <summary>
            Flatten the annotation as static content to the given canvas.
            </summary>
            <param name="canvas">The canvas to add the content.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.NoRotate">
            <summary>
            This annotation will not be rotated with the page rotation.
            The upper left corner of the annotation rectangle remains in a fixed location on the page, regardless of the page rotation.
            </summary>   
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.OrientationImplementation">
            <summary>
            Implements the actual orientation functionality of various annotation types. Officially, only widgets
            can have a non-zero orientation, but it appears that other markup types can have a rotate flag.
            The orientationImplementation avoid runtime checks for this. If an annotation does not support
            non-zero orientations, the implementation will always return Rotate0.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.AppearanceProvider">
            <summary>
            The specific appearance provider for this annotation.
            </summary>
            <remarks>
            If <see langword="null"/> the default provider will be used.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Annotation.Accept(TallComponents.PDF.Layout.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.baseAnnotation">
            <summary>
            The base annotation wrapped in this class
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Annotation.ActionResolver">
            <summary>
            The Destination resolver used to resolve destinations in actions.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection">
            <summary>
            An annotation collection.
            </summary>
            <remarks>
            This collection is non-creatable and can be obtained through the Annotations property of HideAction. 
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.#ctor">
            <summary>
            /// Creates an empty annotation collection
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.#ctor(System.Boolean)">
            <summary>
            /// Creates an empty annotation collection.
            </summary>
            <param name="readOnly">Specify if the collection is read-only or editable.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.#ctor(TallComponents.PDF.Base.Object,TallComponents.PDF.Layout.Annotations.IAnnotationResolver)">
            <summary>
            Creates a new annotation collection, based on the array.
            </summary>
            <param name="obj">The object with contains the base information for this collection.</param>
            <param name="annotationResolver">Needed to resolve existing annotations.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.Add(TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            Adds an <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation">Annotation</see> to the end of the <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection">AnnotationCollection</see>.
            </summary>
            <param name="annotation">The <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> to be addded to the end of the <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>.</param>
            <returns>
            The <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/> index at which the <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> has been added.
            </returns>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>
            <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/> does not accept duplicate elements.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="annotation"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="annotation"/> is already in this <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>. (Duplicate <paramref name="annotation"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.Remove(TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> from this <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>.
            </summary>
            <param name="annotation">The annotation to remove.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.AddRange(TallComponents.PDF.Layout.Annotations.Annotation[])">
            <summary>
            Adds the elements of an array of annotations to the end of the collection.
            </summary>
            <param name="annotations">The array of annotations to be addded to the end of the collection.</param>
            <remarks>
            <para>
            <paramref name="annotations"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="annotations"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="annotations"/> is already in this collection. 
            (Duplicate <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.Clear">
            <summary>
            Removes all annotations from the <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.Contains(TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> is in the <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>.
            </summary>
            <param name="annotation">The <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> is found in this <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="annotation"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="annotation"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.IndexOf(TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> in the <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>.
            </summary>
            <param name="annotation">The <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> to locate in the <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.Insert(System.Int32,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> should be inserted.</param>
            <param name="annotation">The <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> to be insert.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> from the <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.AnnotationCollection.Item(System.Int32)">
            <summary>
            Retrieve an <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/> by zero-based index from the <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.AnnotationCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Layout.Annotations.Annotation"/>s actually contained in the <see cref="T:TallComponents.PDF.Layout.Annotations.AnnotationCollection"/>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.AnnotationCollection.IsReadOnly">
            <summary>
            Get a value indicating whether this collection is read-only.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationCollection.toArray">
            <summary>
            Returns the annotations contained in this collection as array.
            </summary>
            <returns>The Annotation array.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.AnnotationVisitor">
            <summary>
            A derived instance of AnnotationVisitor is passed to Annotation.Accept(...). This method
            calls one of the below AnnotationVisitor methods according to the type of annotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Layout.Annotations.Annotation,System.Object)">
            <summary>
            Visit an annotation.
            </summary>
            <param name="annotation">The vistor must handle an annotation.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            <see langword="null"/> is returned when not implementing this functionality.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Layout.Annotations.Widgets.Widget,System.Object)">
            <summary>
            Visit a widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the annotation overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Layout.Annotations.Widgets.RadioButtonWidget,System.Object)">
            <summary>
            Visit a radio button widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a radio button widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the widget overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget,System.Object)">
            <summary>
            Visit a push button widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a push button widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the widget overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Layout.Annotations.Widgets.SignatureWidget,System.Object)">
            <summary>
            Visit a signature widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a signature widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the widget overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Layout.Annotations.Widgets.CheckBoxWidget,System.Object)">
            <summary>
            Visit a check box widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a check box widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the widget overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Layout.Annotations.Link,System.Object)">
            <summary>
            Visit a link (annotation).
            </summary>
            <param name="annotation">The vistor must handle a link annotation.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the annotation overload.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.HighlightStyle">
            <summary>
            The visual effect that is used when the mouse is pressed inside the annotation area.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.HighlightStyle.None">
            <summary>
            No visual effect.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.HighlightStyle.Invert">
            <summary>
            Invert the backgound and border of the annotation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.HighlightStyle.Outline">
            <summary>
            Invert the border of the annotation
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.HighlightStyle.Push">
            <summary>
            Display the annotation as if it were pushed down.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.IAnnotationResolver">
            <summary>
            An annotation resolver is used to resolve a Base.Object to an existing (derived)annotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.IAnnotationResolver.Resolve(TallComponents.PDF.Base.Object)">
            <summary>
            Resolve a base object to an existing (derived)annotation,  without the widgets in fields.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.IAnnotationResolver.FieldResolver">
            <summary>
            Get the field resolver used to resolve widget annotations in this annotation resolver.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Link">
            <summary>
            A link annotation
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Link.#ctor">
            <summary>
            Create a new link annotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Link.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new link annotation.
            </summary>
            <param name="left">The left position for this link.</param>
            <param name="bottom">The bottom position for this link.</param>
            <param name="width">The width for this link.</param>
            <param name="height">The height for this link.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Link.BorderColor">
            <summary>
            The color of the border of this annotation.
            </summary>
            <remarks>This property returns either an RgbColor or Transparent. You should only assign an RgbColor to this property.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Link.#ctor(TallComponents.PDF.Base.Annotations.LinkAnnotation,TallComponents.PDF.Layout.Actions.IActionResolver)">
            <summary>
            Creates a new link annotation.
            </summary>
            <param name="linkAnnotation">The LinkAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Link.MouseUpActions">
            <summary>
            The actions executed when a mouse/pointing device goes up.
            </summary>
            <remarks>
            <para>These actions are also called the click-actions.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Link.linkAnnotation">
            <summary>
            The base LinkAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Link.Accept(TallComponents.PDF.Layout.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
            <returns>The object as returned by the visitor. Meaning is visitor specific.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Link.HighlightStyle">
            <summary>
            The visual effect that is used when the mouse is pressed inside the annotation area.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.CheckBoxWidget">
            <summary>
            A check box widget is a specialized widget.
            </summary>
            <remarks>
            You retrieve an existing Widget from the Widgets property of the Field class or Page class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.CheckBoxWidget.#ctor">
            <summary>
            Create a new PDF form field Check box Widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.CheckBoxWidget.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.CheckBoxWidget.CheckMarkAppearance">
            <summary>
            The check mark appearance for this check box widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.CheckBoxWidget.Option">
            <summary>
            The associated Option for this Widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.CheckBoxWidget.BorderShape">
            <summary>
            The shape of checkbox widget's border. By default it's square, but in dynamic xfa round radiobutton-like border is supported as well.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.CheckBoxWidget.Accept(TallComponents.PDF.Layout.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.CheckMarkAppearance">
            <summary>
            Different layout modes for a push button widget.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.CheckMarkAppearance.Check">
            <summary>
            Display the check mark as check.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.CheckMarkAppearance.Circle">
            <summary>
            Display the check mark as circle.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.CheckMarkAppearance.Cross">
            <summary>
            Display the check mark as cross.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.CheckMarkAppearance.Diamond">
            <summary>
            Display the check mark as diamond.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.CheckMarkAppearance.Square">
            <summary>
            Display the check mark as square.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.CheckMarkAppearance.Star">
            <summary>
            Display the check mark as star.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.CheckMarkAppearance.Unknown">
            <summary>
            The check mark is unknown (none of the known values).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.DisplaySettings">
            <summary>
            Enum which specifies what to display in the Text region in a SignatureAppearance.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.DisplaySettings.None">
            <summary>
            Displays non of the proerties. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.DisplaySettings.Name">
            <summary>
            Display the name property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.DisplaySettings.DistinguishedName">
            <summary>
            Display the distinguished name property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.DisplaySettings.Reason">
            <summary>
            Display the reason property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.DisplaySettings.Location">
            <summary>
            Display the location property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.DisplaySettings.Date">
            <summary>
            Display the date property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.DisplaySettings.Labels">
            <summary>
            Display labels in front of the other properties.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.DisplaySettings.All">
            <summary>
            Displays all the properties including labels.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget">
            <summary>
            A PDF form field Widget. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.BorderColor">
            <summary>
            The color of the border of this widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.BorderWidth">
            <summary>
            The width in points of the border of this widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.BorderStyle">
            <summary>
            The border style of this widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.BackgroundColor">
            <summary>
            The background color of this widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.Orientation">
            <summary>
            Orientation of widget in degrees. Is always a multiple of 90. Default is 0.
            </summary>
            <remarks>
            The orientation is relative to the page and specified counterclockwise.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.Font">
            <summary>
            Returns the font of this form field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.FontSize">
            <summary>
            Returns the size of the font of this form field.
            A zero fontsize means that the text is auto-sized.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.CharacterSpacing">
            <summary>
            Returns the size of the Character spacing of this form field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.TextColor">
            <summary>
            The text color 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.HorizontalAlignment">
            <summary>
            The text aligment 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.NormalCaption">
            <summary>
            The normal caption [visable] on a [push] button.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.PushButtonLayout">
            <summary>
            The text-icon position.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.PdfWidget.SetIcon(TallComponents.PDF.Layout.Shapes.ShapeCollection)">
            <summary>
            Set the icon for the button widget.
            </summary>
            <param name="icon">The icon to set, or null if reset.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonLayout">
            <summary>
            Different layout modes for a push button widget.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonLayout.LabelOnly">
            <summary>
            Display the label only.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonLayout.IconOnly">
            <summary>
            Display the icon only.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonLayout.LabelBelowIcon">
            <summary>
            Display both label and icon, with the label on the bottom, the icon on the top. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonLayout.LabelAboveIcon">
            <summary>
            Display both label and icon, with the label on the top, the icon on the bottom.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonLayout.LabelRightIcon">
            <summary>
            Display both label and icon, with the label to the right of the icon. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonLayout.LabelLeftIcon">
            <summary>
            Display both label and icon, with the label to the left of the icon.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonLayout.LabelOverIcon">
            <summary>
            Display both label and icon, with the label overlaid directly on the icon.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget">
             <summary>
            A push button widget is a specialized widget.
             </summary>
             <remarks>
             You retrieve an existing Widget from the Widgets property of the Field class or Page class.
             </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget.#ctor">
            <summary>
            Create a new PDF form field Push button Widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PDF form field Push button Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget.#ctor(TallComponents.PDF.Layout.Annotations.Widgets.Widget)">
            <summary>
            Create a new widget, based on an existing widget (used for cloning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget.SetIcon(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Set a new Icon for this PushButtonWidget
            </summary>
            <param name="icon">The icon to set.</param>
            <remarks>
            Setting icon to <see langword="null"/> clears the icon.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget.SetIcon(TallComponents.PDF.Layout.Shapes.ShapeCollection)">
            <summary>
            Set a new Icon for this PushButtonWidget
            </summary>
            <param name="icon">The icon to set.</param>
            <remarks>
            Setting icon to <see langword="null"/> clears the icon.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget.HasIcon">
            <summary>
            Checks if an icon is present.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget.Label">
            <summary>
            The label for the button.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget.Layout">
            <summary>
            The Layout mode for this push button widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.PushButtonWidget.Accept(TallComponents.PDF.Layout.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.RadioButtonWidget">
             <summary>
            A radio button widget is a specialized widget, which has an additional Name which specifies the widget.
             </summary>
             <remarks>
             You retrieve an existing Widget from the Widgets property of the Field class or Page class.
             </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.RadioButtonWidget.#ctor">
            <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
            <remarks>This constructor is needed for XML loading in TallPDF. It will create a widget with the export name "defaultExportName". Please take care
            to set Option.ExportName to a sensible value.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.RadioButtonWidget.#ctor(System.String)">
            <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
            <param name="exportName">The exportName used when this option is checked.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.RadioButtonWidget.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
            <param name="exportName">The exportName used when this option is checked.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.RadioButtonWidget.CheckMarkAppearance">
            <summary>
            The check mark appearance for this radio button widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.RadioButtonWidget.Option">
            <summary>
            The associated Option for this Widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.RadioButtonWidget.Persistency">
            <summary>
            The widget's persistency when this document is written.  
            </summary>
            <remarks>
            The persistency for radio buttons is the same for all radio buttons connected to one field.
            The property will be automatically updated for all radio button widgets.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.RadioButtonWidget.Accept(TallComponents.PDF.Layout.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearance">
            <summary>
            The signature appearance can be used if the document is signed,
            it is the appearance for a signed signature widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearance.#ctor">
            <summary>
            Create a new signature appearance.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearance.Style">
            <summary>
            The style used in the SignatureAppearance.
            </summary>
            <remarks>
            Default is NameAndText.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearance.BitmapSource">
            <summary>
            The image used if style is ImageOnly or ImageAndText.
            </summary>
            <remarks>
            <para>Default value is <see langword="null"/>.</para>
            <para>In other styles this property has no meaning.</para>
            <para>If both a Bitmap and a TopazSignature are provided the TopazSignature will be used only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearance.TopazSignature">
            <summary>
            The image (as vector graphics) used if style is ImageOnly or ImageAndText.
            </summary>
            <remarks>
            <para>Default value is <see langword="null"/>.</para>
            <para>In other styles this property has no meaning.</para>
            <para>If both a Bitmap and a TopazSignature are provided the TopazSignature will be used only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearance.KeepAspectRatio">
            <summary>
            specify if the image must respect its aspect ratio.
            </summary>
            <remarks>
            Default value is true.
            <para>Meaning full if a bitmap or image is set only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearance.DisplaySettings">
            <summary>
            Specifies what to display in the Text region.
            </summary>
            <remarks>
            In ImageOnly style this property has no meaning.
            <para>Default is All.</para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearanceStyle">
            <summary>
            Enum which specifies the style for a SignatureAppearance.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearanceStyle.TextOnly">
            <summary>
            The text will use all space. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearanceStyle.ImageOnly">
            <summary>
            The image will use all space
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearanceStyle.ImageAndText">
            <summary>
            On the left side an image will be placed, if no image is given an empty image is used.
            On the right side the text is placed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearanceStyle.NameAndText">
            <summary>
            On the left side the name of the signer is used.
            On the right side the text is placed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.SignatureWidget">
             <summary>
            A signature widget is a specialized widget.
             </summary>
             <remarks>
             You retrieve an existing Widget from the Widgets property of the Field class or Page class.
             </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.SignatureWidget.#ctor">
            <summary>
            Create a new PDF form field Signature Widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.SignatureWidget.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PDF form field Signature Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.SignatureWidget.SignedAppearance">
            <summary>
            The appearance settings that will be used during signing. 
            </summary>
            <remarks>
            Will be used if a signature handler is specified for the attached signature field only.
            Default value is <see langword="null"/>, meaning use factory defaults 
            (see <see cref="T:TallComponents.PDF.Layout.Annotations.Widgets.SignatureAppearance"/> class for details).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.SignatureWidget.Accept(TallComponents.PDF.Layout.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.TopazSignature">
            <summary>
            A class representing a Topaz System Signature.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.TopazSignature.#ctor(System.String)">
            <summary>
            Create a new TopazSignature based on an existing sig string.
            </summary>
            <param name="sigStringHex">An unencrypted, uncompressed SIG string.</param>
            <remarks>
            This is the ascii hex string as returned by the GetSigString() method from the SigPlusNET library.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.TopazSignature.#ctor(System.IO.Stream)">
            <summary>
            Create a new TopazSignature based on an existing sig stream.
            </summary>
            <param name="sigStream">An unencrypted, uncompressed SIG string as stream.</param>
            <remarks>
            The caller is responsible for closing the
            stream. The stream can be closed after this constructor returns.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.Widget">
            <summary>
            A PDF form field Widget.  
            </summary>
            <remarks>
            You retrieve an existing Widget from the Widgets property of the Field class or Page class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.Widget.#ctor">
            <summary>
            Create a new PDF form field Widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.Widget.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PDF form field Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.Widget.#ctor(TallComponents.PDF.Layout.Annotations.Widgets.Widget)">
            <summary>
            Create a new widget, based on an existing widget (used for cloning).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.Field">
            <summary>
            The associated Field.
            </summary>
            <remarks>
            <para>
            This property cannot be set.
            </para>
            Note that this property is updated if this widget is added to the WidgetCollection from a field.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.TextColor">
            <summary>
            The text color 
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.FontSize">
            <summary>
            The font size.
            </summary>
            <remarks>
            <para>For widgets connected to SignatureField this property is not used.</para> 
            <para>Setting this property is supported in classic PDF documents only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.Font">
            <summary>
            The text font.
            </summary>
            <remarks>
            <para>For widgets connected to RadioButtons and CheckBoxes this property is not used.</para>
            <para>Setting this property is supported in classic PDF documents only.</para>
            <para>The EmbedMode of the font that is assigned should be Auto, Full or ReferenceOnly. All other cases will throw
            an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.BorderColor">
            <summary>
            The color of the border of this widget.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.BackgroundColor">
            <summary>
            The background color of this widget.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            The supported colors are RGB, Gray, CMYK and Transparent.
            </remarks> 
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.HorizontalAlignment">
            <summary>
            The horiontal text alignment 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.VerticalAlignment">
            <summary>
            The vertical text aligment 
            </summary>
            <remarks>
            Setting this property is supported in Xfa documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.Invisible">
            <summary>
            This annotation will not be visible in the pdf-viewer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.Orientation">
            <summary>
            Orientation of this widget in degrees. Default is Rotate0.
            </summary>
            <remarks>
            <para>The orientation is relative to the page and specified counterclockwise.</para>
            <para>Setting this property is supported in classic PDF documents only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.Persistency">
            <summary>
            The widget's persistency when this document is written.  
            </summary>
            <remarks>
            If a widget is flattened and the Value property for the related field is not set, 
            the field's default value will be used, if no default value is specified this widget is simply removed. 
            If the widget is flattened and the Value is set, appropriate content is drawn in place of this widget. 
            E.g. in case of a multiline text field, the  text is wrapped, formatted using the widget's and field's 
            font, font size, orientation, alignment, border and background color. 
            If a widget is not flattened, the widget and the related field is preserved and can still be filled out
            interactively. If a field is not flattened and the Value property is set, the corresponding value will
            be entered into the field.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.MouseEnterActions">
            <summary>
            The actions executed when a mouse/pointing device enters the widget.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.MouseExitActions">
            <summary>
            The actions executed when a mouse/pointing device leaves the widget.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.MouseDownActions">
            <summary>
            The actions executed when a mouse/pointing device goes down in the widget.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.GotFocusActions">
            <summary>
            The actions executed when the widget recieves the input focus.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.LostFocusActions">
            <summary>
            The actions executed when the widget loses the input focus.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.MouseUpActions">
            <summary>
            The actions executed when a mouse/pointing device goes up.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.Widget.widgetAnnotation">
            <summary>
            The base WidgetAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.Widget.UpdateAppearance">
            <summary>
            This updates the appearance of this widget.
            </summary>
            <remarks>
            You should call this function when you change at least one of the following items:
            <list type="bullet">
            <item>The format action in the connected Field (type must be ValueField).</item>
            <item>The JavaScript inside the format action.</item>
            <item>Document level JavaScript called by the format action.</item> 
            </list>
            <para>
            Note that this function is automatically called when you change any widget or annotation property or set a new ValueField.Value.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.Widget.Accept(TallComponents.PDF.Layout.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.Widget.ToString">
             <summary>
            Obtains the String representation of this instance.
             </summary>
             <returns>
            The friendly name of the Widget 
            </returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.Widget.TestOverflow(System.String)">
            <summary>
            Determines whether a given text will "overflow", i.e. whether scrolling is needed
            to display the entire text.
            </summary>
            <param name="text">The text that is to be fitted.</param>
            <returns>True if the text will cause an overflow. False if it can be displayed
            without scrolling.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection">
            <summary>
            Collection of form widgets. Associated with a page and field
            </summary>
            <remarks>
            This collection is non-creatable and can be obtained through the Widgets property of both Page and Field. 
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.Changed">
            <summary>
            Fired when this collection has changed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.Item(System.Int32)">
            <summary>
            Retrieve a widget by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.Count">
            <summary>
            Number of widgets.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.Contains(TallComponents.PDF.Layout.Annotations.Widgets.Widget)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Annotations.Widgets.Widget"/> is in the <see cref="T:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection"/>.
            </summary>
            <param name="widget">The <see cref="T:TallComponents.PDF.Layout.Annotations.Widgets.Widget"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Annotations.Widgets.Widget"/> is found in this <see cref="T:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="widget"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="widget"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.IndexOf(TallComponents.PDF.Layout.Annotations.Widgets.Widget)">
            <summary>
            Returns the index of the specified widget in the collection.
            </summary>
            <param name="widget">The widget to locate in this collection.</param>
            <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.Add(TallComponents.PDF.Layout.Annotations.Widgets.Widget)">
            <summary>
            Add a widget to the end of this collection.
            </summary>
            <param name="widget">The widget to add.</param>
            <returns>
            The zero-based index where the widget is added.
            </returns>
            <remarks>
            Note that this collection can be associated with a page or a field, the page or field property on the added widget
            will be updated to this association.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.Remove(TallComponents.PDF.Layout.Annotations.Widgets.Widget)">
            <summary>
            Removes the given widget from this collection.
            </summary>
            <param name="widget">The widget to remove.</param>
            <remarks>
            Note that this collection can be associated with a page or a field, the page or field property on the added widget
            will be updated to this association.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.AddRange(TallComponents.PDF.Layout.Annotations.Widgets.Widget[])">
            <summary>
            Adds the elements of an array of widgets to the end of the collection.
            </summary>
            <param name="widgetAnnotations">The array of widgets to be addded to the end of the collection.</param>
            <remarks>
            <para>
            <paramref name="widgetAnnotations"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="widgetAnnotations"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="widgetAnnotations"/> is already in this collection. 
            (Duplicate <see cref="T:TallComponents.PDF.Layout.Annotations.Widgets.Widget"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.Insert(System.Int32,TallComponents.PDF.Layout.Annotations.Widgets.Widget)">
            <summary>
            Insert an widget at the specified index.
            </summary>
            <param name="index">The zero-based index of the widget after insertion.</param>
            <param name="widget">The widget to insert.</param>
            <remarks>
            Note that this collection can be associated with a page or a field, the page or field property on the added widget
            will be updated to this association.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.validateTypes(TallComponents.PDF.Layout.Forms.Fields.Field,TallComponents.PDF.Layout.Annotations.Widgets.Widget)">
            <summary>
            Check if the widget is the correct type for the field (and visa-versa)
            </summary>
            <param name="field">The field.</param>
            <param name="widget">The widget.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a widget at the specified index.
            </summary>
            <param name="index">The zero-based index of the widget to remove.</param>
            <remarks>Removing a widget at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Annotations.Widgets.WidgetCollection.Clear">
            <summary>
            Removes all widgets from this collection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Annotations.Widgets.WidgetPersistency">
            <summary>
            The persistency for a widget
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.WidgetPersistency.Leave">
            <summary>
            The widget will be present in the target document, with the updated properties
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.WidgetPersistency.Flatten">
            <summary>
            Remove the widget from the document so it can no longer be manipulated, but the appearance is 
            added as static content.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Annotations.Widgets.WidgetPersistency.Remove">
            <summary>
            Remove the widget from the document. 
            </summary>
            <remarks>
            The appearance will not be added as static content. 
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.Barcodes.BarcodeField">
            <summary>
            A barcode PDF form field is the base class for all barcodes.
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Barcodes.BarcodeField.defaultValue">
            <summary>
            The default value asociated with this field.
            </summary> 
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Barcodes.BarcodeField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Barcodes.BarcodeField.TextLocation">
            <summary>
            The used text location for this barcode
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code128BarcodeField">
            <summary>
            A Code128 Barcode PDF form field.
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code128BarcodeField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField">
            <summary>
            A Interleave 2 of 5 Barcode PDF form field. 
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField.Checksum">
            <summary>
            specifies if this  barcode includes a checksum.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField.WideNarrowRatio">
            <summary>
            Specifies the wide narrow ratio for this barcode 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code3of9BarcodeField">
            <summary>
            A Code39 Barcode PDF form field.  
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code3of9BarcodeField.Checksum">
            <summary>
            specifies if this  barcode includes a checksum.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code3of9BarcodeField.WideNarrowRatio">
            <summary>
            Specifies the wide narrow ratio for this barcode 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code3of9BarcodeField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.Barcodes.OneDimensionalBarcodeField">
            <summary>
            A OneDimensionalBarcode PDF form field is the base class for all 1D barcodes. 
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Barcodes.OneDimensionalBarcodeField.DataLength">
            <summary>
            The expected maximum number of characters
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.Barcodes.UnknownBarcodeField">
            <summary>
            An unknown bar code PDF form field. 
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.Barcodes.UnknownBarcodeField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.CalculateActionChangedEventHandler">
            <summary>
            Represents the method that handles the ValueField.CalculateActionChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField">
            <summary>
            A check box PDF form field. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.#ctor(System.String)">
            <summary>
            Create a new Check box field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.OnValue">
            <summary>
            The value for the field when it's in On state
            </summary>
            <remarks>
            Default value is 'Yes'.
            <para>Setting the OnValue value is supported for Classic PDF document only.</para>
            <para>Note that the Value will be changed also if the checkbox is currently checked.</para>
            <para>You may not set this value to 'Off'</para>
            <para>There must be at least 1 widget connected to this fields, otherwise a NotSupportedException will be raised.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.OffValue">
            <summary>
            The value for the field when it's in Off state
            </summary>
            <remarks>
            For classic PDF documents this value must be 'Off'.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.NeutralValue">
            <summary>
            The value for the field when it's in Neutral state (meaningful when HasNeutralState = true only)
            </summary>
            <remarks>
            For classic PDF documents setting this value is ignored.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.HasNeutralState">
            <summary>
            Whether the checkbox has a neutral state
            </summary>
            <remarks>
            For classic PDF documents this setting is always 'false'.
            Setting this value for non XFA documents has no meaning.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.CheckBoxValue">
            <summary>
            The strong typed value for this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.CheckBoxDefaultValue">
            <summary>
            The default value for this field
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.CheckBoxField.AppearanceProviderValue">
            <summary>
            This property will be used if a AppearanceProvide draws it's visuals.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.CheckState">
            <summary>
            The states for the check box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.CheckState.On">
            <summary>
            The checkbox is checked.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.CheckState.Off">
            <summary>
            The checkbox in unchecked.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.CheckState.Neutral">
            <summary>
            The checkbox is neutral.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.CheckState.Unknown">
            <summary>
            The checkbox value is not one of the three accepted values. Note: You cannot set properties to this value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.DateTimeField">
            <summary>
            A date time PDF form field. You cannot create an instance of this class. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            <para>This field type has no meaning in classic PDF documents. </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DateTimeField.Format">
            <summary>
            The data format 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DateTimeField.DateTimeValue">
            <summary>
            The strongtyped value for this field
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DateTimeField.DateTimeDefaultValue">
            <summary>
            The default value asociated with this field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.DateTimeField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DateTimeField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.DateTimeFormat">
            <summary>
            The data format the date time field use.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.DateTimeFormat.Date">
            <summary>
            Date only.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.DateTimeFormat.Time">
            <summary>
            Time only.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.DateTimeFormat.DateAndTime">
            <summary>
            Both Date and Time.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.DropDownListField">
            <summary>
            A drop down list PDF form field (also known as combo box). 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.#ctor(System.String)">
            <summary>
            Create a new drop down list field (also known as combobox).
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.Options">
            <summary>
            Contains all options from which a choice can be made. An option has both 
            a displayed name and an exported name, often they are the same.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.AllowTextEntry">
            <summary>
            Whether text can be entered, if false the value of one of the available Options must be entered 
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.SpellCheckAllowed">
            <summary>
            Specifies whether spell-checking is allowed on this field.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only. Please note that
            setting this value to true will not cause the text to be spell-checked. It just marks
            the field as eligible for spell-checking.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.DropDownListValue">
            <summary>
            The strong types Value
            </summary>
            <remarks>
            If no option is selected <see langword="null"/> is returned.
            If AllowCustomTextEntry is enabled and a custom entry is entered, <see langword="null"/> 
            is returned, please use the .Value property to get the custom value.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.DropDownListDefaultValue">
            <summary>
            The default value for this field
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.CustomDefaultValue">
            <summary>
            The default value for this field
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.getPublicValue(System.String)">
            <summary>
            Convert the passed pdf value (= on value) to the field value
            (= export value).
            </summary>
            <param name="pdfValue">A pdf (on) value.</param>
            <returns>The coresponding export value. See remarks below.</returns>
            <remarks>No matter whether we have an XFA document or a classic one,
            the field value is always the export value, and the stored value
            (the V entry) is always the "on" value.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.getPdfValue(System.String)">
            <summary>
            Convert the passed field value (= export value) to the value as
            stored in the pdf file.
            </summary>
            <param name="exportValue">A field (export) value.</param>
            <returns>The coresponding pdf value. See remarks below.</returns>
            <remarks>No matter whether we have an XFA document or a classic one,
            we the field value is always the export value, and the stored value
            (the V entry) is always the "on" value.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DropDownListField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.DropDownListFieldValidateValueEventArgs">
            <summary>
            Class containing data for the ValidateValue event for drop-down lists.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.DropDownListFieldValidateValueEventArgs.FieldValue">
            <summary>
            For comboboxes, the event value is the display
            value, while the field stores the corresponding export value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.Field">
            <summary>
            The base class for any PDF form field. 
            </summary>
            <remarks>
            You retrieve an existing field from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Forms.Fields.Field.PropertyChanged">
            <summary>
            Occurs when any property of the field has changed.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Forms.Fields.Field.FullNameChangeRequest">
            <summary>
            Fired when this field will change it's name.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Forms.Fields.Field.FullNameChangeCommit">
            <summary>
            Fired when this field has changed it's name.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.Field.#ctor(TallComponents.PDF.Layout.Forms.Fields.Field)">
            <summary>
            Create a field, based on an existing field (used for cloning).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.FullName">
            <summary>
            The fully qualified name for this field.
            </summary>
            <remarks>
            <para>Setting this property will only work if it is a classic PDF document (No Xfa document). For Xfa documents
            the returned field name is determined dynamically, as there can be fields with names
            name[0]..name[n] in Xfa. Removing one or more of such fields will result in renaming
            the remaining fields. This is currently only possible by setting the widget persistency to
            Flatten or Remove.</para>
            <para>Note: Setting this property is NOT thread safe.</para>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.ToolTip">
            <summary>
            The name of the field as used in the user interface. 
            </summary>
            <remarks>
            May be <see langword="null"/>.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.Widgets">
            <summary>
            The asociated widgets for this field.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.ReadOnly">
            <summary>
            Read-only state of this field.
            </summary>
            <remarks>
            Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.RequiredMode">
            <summary>
            The required mode for this field.
            </summary>
            <remarks>
            Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.Export">
            <summary>
            This field is included when the form is exported or submitted.
            </summary>
            <remarks>
            Default = true.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.MappingName">
            <summary>
            Used when exporting data from the document.
            </summary>
            <remarks>
            If <see langword="null"/>, the FullName is used.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.XfaInfo">
            <summary>
            Additional XFA specific information for this field.
            </summary>
            <remarks>
            Returns null for non-xfa / classic documents.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.Field.firePropertyChanged(System.String)">
            <summary>
            Fire the PropertyChanged event.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.Field.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.InternalDefinition">
            <summary>
            The InternalDefinition specified if the field is found in PDF objects and/or in the XFA template
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.XfaField">
            <summary>
            The corresponding Xfa field
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.PdfField">
            <summary>
            The corresponding PDF field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.FirstLineIndentation">
            <summary>
            First line indentation - defined in XFA template
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Field.FixedLineHeight">
            <summary>
            Fixed line height - defined in XFA template
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.FieldCollection">
            <summary>
            Collection of form fields.
            </summary>
            <remarks>
            This collection is non-creatable and can be obtained through the Fields property of Document and FormAction. 
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.Changed">
            <summary>
            Fired when this collection has changed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.Item(System.Int32)">
            <summary>
            Retrieve a field by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.Item(System.String)">
            <summary>
            Retrieve a field by the fully qualified name.
            </summary>
            <remarks>
            Returns the field with the fully qualified name if found, otherwise  <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.Count">
            <summary>
            Number of fields in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.Contains(System.String)">
            <summary>
            Check if the fully qualified name exists in this collection
            </summary>
            <returns>True is the collection contains the fully qualified name, false otherwise.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.FullNames">
            <summary>
            Returns all fully qualified names in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.Add(TallComponents.PDF.Layout.Forms.Fields.Field)">
            <summary>
            Add a field to this collection.
            </summary>
            <param name="field">The field to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.Remove(System.String)">
            <summary>
            Removes a field from this collection.
            </summary>
            <param name="fullName">The full name from the field to remove.</param>
            <remarks>Removing a field at a non-existing full name is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.Remove(TallComponents.PDF.Layout.Forms.Fields.Field)">
            <summary>
            Removes a field from this collection.
            </summary>
            <param name="field">The field to remove.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.Clear">
            <summary>
            Removes all fields from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.FieldsChangedEventArgs">
            <summary>
            Class containing data for the FieldCollection.Changed event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.FieldsChangedEventArgs.Added">
            <summary>
            Fields that have been added.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.FieldsChangedEventArgs.Removed">
            <summary>
            Fields that have been removed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.FieldsChangedEventArgs.Changed">
            <summary>
            Fields that has been changed (e.g. in dynamic xfa, the field name can be changed)
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.FieldsChangedEventHandler">
            <summary>
            Represents the method that handles the FieldCollection.Changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The fields changed event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor">
            <summary>
            A derived instance of FieldVisitor is passed to Field.Accept(...). This method
            calls one of the below FieldVisitor methods according to the type of field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.Field,System.Object)">
            <summary>
            Visit a field.
            </summary>
            <param name="field">The vistor must handle a field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            <see langword="null"/> is returned when not implementing this functionality.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.ValueField,System.Object)">
            <summary>
            Visit a value field.
            </summary>
            <param name="field">The vistor must handle a value field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.PushButtonField,System.Object)">
            <summary>
            Visit a push button field.
            </summary>
            <param name="field">The vistor must handle a push button field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.CheckBoxField,System.Object)">
            <summary>
            Visit a check box field.
            </summary>
            <param name="field">The vistor must handle a check box field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.DropDownListField,System.Object)">
            <summary>
            Visit a dropdown list field.
            </summary>
            <param name="field">The vistor must handle a dropdown list field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.ListBoxField,System.Object)">
            <summary>
            Visit a listbox field.
            </summary>
            <param name="field">The vistor must handle a listbox field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.PasswordField,System.Object)">
            <summary>
            Visit a password field.
            </summary>
            <param name="field">The vistor must handle a password field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.RadioButtonField,System.Object)">
            <summary>
            Visit a radiobutton field.
            </summary>
            <param name="field">The vistor must handle a radiobutton field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.SignatureField,System.Object)">
            <summary>
            Visit a signature field.
            </summary>
            <param name="field">The vistor must handle a signature field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.TextField,System.Object)">
            <summary>
            Visit a text field.
            </summary>
            <param name="field">The vistor must handle a text field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.UnknownField,System.Object)">
            <summary>
            Visit a unknown field.
            </summary>
            <param name="field">The vistor must handle a unknown field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.NumericField,System.Object)">
            <summary>
            Visit a numeric field.
            </summary>
            <param name="field">The vistor must handle a numeric field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.ImageField,System.Object)">
            <summary>
            Visit a image field.
            </summary>
            <param name="field">The vistor must handle a image field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.DateTimeField,System.Object)">
            <summary>
            Visit a date/time field.
            </summary>
            <param name="field">The vistor must handle a date/time field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.Barcodes.BarcodeField,System.Object)">
            <summary>
            Visit a barcode field.
            </summary>
            <param name="field">The vistor must handle a barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code128BarcodeField,System.Object)">
            <summary>
            Visit a code 128 barcode field.
            </summary>
            <param name="field">The vistor must handle a code 128 barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the barcode field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField,System.Object)">
            <summary>
            Visit a code 2 of 5 interleaved barcode field.
            </summary>
            <param name="field">The vistor must handle a code 2 of 5 interleaved barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the barcode field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.Barcodes.Code3of9BarcodeField,System.Object)">
            <summary>
            Visit a code 3 of 9 barcode field.
            </summary>
            <param name="field">The vistor must handle a code 3 of 9 barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the barcode field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Layout.Forms.Fields.Barcodes.UnknownBarcodeField,System.Object)">
            <summary>
            Visit a unknown barcode field.
            </summary>
            <param name="field">The vistor must handle a unknown barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the barcode field overload.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.FormatValueEventArgs">
            <summary>
            Class containing data for the FormatValue event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.FormatValueEventArgs.Value">
            <summary>
            The value that needs to be updated for formatting.
            </summary>
            <remarks>
            This value can be updated to reflect the format operation.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.FormatValueEventHandler">
            <summary>
            Represents the method that handles the FormatValue event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The format value event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.FullNameChangeEventArgs">
            <summary>
            Class containing data for the FullNameChangeRequest and FullNameChangeRequestCommit event.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.FullNameChangeEventHandler">
            <summary>
            Represents the method that handles the FullNameChangeRequest and FullNameChangeRequestCommit event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The full name change event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.IFieldResolver">
            <summary>
            An field resolver is used to resolve a Base.Object to an existing (derived)field.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.ImageField">
            <summary>
            An image PDF form field. You cannot create an instance of this class.
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            <para>This field type has no meaning in classic PDF documents. </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ImageField.EmbedImageData">
            <summary>
            Specifies if the image data is embedded or if a URI is stored.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ImageField.Sizing">
            <summary>
            The mapping between the image size and the field size.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ImageField.ImageValue">
            <summary>
            The strongtyped value for this field (the setter can be used if EmbedImageData = true only)
            </summary>
            <remarks>
            The Value setter can be used when EmbedImageData = false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ImageField.ImageDefaultValue">
            <summary>
            The default value asociated with this field. (the setter can be used if EmbedImageData = true only)
            </summary>
            <remarks>
            The DefaultPathValue setter can be used when EmbedImageData = false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ImageField.DefaultPathValue">
            <summary>
            The default value asociated with this field. (valid if EmbedImageData = false only)
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.ImageField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ImageField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.ImageSizing">
            <summary>
            The mapping between the image size and the widget (field) size.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.ImageSizing.Stretch">
            <summary>
            Stretch the image to perfecly fit (the aspect ratio will be ignored).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.ImageSizing.Scale">
            <summary>
            Fit the image with respecting the aspect ratio.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.ImageSizing.Actual">
            <summary>
            Use the actual image size (note that this can result in clipped or overflowed images).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.ListBoxField">
            <summary>
            A list box PDF form field.
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.ListBoxField.#ctor(System.String)">
            <summary>
            Create a new List box field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ListBoxField.MultiSelect">
            <summary>
            More than one of the option items may be selected simultaneously. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ListBoxField.Options">
            <summary>
            Contains all options from which a choice can be made. An option has both 
            a displayed name and an exported name, often they are the same.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ListBoxField.ListBoxValue">
            <summary>
            The strong types Value
            </summary>
            <remarks>
            If no option is selected an empty array is returned.
            <para>
            Setting multi options is supported in classic PDF documents only.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ListBoxField.ListBoxDefaultValue">
            <summary>
            The default value for this field.
            </summary>
            <remarks>
            If no default option is selected an empty array is returned.
            <para>
            Notice: Multiple selection is not supported, so at max 1 item will be returned / may be set.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.ListBoxField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ListBoxField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.NumberFormat">
            <summary>
            The data format the number field use.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.NumberFormat.Float">
            <summary>
            float, any number.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.NumberFormat.Decimal">
            <summary>
            Decimal is like the float, but the number of digits before and after the the decimal point can be specified.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.NumberFormat.Integer">
            <summary>
            Only non-fractal numbers are allowed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.NumericField">
            <summary>
            A Numeric PDF form field. You cannot create an instance of this class. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.NumericField.Format">
            <summary>
            The data format 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.NumericField.NumericValue">
            <summary>
            The strongtyped value for this field
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.NumericField.NumericDefaultValue">
            <summary>
            The default value asociated with this field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.NumericField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.NumericField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.PasswordField">
            <summary>
            A Password PDF form field.
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.PasswordField.#ctor(System.String)">
            <summary>
            Create a new password field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.PasswordField.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new password field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PasswordField.DisplayCharacter">
            <summary>
            The Character (or string) used to hide the password
            </summary>
            <remarks>
            Classic PDF document used '*' by default and setting this property has no effect.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.PasswordField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PasswordField.FormattedValue">
            <summary>
            The Formatted Value. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.PdfField">
            <summary>
            A PDF form field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.PdfField.#ctor(TallComponents.PDF.Base.Forms.TerminalField,System.String)">
            <summary>
            Create a new PdfField
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.PdfField.#ctor(TallComponents.PDF.Base.DocumentStructure.Document,TallComponents.PDF.Base.Forms.TerminalField,System.String)">
            <summary>
            Create an existing PdfField
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.FullName">
            <summary>
            Fully qualified name of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.PartialName">
            <summary>
            Partial name of this field.
            </summary>
            <remarks>
            The partial name is the right part after the last dot (.) if any of the fully qualified name, otherwise the full name.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.AlternativeName">
            <summary>
            The name of the field as used in the user interface.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.MappingName">
            <summary>
            Used when exporting data from the document.
            </summary>
            <remarks>
            If <see langword="null"/>, the FullName is used.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.PdfWidgets">
            <summary>
            Contains all widgets from this field. An widget is the visual representation from this field.
            One field can have multiple representations placed on the same or different pages.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.Options">
            <summary>
            Contains all options from which a choice can be made. An option has both 
            a displayed name and an exported name, often they are the same.
            Only meaningful if type is ListBox, ComboBox, Checkbox or RadioButton.
            Assign the Name property of an option to the Value property of this field to select a state.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.FieldType">
            <summary>
            Type of field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.Value">
            <summary>
            The current or new value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.DefaultValue">
            <summary>
            The current or new default value of this field.
            </summary>
            <remarks>
            Note that rich-text field should be formatted without formatting.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.Values">
            <summary>
            The current or new values of this field.
            (meaningful only for list box, with MultiSelect enabled).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.ReadOnly">
            <summary>
            Read-only state of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.Required">
            <summary>
            Field is required.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.NoExport">
            <summary>
            This field is not included when the form is submitted.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.DoNotSpellCheck">
            <summary>
            This field is not spell checked.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.Multiline">
            <summary>
            Text is multiline (meaningful only for text box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.DoNotScroll">
            <summary>
            Long text must not be scrolled (meaningful only for text box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.RichText">
            <summary>
            Text is rich text (meaningful only for text box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.Password">
            <summary>
            Text represents a password (meaningful only for text box).
            If set, input is echoed as special characters such as asterisks or bullets.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.EditableCombo">
            <summary>
            A new text can be entered in the combo box.
            (meaningful only for combo box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.MultiSelect">
            <summary>
            More than one of the option items may be selected simultaneously
            (meaningful only for list box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.CommitOnSelChange">
            <summary>
            The field value gets committed when the selection changes
            (meaningful only for list boxes and combo boxes)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.Comb">
            <summary>
            Meaningful only if the MaxLength entry is present in the text field
            If set, the field is automatically divided into as many equally
            spaced positions, or combs, as the value of MaxLen, and the text is laid out
            into those combs.
            </summary>
            <remarks>
            Applicable for text-field only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfField.MaxLength">
            <summary>
            The maximum length of the field's text, in characters (meaningful only for text box).
            </summary>
            <remarks>
            Returns -1 for unlimited (not specified).
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.PdfFieldCollection">
            <summary>
            Collection of form fields. Associated with a document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfFieldCollection.Item(System.Int32)">
            <summary>
            Retrieve a field by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.PdfFieldCollection.Count">
            <summary>
            Number of fields.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.PdfFieldType">
            <summary>
            All field types.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.PdfFieldType.TextBox">
            <summary>
            A single or multiline text box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.PdfFieldType.PushButton">
            <summary>
            A push button.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.PdfFieldType.CheckBox">
            <summary>
            A two-state check box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.PdfFieldType.RadioButton">
            <summary>
            A two-state button that represents a selection.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.PdfFieldType.ListBox">
            <summary>
            A list of options from which one or more can be selected.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.PdfFieldType.ComboBox">
            <summary>
            A drop-down list of options from which one can be selected or a new option can be entered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.PdfFieldType.Signature">
            <summary>
            A signature, e.g. to state agreement.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.PdfFieldType.Unknown">
            <summary>
            A field not know to this component.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.PushButtonField">
            <summary>
            A push button PDF form field.  
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.PushButtonField.#ctor(System.String)">
            <summary>
            Create a new Push Button field. 
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.PushButtonField.#ctor(TallComponents.PDF.Layout.Forms.Fields.Field)">
            <summary>
            Create a new field, based on an existing field (used for cloning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.PushButtonField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField">
            <summary>
            A radio button PDF form field. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField.#ctor(System.String)">
            <summary>
            Create a new Radio Button field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField.Options">
            <summary>
            Contains all options from which a choice can be made. An option has both 
            an exported name and a reference to the associated widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField.RadioButtonValue">
            <summary>
            The value for this field.
            </summary>
            <remarks>
            Returns <see langword="null"/> if no Option is selected.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField.RadioButtonDefaultValue">
            <summary>
            The default value for this field.
            </summary>
            <remarks>
            Returns <see langword="null"/> if no Option is selected.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField.getPublicValue(System.String)">
            <summary>
            Convert the passed pdf value (= on value) to the field value
            (= export value).
            </summary>
            <param name="pdfValue">A pdf (on) value.</param>
            <returns>The coresponding export value. See remarks below.</returns>
            <remarks>No matter whether we have an XFA document or a classic one,
            the field value is always the export value, and the stored value
            (the V entry) is always the "on" value.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField.getPdfValue(System.String)">
            <summary>
            Convert the passed field value (= export value) to the value as
            stored in the pdf file.
            </summary>
            <param name="exportValue">A field (export) value.</param>
            <returns>The coresponding pdf value. See remarks below.</returns>
            <remarks>No matter whether we have an XFA document or a classic one,
            we the field value is always the export value, and the stored value
            (the V entry) is always the "on" value.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField.CanBeDeselected">
            <summary>
            Whether this field can be deselected. (like the CheckBox field)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField.AppearanceProviderValue">
            <summary>
            This property will be used if a AppearanceProvide draws it's visuals.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.RadioButtonField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption">
            <summary>
            A PDF form field option. 
            Radio button options are returned by the Options property of the RadioButtonField class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption.ExportName">
            <summary>
            Name as exported. (assign this string to the field's  Value) 
            </summary>
            <remarks>
            Setting this value is supported for classic document only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption.Widget">
            <summary>
            The associated radio button widget for this option.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.RadioButtonOption.ToString">
            <summary>
            Returns a System.String that represents the current RadioButtonOption.
            </summary>
            <returns>A System.String that represents the current RadioButtonOption.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.RequiredMode">
            <summary>
            The required mode for a field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.RequiredMode.Optional">
            <summary>
            This field is optional.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.RequiredMode.Recommended">
            <summary>
            This field is recommended. Note: This setting cannot be used in classic PDF documents.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.RequiredMode.Required">
            <summary>
            This field is required.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.RichTextHelper">
            <summary>
            A Rich Text helper class for the TextField. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.LockAction">
            <summary>
            Indicates the set of fields that should be locked.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.LockAction.All">
            <summary>
            All fields in the document
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.LockAction.Include">
            <summary>
            All fields specified in the FieldNames array
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.LockAction.Exclude">
            <summary>
            All fields except those specified in the FieldNames array
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.LockPermission">
            <summary>
            Indicates the access permissions granted for this document.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.LockPermission.P1">
            <summary>
            No changes to the document are permitted; any change to the document invalidates the signature.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.LockPermission.P2">
            <summary>
            Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.LockPermission.P3">
            <summary>
            Permitted changes are the same as for 2, as well as annotation creation, deletion, and modification; other changes invalidate the signature.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.Lock">
            <summary>
            Specifies a set of form fields to be locked when this signature field is signed
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.Lock.#ctor">
            <summary>
            Creates a default instance of the Lock object
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Lock.Action">
            <summary>
            Indicates the set of fields that should be locked.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Lock.Permission">
            <summary>
            The access permissions granted for this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.Lock.FieldNames">
            <summary>
            A set of field names in accordance with the Action field
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.SignatureField">
            <summary>
            A signature PDF form field. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.SignatureField.#ctor(System.String)">
            <summary>
            Create a new Signature field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="E:TallComponents.PDF.Layout.Forms.Fields.SignatureField.SignatureChanged">
            <summary>
            Fired after the signature has changed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.SignatureField.SignatureHandler">
            <summary>
            The Signature handler which sign this field.
            </summary>
            <remarks>
            If <see langword="null"/> the signature field will be added for further prossessing.
            You may specify one field with a signature handler only (will be checked at write-time). 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.SignatureField.Location">
            <summary>
            The CPU host name or physical location of signing. 
            </summary>
            <remarks>
            Will be updated in the document if a SignatureHandler is specified only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.SignatureField.Reason">
            <summary>
            The reason for the signing, such as 'I Agree...'.
            </summary>
            <remarks>
            Will be updated in the document if a SignatureHandler is specified only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.SignatureField.ContactInfo">
             <summary>
             Information provided by the signer to enable a recipient to contact the signer to verify the signature;
             for example, a phone number.
             </summary>
             <remarks>
            Will be updated in the document if a SignatureHandler is specified only.
             </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.SignatureField.getCertificatesFromSignature(TallComponents.PDF.Base.DigitalSignatures.Signature)">
            <summary>
            Ectracts certificates from the Cert property of a signature dictionary.
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.SignatureField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection">
            <summary>
            Collection of form fields. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection.#ctor(TallComponents.PDF.Base.Object,TallComponents.PDF.Layout.Forms.Fields.IFieldResolver)">
            <summary>
            Creates a new field collection, based on the given object.
            </summary>
            <param name="obj">The object with contains the base information for this collection.</param>
            <param name="fieldResolver">Needed to resolve existing field.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection.Item(System.Int32)">
            <summary>
            Retrieve a field by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection.Item(System.String)">
            <summary>
            Retrieve a field by the fully qualified name.
            </summary>
            <remarks>
            Returns the field with the fully qualified name if found, otherwise  <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection.Count">
            <summary>
            Number of fields.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection.Add(TallComponents.PDF.Layout.Forms.Fields.Field)">
            <summary>
            Add a field to this collection.
            </summary>
            <param name="field">The field to add.</param>
            <remarks>
            This method is not supported for XFA documents.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection.Remove(TallComponents.PDF.Layout.Forms.Fields.Field)">
            <summary>
            Removes a field from this collection.
            </summary>
            <param name="field">The field to remove.</param>
            <remarks>
            This method is not supported for XFA documents.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection.Clear">
            <summary>
            Removes all fields from this collection.
            </summary>
            <remarks>
            This method is not supported for XFA documents.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.StaticFieldCollection.isNameAvailable(System.String)">
            <summary>
            returns null is available otherwise the message why not.
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.TextField">
            <summary>
            A text PDF form field. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.TextField.#ctor(System.String)">
            <summary>
            Create a new Text field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.TextField.#ctor(TallComponents.PDF.Layout.Forms.Fields.ValueField)">
            <summary>
            Create a field, based on an existing field (used for cloning).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.TextField.defaultValue">
            <summary>
            The default value asociated with this field.
            </summary>
            <remarks>
            In classic PDF documents rich text fields will store the default value as 
            non rich text. You should however set and get rich-text strings.
            One exception is that the empty string will be returned and excepted as well.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.TextField.RichText">
            <summary>
            Specifies whether the text may include styling (also known as rich text)
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.TextField.Multiline">
            <summary>
            Specifies whether the text span multiple lines
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.TextField.DoNotScroll">
            <summary>
            Specifies whether long text must be scrolled.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.TextField.SpellCheckAllowed">
            <summary>
            Specifies whether spell-checking is allowed on this field.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only. Please note that
            setting this value to true will not cause the text to be spell-checked. It just marks
            the field as eligible for spell-checking.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.TextField.Comb">
            <summary>
            If set, the field is automatically divided into as many equally
            spaced positions, or combs, as the value of MaxLength, and the text is laid out
            into those combs.
            </summary>
            <remarks>
            This property is meaningful only if MaxLength != -1 (meaning not resticted).
            <para>
            Setting this property is supported in classic PDF documents only.
            </para>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.TextField.MaxLength">
            <summary>
            The maximum characters that may be entered into this text field.
            </summary>
            <remarks>
            -1 means not restricted.
            <para>
            Setting this property is supported in classic PDF documents only.
            </para>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.TextField.FormattedValue">
            <summary>
            The Formatted Value. 
            </summary>
            <remarks>
            for XFA documents the Picture-Clause will be executed.
            For classic document the FormatAction (JavaScript code) is executed (depending on document.ScriptBehavior setting).
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.TextField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.TextField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.UnknownField">
            <summary>
            An unknown PDF form field. You cannot create an instance of this class. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.UnknownField.Accept(TallComponents.PDF.Layout.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.ValidateValueEventArgs">
            <summary>
            Class containing data for the ValidateValue event
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValidateValueEventArgs.Value">
            <summary>
            The value that needs to be updated in the validation process.
            </summary>
            <remarks>
            This value can be updated to reflect the validate operation.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValidateValueEventArgs.Cancel">
            <summary>
            A boolean to specify that the validation process must cancel the update value action.
            </summary>
            <remarks>
            Default = false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValidateValueEventArgs.FieldValue">
            <summary>
            The value as stored in the PDF field. By default, this is the same as the
            value of the event. For comboboxes however, the event value is the display
            value, while the field stores the corresponding export value.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValidateValueEventArgs.Change">
            <summary>
            The "change" value. This indicates in what way the value was changed. This is used
            internally, to set the change property of the validate event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValidateValueEventArgs.ChangeEx">
            <summary>
            The export value that corresponds to the change value, if any. Null if the value
            has no export value. This value is used internally to initialise the changeEx event
            field.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.ValidateValueEventHandler">
            <summary>
            Represents the method that handles the ValidateValue event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The validate value event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.ValueChangedEventArgs">
            <summary>
            Class containing data for the ValueChanged event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueChangedEventArgs.Value">
            <summary>
            The new Value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.ValueChangedEventHandler">
            <summary>
            Represents the method that handles the ValueChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The value changed event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.ValueField">
            <summary>
            A PDF form field with a Value. 
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Forms.Fields.ValueField.CalculateActionChanged">
            <summary>
            Event fired after a calculate action has been changed.
            </summary>
            <remarks>
            Fired when the CalculateAction setter is called only.
            <para>
            Not fired when the CalculateAction internally is changed (new javascript is assigned).
            </para>
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Forms.Fields.ValueField.ValueChanged">
            <summary>
            Event fired after a value is succesful updated.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Forms.Fields.ValueField.FormatValue">
            <summary>
            Event fired to format the field's value.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.Forms.Fields.ValueField.ValidateValue">
            <summary>
            Event fired to validate any new value.
            </summary>
            <remarks>
            You can both update the value or cancel the complete update.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.ValueField.#ctor(TallComponents.PDF.Layout.Forms.Fields.ValueField)">
            <summary>
            Create a field, based on an existing field (used for cloning).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.Value">
            <summary>
            The value associated with this field.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.DefaultValue">
            <summary>
            The default value associated with this field.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.FormattedValue">
            <summary>
            The Formatted Value. 
            </summary>
            <remarks>
            for XFA documents the Picture-Clause will be executed.
            For classic document the FormatAction (JavaScript code) is executed (depending on document.ScriptBehavior setting).
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.rawValueNoDefault">
            <summary>
            The value of this field. If it's null, it's not replaced by DefaultValue as it's done in rawValue.
            </summary>
            <remarks>This property is required in dynamic XFA's JavaScript calculations (if the field has no value, it should return null instead of the DefaultValue.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.rawValue">
            <summary>
            The value of this field (actually, this is the same as "Value").
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.pdfValue">
            <summary>
            The value as we store it in the pdf field. For XFA documents this is the export value. For
            classic documents this is the "on" value.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.ValueField.ResetValue">
            <summary>
            Reset the value to the default value.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.FormatAction">
            <summary>
            The action that will be executed before a field is displayed.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.ValidateAction">
            <summary>
            An action that will be executed for field value validation (when setting the value).
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.KeyStrokeAction">
            <summary>
            An action that will be executed when a user types a key-stoke (or an other item is selected from a list).
            </summary>
            <remarks>
            This property has no meaning for CheckBoxField, RadioButtonField and XFA specific field types. 
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.CalculateAction">
            <summary>
            An action executed the reflect changes in other field value changes. 
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.ValueField.getPublicValue(System.String)">
            <summary>
            Returns the public field value for a pdf value.
            </summary>
            <param name="pdfValue">The pdf value.</param>
            <returns>The corresponding field value.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.ValueField.getPdfValue(System.String)">
            <summary>
            Returns the pdf value from a field value.
            </summary>
            <param name="value">the field value.</param>
            <returns>The corresponding pdf value.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.ValueField.ReadOnlyValue">
            <summary>
            This value will prevent this field value from being updated.
            </summary>
            <remarks>This is not the the same as the PDF readonly flag of the field, which
            only prevents users from changing the field. The ReadOnlyValue flag is used to
            avoid stack overflows when javascript validation/keystroke handlers are attempting
            to update a field directly.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.XfaBarcodeType">
            <summary>
            The bar code pattern 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaBarcodeType.Code2Of5Interleaved">
            <summary>
            Code 2 of 5 Interleaved, as defined in ANSI/AIM BC2-1995, USS Interleaved 2-of-5.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaBarcodeType.Code39">
            <summary>
            Code39 (also known as code 3 of 9), as defined in ANSI/AIM BC1-1995, USS Code39.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaBarcodeType.Code128">
            <summary>
            Code 128, as defined in ANSI/AIM BC4-1995, ISS Code 128 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaBarcodeType.Unknown">
            <summary>
            A barcode type not known to this component.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.XfaDataBinding">
            <summary>
            The data binding used in the XFA section of this field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaDataBinding.None">
            <summary>
            No data binding is used for this field. Getting a value is unspecified. Setting an value has no effect.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaDataBinding.Normal">
            <summary>
            The normal (Once) databinding is used. Getting and Setting a value is supported, if XfaInfo.HasDataConnections is false, otherwise unspecified.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaDataBinding.DataRef">
            <summary>
            The data binding uses a data reference. Getting a value is unspecified. Setting a value will be ignored.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaDataBinding.Global">
            <summary>
            The global data binding is used for this field. Getting a value is unspecified. Setting a value will be ignored.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaDataBinding.Unknown">
            <summary>
            This Xfa field has an unknown data binding. Getting a value is unspecified. Setting a value will be ignored.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.XfaField">
            <summary>
            XfaField is an abstraction for handling the XFA fields
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaField.Name">
            <summary>
            The partial name for this field (excluding Index)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaField.FullName">
            <summary>
            The full name for this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaField.FieldType">
            <summary>
            The XFA field type
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaField.Value">
            <summary>
            The value found in XFA. (current/actual)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaField.XfaSubFieldCount">
            <summary>
            For internal usage ONLY
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType">
            <summary>
            The field type found in the XFA section 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.Barcode">
            <summary>
            A barcode.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.Button">
            <summary>
            A push button.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.CheckBox">
            <summary>
            A two-state check box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.RadioButton">
            <summary>
            A two-state button that represents a selection.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.ListBox">
            <summary>
            A list of options from which one or more can be selected.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.DropDownList">
            <summary>
            A drop-down list of options from which one can be selected or a new option can be entered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.DateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.Image">
            <summary>
            
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.Numeric">
            <summary>
            
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.Signature">
            <summary>
            A signature, e.g. to state agreement.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.Text">
            <summary>
            A single or multiline text box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.Forms.Fields.XfaFieldType.Password">
            <summary>
            A password text box.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.XfaInfo">
            <summary>
            This class contains additional XFA specific information for this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaInfo.DataBinding">
            <summary>
            Returns the type of DataBinding this XFA fields use. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaInfo.DataBindingPath">
            <summary>
            Returns the data binding path this XFA field use.
            </summary>
            <remarks>Usefull when DataBinding = XfaDataBinding.DataRef only, otherwise null/nothing will be returned.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaInfo.DisplayPattern">
            <summary>
            The display pattern accociated with this field.
            </summary>
            <remarks>
            Returns null if not defined or not applicable.
            <para>XFA: format picture clause.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaInfo.ValidationPattern">
            <summary>
            The validation pattern accociated with this field.
            </summary>
            <remarks>
            Returns null if not defined or not applicable.
            <para>XFA: validate picture clause.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaInfo.DataSomExpression">
            <summary>
            The data som expression for this field.
            </summary>
            <remarks>
            In the exported xdp file the data are stored under this key.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaInfo.DataPattern">
            <summary>
            The data pattern accociated with this field.
            </summary>
            <remarks>
            Returns null if not defined or not applicable.
            <para>XFA: bind picture clause.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaInfo.EditPattern">
            <summary>
            The edit pattern accociated with this field.
            </summary>
            <remarks>
            Returns null if not defined or not applicable.
            <para>XFA: ui picture clause.</para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Forms.Fields.XfaSubField">
            <summary>
            XfaSubField is an abstraction for handling the XFA field 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.Name">
            <summary>
            The partial name for this field, as described in XFA (excluding Index).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.PartialName">
            <summary>
            The partial name for this field as described in PDF (including Index).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.Index">
            <summary>
            The field index, if not used -1 is returned.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.FullName">
            <summary>
            The full name for this field as described in PDF. This includes the index of the field in case
            there are multiple with the same name.
            </summary>
            <remarks>
            The full name is recalculated everytime. 
            This makes sure that deleted items are not taken into account for the name 
            (indexes are automatically updated in the full name) 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.DataSomExpression">
            <summary>
            The data som expression for this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.FieldType">
            <summary>
            The XFA field type
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.BarcodeType">
            <summary>
            The type of barcode (only valid if FieldType is Barcode).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.BarcodeTypeString">
            <summary>
            The type of barcode (only valid if FieldType is Barcode).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.Barcode">
            <summary>
            The barcode class (only valid if FieldType is Barcode).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.Value">
            <summary>
            The value found in XFA. (current/actual)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.Left">
            <summary>
            The X value  found in XFA.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.Top">
            <summary>
            The Y value  found in XFA.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.InvalidateNameCaches">
            <summary>
            Invalidates the cached full name and DataSomExpression.
            </summary>
            <remarks>Both values depend on the position of the element in the underlying XML data. It is expensive to compute them, hence the
            cached. If however the XML data changes structurally, these cached will need to be invalidated. This is currently only needed during/after
            field flattening, as there is no other way to remove Xfa fields. Note that we do not support adding new Xfa fields.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Forms.Fields.XfaSubField.BindedDataNode">
            <summary>
            In XFA, when field's Bind.Match="dataref", this index says which instance of data nodes is bound to the field.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.JavaScript.JavaScript">
            <summary>
            JavaScript Code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScript.#ctor">
            <summary>
            Create a new JavaScript object, without any code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScript.#ctor(System.String)">
            <summary>
            Create a new JavaScript object, with the given code.
            </summary>
            <param name="javaScriptCode">The initial javascript code.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScript.Text">
            <summary>
            The JavaScript Code.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection">
            <summary>
            JavaScript defined at document level. You cannot create an instance of this class. Instead you retrieve an existing JavaScriptCollection object
            from the JavaScript property of the Document class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Count">
            <summary>
            The number of JavaScript element in this collection
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.ScriptNames">
            <summary>
            The script names in this document.
            </summary>
            <para>
            The script names are case sensitive.
            </para>
        </member>
        <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Item(System.String)">
            <summary>
            The JavaScript associated with the given name.
            </summary>
            <param name="name">The script name.</param>
            <returns>A JavaScript object with the JavaScript code in it, <see langword="null"/> if the name cannot be found.</returns>
            <remarks>
            Setting a JavaScript with an existing name, will override the existing item.
            <para>
            The name is case sensitive, you may use ASCII character only.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Add(TallComponents.PDF.Layout.JavaScript.JavaScript)">
            <summary>
            Adds a (Named)JavaScript to the javascript collection.
            </summary>
            <remarks>If an unnamed javascript is added to the collection, a name will be 
            created with the following format: 
            <para>- Fixed component: TC-JS-AN-</para>
            <para>- Sequential hex-number: xxxx</para>
            (Note: performance can be affected when a lot of unnamed scripts are added.)</remarks>
            <param name="script">The script to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Add(System.String,TallComponents.PDF.Layout.JavaScript.JavaScript)">
            <summary>
            Add a javaScript with the given name.
            </summary>
            <param name="name">The name to use.</param>
            <param name="javaScript">The JavaScript to add.</param>
            <para>
            The name is case sensitive, you may use ASCII character only.
            </para>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Remove(System.String)">
            <summary>
            Removes the JavaScript object with the given name.
            </summary>
            <param name="name">The name to remove.</param>
            <remarks>
            Nothing happens when the name cannot be found.
            <para>
            The name is case sensitive.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Exists(System.String)">
            <summary>
            Check if the given name exists in the current collection.
            </summary>
            <param name="name">The script name to check.</param>
            <returns>True if found, false otherwise</returns>
            <para>
            The name is case sensitive.
            </para>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Item(System.Int32)">
            <summary>
            The JavaScript associated with the given index.
            </summary>
            <param name="index">The zero-base index.</param>
            <returns>A JavaScript object with the JavaScript code in it.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.JavaScript.JavaScriptEnumerator">
            <summary>
            A custom enumerator to iterate over all items in the JavaScript collection. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the JavaScript collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptEnumerator.Current">
            <summary>
            Gets the current element in the JavaScript collection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.JavaScript.NamedJavaScript">
            <summary>
            Named JavaScript Code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.NamedJavaScript.#ctor">
            <summary>
            Create a new NamedJavaScript object, without any code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.NamedJavaScript.#ctor(System.String)">
            <summary>
            Create a new named NamedJavaScript object, without any code.
            </summary>
            <param name="name">The name for this named java script.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.JavaScript.NamedJavaScript.#ctor(System.String,System.String)">
            <summary>
            Create a new named NamedJavaScript object, with defined code.
            </summary>
            <param name="name">The name for this named java script.</param>
            <param name="script">The java script to assign.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.JavaScript.NamedJavaScript.Name">
            <summary>
            Get or set the name of this JavaScript.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.ColumnCollection">
            <summary>
            Contains the column definitions for the pages in the section.
            </summary>
            <remarks>
            The Columns class contains all columns that are associated with a section.
            A section may contain 1 or more columns.
            Paragraphs are rendered inside the columns from top to bottom.
            from left to right.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.#ctor">
            <summary>
            Initialize a new instance of the ColumnCollection class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.Add(TallComponents.PDF.Layout.Column)">
            <summary>
            Add a column to the collection.
            </summary>
            <remarks>
            Adds the given column to the collection.
            </remarks>
            <param name="column">Add this column.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.AddRange(TallComponents.PDF.Layout.ColumnCollection)">
            <summary>
            Adds the elements of a ColumnCollection to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="columns">The ColumnCollection whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.AddRange(TallComponents.PDF.Layout.Column[])">
            <summary>
            Adds the elements of an array of columns to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="columns">The array of columns whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.Clear">
            <summary>
            Removes all columns from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.Contains(TallComponents.PDF.Layout.Column)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Column">Column</see> is in the <see cref="T:TallComponents.PDF.Layout.ColumnCollection">ColumnCollection</see>.
            </summary>
            <param name="column">The <see cref="T:TallComponents.PDF.Layout.Column"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Column"/> is found in this <see cref="T:TallComponents.PDF.Layout.ColumnCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="column"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="column"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.IndexOf(TallComponents.PDF.Layout.Column)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Column">Column</see> in the <see cref="T:TallComponents.PDF.Layout.ColumnCollection">ColumnCollection</see>.
            </summary>
            <param name="column">The <see cref="T:TallComponents.PDF.Layout.Column"/> to locate in the <see cref="T:TallComponents.PDF.Layout.ColumnCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Column"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.Insert(System.Int32,TallComponents.PDF.Layout.Column)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Column"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.ColumnCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Column"/> should be inserted.</param>
            <param name="column">The <see cref="T:TallComponents.PDF.Layout.Column"/> to be insert.</param>
            <remarks>
            The <paramref name="column"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="column"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.Remove(TallComponents.PDF.Layout.Column)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Column">Column</see> from this <see cref="T:TallComponents.PDF.Layout.ColumnCollection">ColumnCollection</see>.
            </summary>
            <param name="column">The column to remove.</param>
            <remarks>
            The <paramref name="column"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="column"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Column">Column</see> from the <see cref="T:TallComponents.PDF.Layout.ColumnCollection">ColumnCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Column"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.ColumnCollection.Count">
            <summary>
            The number of columns in this colllection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.ColumnCollection.Spacing">
            <summary>
            Get or set the column spacing equally and distrutes width evenly.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.ColumnCollection.Width">
            <summary>
            Get or set the column width equally and distrutes space evenly.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.ColumnCollection.Item(System.Int32)">
            <summary>
            Get a column by 0-based index.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.ColumnCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.CrossreferenceSection">
            <summary>
            A section that can generate a list of crossreferences.
            </summary>
            <remarks>
            Use the <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection"/> to generate a table of contents, a list of tables, 
            or any other list of paragraphs.
            <para>Implement a handler for the <see cref="E:TallComponents.PDF.Layout.CrossreferenceSection.ComposeEntry"/> event to render an entry for each paragraph.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.CrossreferenceSection.#ctor">
            <summary>
            Initialize a new instance of the CrossreferenceSection class.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layout.CrossreferenceSection.ComposeEntry">
            <summary>
            Occures for every paragraph in the document.
            </summary>
            <remarks>
            This event allows you to add content to the section that represents the paragraph. This can be anything, e.g. a simple text paragraph, 
            a table row or nothing.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.CrossreferenceSection.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Occurs during the Compose phase of PDF generation. 
            </summary>
            <remarks>
            Iterates over all paragraphs in the main flow of all sections in 
            the document and fires the <see cref="E:TallComponents.PDF.Layout.CrossreferenceSection.ComposeEntry"/> event for each paragraph it finds.
            </remarks>
            <param name="doc">The document that this section belongs to.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.CrossreferenceSection.HandleParagraphs(TallComponents.PDF.Layout.Paragraphs.ParagraphCollection,System.Collections.ArrayList)">
            <summary>
            Itterates through all paragraphs and raises the ComposeEntry-event.
            </summary>
            <remarks>Also (recursively) checks tables for paragraphs.</remarks>
            <param name="paragraphs">The ParagraphCollection to search.</param>
            <param name="handled">A list of already handled paragraphs to prevent looping.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.EndPageEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Section.EndPage">EndPage</see> event of a <see cref="T:TallComponents.PDF.Layout.Section">Section</see>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.PageNumber">
            <summary>
            Get the page number of this page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.LastPage">
            <summary>
            Get if this is the last page for this section.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.BackgroundAreas">
            <summary>
            Get the collection of areas to add to the background of this page.
            </summary>
            <remarks>
            These area's will be rendered below the main content of the page (if any).
            <para>Area's added here will be rendered on top of BackgroundAreas previously added either in the main flow or in the StartPage event.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.ForegroundAreas">
            <summary>
            Collection of areas to add to the foreground of this page.
            </summary>
            <remarks>
            These area's will be rendered above the main content of the page (if any).
            <para>Area's added here will be rendered on top of ForegroundAreas previously added either in the main flow or in the StartPage event.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.Foreground">
            <summary>
            Represents the foreground canvas of this page.
            </summary>
            <remarks>
            Draw on he canvas by adding shapes.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.Background">
            <summary>
            Represents the background canvas of this page.
            </summary>
            <remarks>
            Draw on he canvas by adding shapes.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.StartPageEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Section.StartPage">Startpage</see> event of a <see cref="T:TallComponents.PDF.Layout.Section">Section</see>.
            </summary>
            <remarks>To change the page properties (Page size, margins) change the value in the <see cref="T:TallComponents.PDF.Layout.QueryPageSettingsEventHandler"/> event.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.PageIndex">
            <summary>
            Get the page index of this page in the document (1-based).
            </summary>
            <remarks>
            This is the absolute page index in the document. This is not the page number 
            (as printed by #p). If you need the page number use <see class="QueryPageSettingsEventArgs.PageNumber">PageNumber</see>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.PageNumber">
            <summary>
            Get or set the page number of this page.
            </summary>
            <remarks>
            This is the page number as printed by the #p field. If you need the absolute 
            page index use <see class="QueryPageSettingsEventArgs.PageIndex">PageIndex</see>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.BackgroundAreas">
            <summary>
            Get the collection of areas to add to the background of this page.
            </summary>
            <remarks>
            These area's will be rendered below the main content of the page (if any).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.ForegroundAreas">
            <summary>
            Get the collection of areas to add to the foreground of this page.
            </summary>
            <remarks>
            These area's will be rendered above the main content of the page (if any).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.Foreground">
            <summary>
            Get the foreground canvas of this page as a collection of shapes. 
            </summary>
            <remarks>
            You draw on this canvas by adding shapes to it.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.Background">
            <summary>
            Get the background canvas of this page as a collection of shapes.
            </summary>
            <remarks>
            You draw on this canvas by adding shapes to it.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.InlineImage">
            <summary>
            Inline image. Add an instance of this class to TextParagraph.Fragments.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Column">
            <summary>
            Column definition in which paragraphs are flowed.
            </summary>
            <remarks>
            A section may contain 1 or more columns.
            Paragraphs are rendered inside the columns from top to bottom and
            from left to right.
            A column has a width and a spacing.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Column.#ctor">
            <summary>
            Initialize a new instance of the Column class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Column.Width">
            <summary>
            Get or set the width of this column.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Column.Spacing">
            <summary>
            Get or set the spacing between this column and its right neighbor.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.ComposeEntryEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.CrossreferenceSection.ComposeEntry"/> event of a <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.ComposeSectionEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:TallComponents.PDF.Layout.Section.StartCompose"/> and <see cref="E:TallComponents.PDF.Layout.Section.EndCompose"/>event of a <see cref="T:TallComponents.PDF.Layout.Section"/>.
            </summary>
            <remarks>
            <seealso cref="M:TallComponents.PDF.Layout.Section.Compose(TallComponents.PDF.Layout.Document)"/>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Cursor">
            <summary>
            Keeps track of where the next content will be written in the PDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.Start">
            <summary>
            Start a new transaction.
            </summary>
            <returns>A new transaction object.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.resetHeadingNumber(System.Int32)">
            <summary>
            Resets the heading number at the given level and resets the number at the sub-levels.
            </summary>
            <remarks>The number will be reset to 1.</remarks>
            <param name="level">The level to reset (0-based)</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.resetHeadingNumber(System.Int32,System.Int32)">
            <summary>
            Sets the heading number at the given level and resets the number at the sub-levels.
            </summary>
            <param name="level">The level to reset (0-based)</param>
            <param name="initial">The initial value (1-based)</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.incrementHeadingNumber(System.Int32)">
            <summary>
            Increments the heading number and resets the sub-levels.
            </summary>
            <param name="level">The headinglevel at which the number has to be increased.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.resetHeadingSubLevelNumbers(System.Int32)">
            <summary>
            Resets the heading numbers for the sub-levels
            </summary>
            <param name="level">The heading level for which the sub-levels have to be reset.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.resetItemNumber(System.Int32)">
            <summary>
            Resets the number at the given level and resets the number at the sub-levels.
            </summary>
            <remarks>The number will be reset to 1.</remarks>
            <param name="level">The level to reset (0-based)</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.resetItemNumber(System.Int32,System.Int32)">
            <summary>
            Sets the number at the given level and resets the number at the sub-levels.
            </summary>
            <param name="level">The level to reset (0-based)</param>
            <param name="initial">The initial value (1-based)</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.incrementItemNumber(System.Int32)">
            <summary>
            Increments the levels number and resets the sub-levels.
            </summary>
            <param name="level">The level at which the number has to be increased.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.resetItemSubLevelNumbers(System.Int32)">
            <summary>
            Resets the item numbers for the sub-levels
            </summary>
            <param name="level">The lever for which the sub-levels have to be reset.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Cursor.PageCount">
            <summary>
            The number of pages that have been generated so far including the current page if it has not finished yet.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Cursor.Page">
            <summary>
            Get the current page.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Cursor.clearPage">
            <summary>
            Set the current page to <see langword="null"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Document">
            <summary>
            The document object represents the complete PDF file.
            </summary>
            <remarks>
            The document contains sections into which content flows. The document declares document-wide options like the 
            subject, author and keywords as well as security settings (Professional edition only).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.#ctor">
            <summary>
            Initialize a new instance of the Document class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.Write(System.Web.HttpResponse)">
            <summary>
            Write PDF document to a HttpResponse in Declaritive mode. 
            </summary>
            <overloads>
            Write PDF document.
            </overloads> 
            <exception cref="T:System.ArgumentException">Thrown when the HttpResponse is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the HttpResponse is <see langword="null"/>.</exception>
            <param name="response">The HTTP response to write to.</param>
            <remarks>
            Sets the following headers:
            <list type="table">
              <listheader><term>Header</term><description>Value</description></listheader>
              <item><term>ContentType</term><description>application/pdf</description></item>
              <item><term>ContentEncoding</term><description>UTF8</description></item>
            </list>
            <example>
            The following snippets demonstrate how to create a simple PDF document and stream it to
            a browser from the code-behind of an ASP.NET page (.aspx) using Declaritice mode.
            See <see cref="M:TallComponents.PDF.Layout.Document.Write(System.Web.HttpResponse,System.Boolean)"/> for an example of Event-Driven mode.
            <para>C#</para>
            <code>
            private void Page_Load(object sender, System.EventArgs e)
            {
              Document doc = new Document();
              Section section = new Section();
              doc.Sections.Add( section );
              TextParagraph text = new TextParagraph();
              section.Paragraphs.Add( text );
              text.Fragments.Add( new Fragment( "Hello world from ASP.NET!" ) );
            
              try
              {
                 // Write in Declaritive mode
                 <b>doc.Write</b>( Response );
              }
              catch( Exception ex )
              {
                 // Do some logging or error reporting here ...
              }
            }
            </code>
            <para>VB.NET</para>
            <code>
            Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
               ' Create a document
               Dim doc As New Document
               Dim section As New Section
               doc.Sections.Add(section)
               ' Add some content
               Dim text As New TextParagraph
               section.Paragraphs.Add(text)
               text.Fragments.Add(New Fragment("Hello world from ASP.NET!"))                 
               
               Try
                  ' Write in Declaritive mode
                  <b>doc.Write</b>(Response)
               
               Catch ex As Exception
                  ' Do some logging or error reporting here ...
               
               End Try
            End Sub
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.Write(System.Web.HttpResponse,System.Boolean)">
            <summary>
            Write PDF document to HttpResponse in Declaritive (push) or Event-Driven mode (pull). 
            </summary>
            <param name="response">The HTTP response to write to.</param>
            <param name="eventDrivenMode">Write in Event-Driven mode (pull) if true, write in Declaritve mode (push) if false.</param>
            <exception cref="T:System.ArgumentException">Thrown when the HttpResponse is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the HttpResponse is <see langword="null"/>.</exception>
            <remarks>
            Sets the following headers:
            <list type="table">
              <listheader><term>Header</term><description>Value</description></listheader>
              <item><term>ContentType</term><description>application/pdf</description></item>
              <item><term>ContentEncoding</term><description>UTF8</description></item>
            </list>
            <para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para>
            <example>
            The following snippets demonstrate how to create a simple PDF document and stream it to
            a browser from the code-behind of an ASP.NET page (.aspx) using Event-Driven mode.
            See <see cref="M:TallComponents.PDF.Layout.Document.Write(System.Web.HttpResponse)"/> for an example of Declaritive mode.
            <para>C#</para>
            <code>
            private void Page_Load(object sender, System.EventArgs e)
            {
              // Create a document
              Document doc = new Document();
              Section section = new Section();
              doc.Sections.Add( section );
            
              // Setup an event handler for Section.Paragraphs.PrintParagraph
              section.Paragraphs.PrintParagraph += new ParagraphCollection.PrintParagraphEventHandler(PrintParagraph);
               
              try
              {
                 // Write in Event-Driven mode
                 <b>doc.Write</b>( Response, true );
              }
              catch( Exception ex )
              {
                 // Do some logging or error reporting here ...
              }
            }
            
            private void PrintParagraph( ParagraphCollection sender, PrintParagraphEventArgs args )
            {
              TextParagraph text = new TextParagraph();
              text.Fragments.Add( new Fragment( "Hello world from ASP.NET!" ) );
              args.Paragraph = text;
            }
            </code>
            <para>VB.NET</para>
            <code>
            Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
              ' Create a document
              Dim doc As New Document
              Dim section As New Section
              doc.Sections.Add(section)
               
              ' Setup an event handler for Section.Paragraphs.PrintParagraph
              AddHandler section.Paragraphs.PrintParagraph, AddressOf PrintParagraph
               
              Try
                 ' Write in Event-Driven mode
                 <b>doc.Write</b>(Response, True)
               
                 Catch ex As Exception
                    ' Do some logging or error reporting here ...
               
              End Try
            End Sub
               
            Private Sub PrintParagraph(ByVal sender As ParagraphCollection, ByVal e As PrintParagraphEventArgs)
               Dim text As New TextParagraph
               text.Fragments.Add(New Fragment("Hello world from ASP.NET!"))
               e.Paragraph = text
            End Sub
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.Write(System.IO.Stream)">
            <summary>
            Write PDF document to stream in Declaritive mode.
            </summary>
            <param name="stream">Write to this stream.</param>
            <exception cref="T:System.ArgumentException">Thrown when the Stream is not writeable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the Stream is <see langword="null"/>.</exception>
            <remarks>
            <para>It is the responsibility of the client (caller) to Flush and Close the <paramref name="stream"/>.</para>
            <para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para>
            <example>
            The following snippets demonstrate how to create a simple PDF document and save it to
            a file using Declaritive mode.
            <para>C#</para>
            <code>
            // Create a document
            Document doc = new Document();
            Section section = new Section();
            doc.Sections.Add( section );
            
            // Add some content
            TextParagraph text = new TextParagraph();
            text.Fragments.Add( new Fragment( "Hello world!" ) );
            section.Paragraphs.Add( text );
            
            using( FileStream fs = new FileStream( "out.pdf", FileMode.Create, FileAccess.ReadWrite ) )
            {
              // Write the document in Declaritive mode
              <b>doc.Write</b>( fs );
            }
            </code>
            <para>VB.NET</para>
            <code>
            ' Create a new document
            Dim doc As New Document
            Dim section As New Section
            doc.Sections.Add(section)
            
            ' Add some content
            Dim text As New TextParagraph
            text.Fragments.Add(New Fragment("Hello world!"))
            section.Paragraphs.Add(text)
            
            Dim fs As FileStream = Nothing
            
            Try
               fs = New FileStream("out.pdf", FileMode.Create, FileAccess.ReadWrite)
               ' Write in Declaritive mode
               <b>doc.Write</b>(fs)
            Finally
               If Not fs Is Nothing Then
                  fs.Close()
               End If
            End Try
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.Write(System.IO.Stream,System.Boolean)">
            <summary>
            Write PDF document to stream in declaritive or Event-Driven mode.
            </summary>
            <remarks>
            <para>It is the responsibility of the client (caller) to Flush and Close the <paramref name="stream"/>.</para>
            <para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para>
            </remarks>
            <param name="stream">Write to this stream.</param>
            <param name="eventDrivenMode">Write in Event-Driven mode if true, write in Declaritve mode if false.</param>
            <exception cref="T:System.ArgumentException">Thrown when the Stream is not writeable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the Stream is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.Write(System.Xml.XmlReader,System.IO.Stream)">
            <summary>
            Write document in Event-Driven mode to a stream. The document is read from an XML reader.
            </summary>
            <param name="reader">XML specification of the document content.</param>
            <param name="stream">Write to this stream.</param>
            <exception cref="T:System.ArgumentException">Thrown when the Stream is not writeable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the Stream or the XmlReader is <see langword="null"/>.</exception>
            <remarks>
            <para>It is the responsibility of the client (caller) to Flush and Close the <paramref name="stream"/>.</para>
            <para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para>
            <example>
            <para>XML (layout.xml)</para>
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            &lt;document&gt;
              &lt;section&gt;
                 &lt;paragraph type="TextParagraph"&gt;
                    &lt;fragment&gt;Hello world from XML!&lt;/fragment&gt;
                 &lt;/paragraph&gt;
              &lt;/section&gt;
            &lt;/document&gt;
            </code>
            <para>C#</para>
            <code>
            Document doc = new Document();
            
            using( FileStream fs = new FileStream( "out.pdf", FileMode.Create, FileAccess.ReadWrite ) )
            {
              try
              {
                 XmlTextReader reader = new XmlTextReader( @"layout.xml" );
                 <b>doc.Write</b>( reader, fs );
              }
              catch( Exception ex )
              {
                 System.Console.WriteLine( "Error: {0}", ex.Message );
              }
            }
            </code>
            <para>VB.NET</para>
            <code>
            ' Create a new document
            Dim doc As New Document
            
            Dim fs As FileStream = Nothing
            
            Try
              Dim reader As New Xml.XmlTextReader("layout.xml")
              fs = New FileStream("out.pdf", FileMode.Create, FileAccess.ReadWrite)
              ' Write from XML in Event-Driven mode
              <b>doc.Write</b>(reader, fs)
            Catch ex As Exception
              System.Console.WriteLine( "Error: {0}", ex.Message )
            Finally
              If Not fs Is Nothing Then
                 fs.Close()
              End If
            End Try
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.Write(System.Xml.XmlReader,System.Web.HttpResponse)">
            <summary>
            Write document in Event-Driven mode (pull) to HttpResponse. Document is read from an XML reader.
            </summary>
            <remarks>
            Sets the following headers:
            <list type="table">
              <listheader><term>Header</term><description>Value</description></listheader>
              <item><term>ContentType</term><description>application/pdf</description></item>
              <item><term>ContentEncoding</term><description>UTF8</description></item>
            </list>
            <para>It is the responsibility of the client (caller) to Flush and Close the <paramref name="response"/>.</para>
            <para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para>
            </remarks>
            <param name="reader">XML specification of the document content.</param>
            <param name="response">The HttpResponse to write to.</param>
            <exception cref="T:System.ArgumentException">Thrown when the HttpResponse is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the HttpResponse or the XmlReader is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.Sections">
            <summary>
            Collection of sections of this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.ViewerPreferences">
            <summary>
            Get or set the viewer preferences of this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.DocumentInfo">
            <summary>
            Get or set the document info object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.Metadata">
            <summary>
            Get the XMP metadata for this document.
            </summary>
            <remarks>
            The XMP metadata cannot be specified from XML.
            </remarks> 
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.Security">
            <summary>
            Get or set the security settings and user privileges of this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.OpenActions">
            <summary>
            Open actions are executed while a document is openening.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.JavaScripts">
            <summary>
            Document level JavaScripts.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.BeforeSaveAction">
            <summary>
            Before save action is executed before a document will be saved.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.AfterSaveAction">
            <summary>
            After save action is executed after a document is saved.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.BeforePrintAction">
            <summary>
            Before print action is executed before a document will be printed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.AfterPrintAction">
            <summary>
            After print action is executed after a document is printed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Document.BeforeCloseAction">
            <summary>
            Before close action is executed before a document will be closed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.Read(System.Xml.XmlReader)">
            <summary>
            Read from XML reader.
            </summary>
            <remarks>
            This override checks that the document node is correct (node name = "document") as otherwise 
            errors are given that are unclear (if a incorrect xml is provided for example.
            <para>Override this method to implement custom XML reading. When called, the reader should be positioned on the
            start element associated with the type. When the method finishes, the reader must be positioned
            on the first XML node after the end element (i.e. make sure you consume the end element).</para>
            <para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para>
            </remarks>
            <param name="reader">The XML reader that holds the data from which this layout object is read.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.Push(System.IO.Stream)">
            <summary>
            Write the document in push mode.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.Document.Push(System.IO.Stream,System.Boolean,System.Object)">
            <summary>
            Write the document in push mode.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="noEval"></param>
            <param name="counters">If a sub-document, existing counter registry.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.EndPageEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Section.EndPage"/> event of a <see cref="T:TallComponents.PDF.Layout.Section"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.ComposeEntryEventArgs">
            <summary>
            Povides data for the <see cref="E:TallComponents.PDF.Layout.CrossreferenceSection.ComposeEntry"/> event of a <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection"/>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.ComposeEntryEventArgs.#ctor(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
            <summary>
            Initialize a new instance of the ComposeEntryEventArgs class.
            </summary>
            <param name="paragraph">The paragraph for which the event was raised.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.ComposeEntryEventArgs.CurrentParagraph">
            <summary>
            Add content to the <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection"/> for this <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph"/>.
            </summary>
            <remarks>
            Add the content to the <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection"/> that fired the event (the sender in the event handler).
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.QueryPageSettingsEventArgs">
            <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Section.QueryPageSettings"/> event of a <see cref="T:TallComponents.PDF.Layout.Section"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.PageSize">
            <summary>
            Get or set the height and width of all pages in this section.
            </summary>
            <remarks>The units mentioned are in user space units.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.CropBox">
            <summary>
            Get or set the visual/printed part of the page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.BleedBox">
            <summary>
            Get or set the part available in the production environment.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.TrimBox">
            <summary>
            Get or set the part available in the finished page after trimming.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.Orientation">
            <summary>
            Page orientation (counterclockwise).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.Cancel">
            <summary>
            Get or set if document generaton has to be aborted.
            </summary>
            <remarks>
            Set to true if no more pages must be created.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.FirstPage">
            <summary>
            Get if this is the first page in the section.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.PageIndex">
            <summary>
            Get the index of the page.
            </summary>
            <remarks>
            This is the 1-based index of the page in the document, not the page number.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.Margin">
            <summary>
            Get the margins for this page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.Columns">
            <summary>
            Get or set the collection of columns on the pages of this section.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.DrawingSizeException">
            <summary>
            The exception that is thrown when a drawing doesn't fit on a page.
            </summary>
            <remarks>
            Raised when a drawing cannot be placed on a page because 
            the drawing is larger than a complete page.
            The paragraph.ID is included into the error description
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.ImageSizeException">
            <summary>
            The exception that is thrown when a image cannot be placed within the available space.
            </summary>
            <remarks>
            This can happen when the image is larger than a complete page or area.
            If available the path and Paragraph.ID are included in the error description
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Page.CurrentContent">
            <summary>
            Contents on this page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Page.Orientation">
            <summary>
            Orientation of this page in degrees. Default is Rotate0.
            </summary>
            <remarks>
            The orientation is counterclockwise.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.PullCursor.PageCount">
            <summary>
            Get the number of pages that have been generated so far.
            </summary>
            <remarks>
            This is including the current page (if it has not finished yet).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.PushCursor.PageCount">
            <summary>
            Get the number of pages that have been generated so far.
            </summary>
            <remarks>
            This is including the current page (if it has not finished yet).
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.QueryPageSettingsEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Section.QueryPageSettings"/> event of a <see cref="T:TallComponents.PDF.Layout.Section"/>.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.ResourceLoader.IResourceLoader">
            <summary>
            This interface describe the contract which must be implemented to create a custom resource loader.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.ResourceLoader.IResourceLoader.LoadResource(System.String,System.String)">
            <summary>
            Load a resource identified by the path and optional base path info.
            </summary>
            <param name="basePath">The optional base path (can be string.Empty or null)</param>
            <param name="path">The absulute, relative or virtual path from the resource to load.</param>
            <returns>The LoadedResource or null/nothing if not supported.</returns>
            <remarks>
            <para>
            You do not need to return null/nothing if the resource cannot be found.
            </para>
            When null/nothing is returned the component will try it with the default resource loader.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.ResourceLoader.LoadedResource">
            <summary>
            This class contains the information for a loaded resource.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.ResourceLoader.LoadedResource.#ctor(System.IO.Stream,System.String,TallComponents.PDF.Layout.ResourceLoader.PathType)">
            <summary>
            Creates a new LoadedResource instance.
            </summary>
            <param name="data">The actual data this URL delivered.</param>
            <param name="fullPath">The full path used to resolve this resource. (the combination of the basepath and path)</param>
            <param name="pathType">The type of which the FullPath is.</param>
            <remarks>
            Both CharacterSet and ContentType will be null/nothing.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.ResourceLoader.LoadedResource.#ctor(System.IO.Stream,System.String,System.String,System.String,TallComponents.PDF.Layout.ResourceLoader.PathType)">
            <summary>
            Creates a new LoadedResource instance.
            </summary>
            <param name="data">The actual data this URL delivered.</param>
            <param name="characterSet">Character set. (can be null)</param>
            <param name="contentType">Content type (can be null)</param>
            <param name="fullPath">The full path used to resolve this resource. (the combination of the basepath and path)</param>
            <param name="pathType">The type of which the FullPath is.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.ResourceLoader.LoadedResource.Data">
            <summary>
            The actual data the resource loader delivered.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.ResourceLoader.LoadedResource.CharacterSet">
            <summary>
            Character set. (can be null/nothing)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.ResourceLoader.LoadedResource.ContentType">
            <summary>
            Character set. (can be null/nothing)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.ResourceLoader.LoadedResource.FullPath">
            <summary>
            The full path used to resolve this resource. (the combination of the basepath and path)
            </summary>
            <remarks>
            This information can be used to extract a new base path or in a message or exception when the caller cannot handle the data returned.
            <para>
            Whether a new base path will be extracted depends on the PathType property.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.ResourceLoader.LoadedResource.PathType">
            <summary>
            The type of which the FullPath is.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.ResourceLoader.PathType">
            <summary>
            The type of FullPath, this can be used to extract the basepath from it.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.ResourceLoader.PathType.Url">
            <summary>
            It's a web url.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.ResourceLoader.PathType.LocalFile">
            <summary>
            It's a local file.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.ResourceLoader.PathType.Custom">
            <summary>
            It's a custom format, no new basepath will be extracted.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.SectionCollection">
            <summary>
            Collection of paragraph objects. It is obtained through the Sections property of Document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.#ctor">
            <summary>
            Create a new empty collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.Add">
            <summary>
            Add a new section.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.Add(TallComponents.PDF.Layout.Section)">
            <summary>
            Add an existing section.
            </summary>
            <param name="section">Add this section.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.AddRange(TallComponents.PDF.Layout.SectionCollection)">
            <summary>
            Adds the elements of a SectionCollection to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="sections">The SectionCollection whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.AddRange(TallComponents.PDF.Layout.Section[])">
            <summary>
            Adds the elements of an array of sections to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="sections">The array of sections whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.Clear">
            <summary>
            Removes all sections from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.Contains(TallComponents.PDF.Layout.Section)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Section">Section</see> is in the <see cref="T:TallComponents.PDF.Layout.SectionCollection">SectionCollection</see>.
            </summary>
            <param name="section">The <see cref="T:TallComponents.PDF.Layout.Section"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Section"/> is found in this <see cref="T:TallComponents.PDF.Layout.SectionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="section"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="section"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.IndexOf(TallComponents.PDF.Layout.Section)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Section">Section</see> in the <see cref="T:TallComponents.PDF.Layout.SectionCollection">SectionCollection</see>.
            </summary>
            <param name="section">The <see cref="T:TallComponents.PDF.Layout.Section"/> to locate in the <see cref="T:TallComponents.PDF.Layout.SectionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Section"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.Insert(System.Int32,TallComponents.PDF.Layout.Section)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Section"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.SectionCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Section"/> should be inserted.</param>
            <param name="section">The <see cref="T:TallComponents.PDF.Layout.Section"/> to be insert.</param>
            <remarks>
            The <paramref name="section"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="section"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.Remove(TallComponents.PDF.Layout.Section)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Section">Section</see> from this <see cref="T:TallComponents.PDF.Layout.SectionCollection">SectionCollection</see>.
            </summary>
            <param name="section">The section to remove.</param>
            <remarks>
            The <paramref name="section"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="section"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Section">Section</see> from the <see cref="T:TallComponents.PDF.Layout.SectionCollection">SectionCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Section"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.SectionCollection.Count">
            <summary>
            Number of sections.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.SectionCollection.Item(System.Int32)">
            <summary>
            Retrieve section by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.SectionCollection.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Implement this method in a derived class to generate content
            dynamically.
            </summary>
            <remarks>
            This method will be called just before PDF generation starts.
            It allows you to setup custom content in derived classes.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.StartPageEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Section.StartPage"/> event of a <see cref="T:TallComponents.PDF.Layout.Section"/>.
            </summary>
            <remarks>To change the page properties (Page size, margins) change the value in the <see cref="T:TallComponents.PDF.Layout.QueryPageSettingsEventHandler"/> event.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.StaticXmlNametable">
            <summary>
            Static mapping table for XML classes.
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Layout.StaticXmlNametable.Create">
            <summary>
            Name translation table for the XML processor.
            </summary>
            <returns>The nametable containing the static translations.</returns>
        </member>
        <member name="T:TallComponents.PDF.Layout.Area">
            <summary>
            An area on a page containing paragraphs.
            </summary>
            <remarks>
            An area occupies a rectangle on a page and has paragraphs that will be 
            rendered inside that rectangle. Whether an area appears on a page depends 
            on page traits such as 'first of section', 'last of section', 'odd', 'even' and 'blank'.
            By default the area will appear on all pages in the section.
            <para>
            The bottom left corner of a page is the origin. The top and left properties are offsets from the origin.
            The default value of the top property is 0, so the top propery must be set otherwise the area will drop 
            off the end of the page and become invisible.
            </para>
            <para>
            If an area has insufficient space to render it's contents, some of the content may not be rendered. 
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Area.#ctor">
            <summary>
            Initialize a new instance of the Area class.
            </summary>
            <remarks>
            Create a new empty Area. 
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Area.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize a new instance of the Area class with the given location and size.
            </summary>
            <param name="left">Horizontal position of left edge of this area.</param>
            <param name="top">Vertical position of top edge of this area. Should be greater than 0.</param>
            <param name="width">Width of this area.</param>
            <param name="height">Height of this area.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Left">
            <summary>
            Get or set the left edge of the area.
            </summary>
            <remarks>
            Horizontal position of left edge of this area in points (1/72 inch).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Top">
            <summary>
            Get or set the top edge of the area.
            </summary>
            <remarks>
            Vertical position of top edge of this area in points (1/72 inch).
            Default value is 0.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Width">
            <summary>
            Get or set the horizontal extent of this area in points (1/72 inch).
            </summary>
            <remarks>
            If there is insufficient width to render the contents of 
            the area, some of the content may not be rendered.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Height">
            <summary>
            Get or set the vertical extent of this area in points (1/72 inch).
            </summary>
            <remarks>
            If there is insufficient height to render the contents of 
            the area, some of the content may not be rendered.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Odd">
            <summary>
            Get or set if the area will appear on all odd pages.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Even">
            <summary>
            Get or set if the area will appear on all even pages.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.First">
            <summary>
            Get or set if the area will appear on each first page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Middle">
            <summary>
            Gts or sets if the area will appear on each middle (non-first and non-last) page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Last">
            <summary>
            Get or set if the area will appear on each last page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.LastBehavior">
            <summary>
            The LastBehavior is used to specify how the Last boolean should work. (default = NotFirst)
            </summary>
            <remarks>
            Don't care if Last = false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.OddFirst">
            <summary>
            Get or set if the area appeas on the odd-first page.
            </summary>
            <remarks>
            If, and only if, set to true, the area will appear on odd first pages.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.OddMiddle">
            <summary>
            Get or set if the area appeas on the odd-middle page(s).
            </summary>
            <remarks>
            If, and only if, set to true, the area will appear on odd middle (not first and not last) pages.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.OddLast">
            <summary>
            Get or set if the area appeas on the odd-last page.
            </summary>
            <remarks>
            If, and only if, set to true, the area will appear on odd last pages.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.EvenFirst">
            <summary>
            Get or set if the area appeas on the even-first page.
            </summary>
            <remarks>
            If, and only if, set to true, the area will appear on even first pages.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.EvenMiddle">
            <summary>
            Get or set if the area appeas on the even-middle page.
            </summary>
            <remarks>
            If, and only if, set to true, the area will appear on even middle (not first and not last) pages.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.EvenLast">
            <summary>
            Get or set if the area appeas on the even-last page.
            </summary>
            <remarks>
            If, and only if, set to true, the area will appear on even last pages.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Clip">
            <summary>
            Clip any content that does not fit.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.Paragraphs">
            <summary>
            Get the collection of paragraphs that will be rendered from top to bottom.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Area.VerticalAlignment">
            <summary>
            Get or set the vertical alignment of the contained <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see>. 
            </summary>
            <remarks>Setting or
            getting this property is equivalent to setting and getting the <see cref="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.VerticalAlignment"/> 
            property of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection"/>. It is provided because the ParagraphCollection
            class is implicit in the TallPDF.NET XML schema.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.AreaCollection">
            <summary>
            Collection of area objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.#ctor">
            <summary>
            Initialize a new instance of the AreaCollection class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.Add">
            <summary>
            Add a new area to this collection.
            </summary>
            <remarks>
            Creates a new area instance, adds it to the collection and returns the 
            created area.
            </remarks>
            <returns>The new area that has been added.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.Add(TallComponents.PDF.Layout.Area)">
            <summary>
            Add an existing area to this collection.
            </summary>
            <remarks>
            Adds the provided area to the collection.
            </remarks>
            <param name="area">Area to be added.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.AddRange(TallComponents.PDF.Layout.AreaCollection)">
            <summary>
            Adds the elements of a AreaCollection to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="areas">The AreaCollection whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.AddRange(TallComponents.PDF.Layout.Area[])">
            <summary>
            Adds the elements of an array of areas to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="areas">The array of areas whose elements should be added to 
            the end of the collection.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.Clear">
            <summary>
            Removes all areas from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.Contains(TallComponents.PDF.Layout.Area)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Area">Area</see> is in the <see cref="T:TallComponents.PDF.Layout.AreaCollection">AreaCollection</see>.
            </summary>
            <param name="area">The <see cref="T:TallComponents.PDF.Layout.Area"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layout.Area"/> is found in this <see cref="T:TallComponents.PDF.Layout.AreaCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="area"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="area"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.IndexOf(TallComponents.PDF.Layout.Area)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Area">Area</see> in the <see cref="T:TallComponents.PDF.Layout.AreaCollection">AreaCollection</see>.
            </summary>
            <param name="area">The <see cref="T:TallComponents.PDF.Layout.Area"/> to locate in the <see cref="T:TallComponents.PDF.Layout.AreaCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Area"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.Insert(System.Int32,TallComponents.PDF.Layout.Area)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Area"/> on a specific place in this <see cref="T:TallComponents.PDF.Layout.AreaCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Area"/> should be inserted.</param>
            <param name="area">The <see cref="T:TallComponents.PDF.Layout.Area"/> to be insert.</param>
            <remarks>
            The <paramref name="area"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="area"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.Remove(TallComponents.PDF.Layout.Area)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Area">Area</see> from this <see cref="T:TallComponents.PDF.Layout.AreaCollection">AreaCollection</see>.
            </summary>
            <param name="area">The area to remove.</param>
            <remarks>
            The <paramref name="area"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="area"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Area">Area</see> from the <see cref="T:TallComponents.PDF.Layout.AreaCollection">AreaCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Area"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Layout.AreaCollection.Count">
            <summary>
            Number of area objects in this collecion.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.AreaCollection.Item(System.Int32)">
            <summary>
            Get the area by 0-based index.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.generate(TallComponents.PDF.Layout.Document,TallComponents.PDF.Layout.Cursor,TallComponents.PDF.Base.Graphics.Content,System.Boolean,System.Boolean,System.Boolean,TallComponents.PDF.Layout.Spacing)">
            <summary>
            Generate all areas in this collection in the given content stream.
            </summary>
            <param name="document">The layout document</param>
            <param name="cursor">The cursor.</param>
            <param name="content">The content stream to render in.</param>
            <param name="oddPage">True if this is an odd page.</param>
            <param name="firstPage">True if this is the first page.</param>
            <param name="lastPage">True if this is the last page.</param>
            <param name="margin">The margin for the given section.</param>
        </member>
        <member name="M:TallComponents.PDF.Layout.AreaCollection.generate(TallComponents.PDF.Layout.Document,TallComponents.PDF.Layout.Cursor,TallComponents.PDF.Base.Graphics.Content)">
            <summary>
            Generate all areas in this collection in the given content stream.
            </summary>
            <param name="document">The layout document</param>
            <param name="cursor">The cursor.</param>
            <param name="content">The content stream.</param>
        </member>
        <member name="T:TallComponents.PDF.Layout.Footer">
            <summary>
            An area that is repeated at the bottom of pages in a <see cref="T:TallComponents.PDF.Layout.Section">Section</see>.
            </summary>
            <remarks>
            A footer is associated with a section through the OddFooter and EvenFooter properties of the section.
            The position and the size of a footer is constraint by the page size and page margins of the section.
            The top position of a footer is equal to the sections bottom margin.
            The left position of a footer is equal to the left margin of the section.
            The height of the header is equal to the bottom margin of the section minus the bottom margin of the footer.
            The width of the footer is equal to the width of the page minus the left and right margin of the section.
            <para>If the contents of the footer exceeds the available space, the footer will not be rendered. 
            To include an image inside the footer, make sure it's size is set explicitly so that it fits.</para>
            <para>To place a banner at the bottom of the page that uses the full width of the page use an <see cref="T:TallComponents.PDF.Layout.Area">Area</see> and add it to the <see cref="P:TallComponents.PDF.Layout.Section.BackgroundAreas">BackgroundAreas</see> collection.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Footer.#ctor">
            <summary>
            Initialize a new instance of the Footer class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Footer.BottomMargin">
            <summary>
            Get or set the space between the bottom of the footer and the bottom of the page.
            </summary>
            <remarks>By default the BottomMargin is 0.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Header">
            <summary>
            An area that is repeated at the top of pages in a <see cref="T:TallComponents.PDF.Layout.Section">Section</see>.
            </summary>
            <remarks>
            A <see cref="T:TallComponents.PDF.Layout.Header"/> is associated with a <see cref="T:TallComponents.PDF.Layout.Section">Section</see> through the <see cref="P:TallComponents.PDF.Layout.Section.OddHeader"/> and <see cref="P:TallComponents.PDF.Layout.Section.EvenHeader"/> properties of the section.
            The position and the size of a header is constrained by the page size and page margins of the section.
            The top position of a header is equal to the page height of the section minus top margin of the header.
            The left position of a header is equal to the left margin of the section.
            The height of the header is equal to the top margin of the section minus the top margin of the header.
            The width of the header is equal to the width of the page minus the left and right margin of the section.
            <para>If the contents of the header exceeds the available space, the header will not be rendered. 
            To include an image inside the header, make sure it's size is set explicitly so that it fits.</para>
            <para>To place a banner at the top of the page that uses the full width of the page use an <see cref="T:TallComponents.PDF.Layout.Area"/> and add it to the <see cref="P:TallComponents.PDF.Layout.Section.BackgroundAreas"/> collection.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Header.#ctor">
            <summary>
            Initialize a new instance of the Header class.
            </summary>
            <remarks>
            The generated class will have a top margin of 0.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Header.TopMargin">
            <summary>
            Get or set the space between the top of the header and the top of the page.
            </summary>
            <remarks>By default the TopMargin is 0.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.LastBehavior">
            <summary>
            The LastBehavior is used to specify how the Last boolean should work.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.LastBehavior.NotFirst">
            <summary>
            Last will be true only on pages which is not the first.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Layout.LastBehavior.Always">
            <summary>
            Last will be true on all pages, even if it's the first.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.XmlNametable">
            Generated code. Creates a mapping table for XML classes.
        </member>
        <member name="M:TallComponents.PDF.Layout.XmlNametable.Create">
            Build a name translation table for the XML processor.
        </member>
        <member name="T:TallComponents.PDF.Layout.Section">
            <summary>
            Renders content onto one or more pages using <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraphs</see>, <see cref="P:TallComponents.PDF.Layout.Section.Header">Headers</see>, <see cref="P:TallComponents.PDF.Layout.Section.Footer">Footers</see> and <see cref="T:TallComponents.PDF.Layout.Area">Areas</see>.
            </summary>
            <remarks>
            A document has one or more sections that span one or more pages. Within a section a list of 
            paragraphs is rendered in the space available between the margins. A section defines <see cref="P:TallComponents.PDF.Layout.Section.Header"/>s and <see cref="P:TallComponents.PDF.Layout.Section.Footer"/>s
            that are repeated on each page. It is also possible to add absolutely positioned <see cref="T:TallComponents.PDF.Layout.Area"/>s on top
            of or below the main content. 
            <para>A section can define one or more columns.</para>
            <para>Implent a handler for <see cref="E:TallComponents.PDF.Layout.Section.StartCompose"/> to insert a header and a handler for <see cref="E:TallComponents.PDF.Layout.Section.EndCompose"/>.</para>
            </remarks>
            <seealso cref="T:TallComponents.PDF.Layout.ColumnCollection" />
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />
            <seealso cref="T:TallComponents.PDF.Layout.SectionCollection" />
            <seealso cref="P:TallComponents.PDF.Layout.Section.PageSize" />
        </member>
        <member name="E:TallComponents.PDF.Layout.Section.QueryPageSettings">
            <summary>
            Occurs before a new empty page is added to the document.
            </summary>
            <remarks>
            This event lets you specify the attributes of the new page.
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Section.StartPage">
            <summary>
            Occurs right after a new empty page has been added to the document.
            </summary>
            <remarks>
            This event lets you add content to the page before the main area is filled with paragraphs.
            Do not modify page attributes (size, margin) using this event, but use <see cref="E:TallComponents.PDF.Layout.Section.QueryPageSettings"/> instead.
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Section.EndPage">
            <summary>
            Occurs right after the main area has been completely filled with paragraphs.
            </summary>
            <remarks>
            This event lets you add content to the page after the normal content flow ends on this page.
            Declarative defined page headers, footers and areas will not be displayed.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Section.#ctor">
            <summary>
            Creates a new, empty section.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.Paragraphs">
            <summary>
            Returns a paragraphs object. Use this property to add new paragraphs.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.Columns">
            <summary>
            Get or set the collection of columns on the pages of this section.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.VerticalAlignment">
            <summary>
            Get or set the vertical alignment of the contained ParagraphCollection. 
            </summary>
            <remarks>
            Setting or
            getting this property is equivalen to setting and getting the <see cref="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.VerticalAlignment"/>
            property of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection"/>. It is provided because the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection"/>
            class does not correspond to an XML element in the TallPDF.NET XML schema.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.Header">
            <summary>
            Get or set a fixed area at the top of each page of this section.
            </summary>
            <remarks>
            No header will be rendered if the TopMargin is 0 or too small to fit the header contents.
            Rendering can be overridden by specifically setting the <see cref="P:TallComponents.PDF.Layout.Section.OddHeader"/> and/or <see cref="P:TallComponents.PDF.Layout.Section.EvenHeader"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.OddHeader">
            <summary>
            Get or set a fixed area at the top of each odd page of this section.
            </summary>
            <remarks>
            No header will be rendered if the TopMargin is 0 or too small to fit the header contents.
            If the OddHeader has not been specified the generic <seealso cref="P:TallComponents.PDF.Layout.Section.Header"/> is returned.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.EvenHeader">
            <summary>
            Get or set a fixed area at the top of each even page of this section.
            </summary>
            <remarks>
            No header will be rendered if the TopMargin is 0 or too small to fit the header contents.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.Footer">
            <summary>
            Get or set a fixed area at the bottom of each page of this section.
            </summary>
            <remarks>
            No footer will be rendered if the BottomMargin is 0 or too small to fit the footer contents.
            Rendering for odd or even pages can be overridden by specifically setting the <see cref="P:TallComponents.PDF.Layout.Section.OddFooter"/> and/or <see cref="P:TallComponents.PDF.Layout.Section.EvenFooter"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.OddFooter">
            <summary>
            Get or set a fixed area at the bottom of each odd page of this section.
            </summary>
            <remarks>
            No footer will be rendered if the BottomMargin is 0 or too small to fit the footer contents.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.EvenFooter">
            <summary>
            Get or set a fixed area at the bottom of each even page of this section.
            </summary>
            <remarks>
            No footer will be rendered if the BottomMargin is 0 or too small to fit the footer contents.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.StartOnNewPage">
            <summary>
            Get or set if you want this section to start on a new page. 
            </summary>
            <remarks>
            By default StartOnNewPage is false.
            <para>Note that if a section has a different page size than the previous section, 
            it will always start on a new page.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.DoNotBreak">
            <summary>
            Get or set if this section has to be rendered on a single page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.PageSize">
            <summary>
            Get or set the height and width of all pages in this section in points.
            </summary>
            <remarks>
            Default page size is Letter and the sizes are in points (1/72 inch).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.CropBox">
            <summary>The printed or viewed area of the page.</summary>
            <remarks>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the visible region of default user space. 
            When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle and then imposed 
            on the output medium in some implementation-defined manner.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.BleedBox">
            <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the region to which the contents of the 
            page should be clipped when output in a production environment.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.TrimBox">
            <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the intended dimensions of
            the finshed page after trimming. May be smaller than the bleed box for printing instructions, cut marks, or color bars.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.Orientation">
            <summary>
            Page orientation in the viewer (counterclockwise).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.Margin">
            <summary>
            Get the width of the whitespace around the main content in points. 
            </summary>
            <remarks>
            Sizes are given in points (1/72 inch). Default margins are 1.25 inch (90pt) for Left and Right, 
            1 inch (72pt) for Top and Bottom.
            <para>Changing the margins resets the column widths and spacing to their default values.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.RestartPageNumber">
            <summary>
            Get or set the page number of the first page of this section.
            </summary>
            <remarks>
            When set to -1, page numbering continues from the previous section.
            This property is ignored when the StartOnNewPage is false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.ExcludeFromPageCount">
            <summary>
            Gets or sets a value indicating whether to exclude this section from total pages count.
            </summary>
            <value>
            <c>true</c> if excludes this section from total pages count; otherwise, <c>false</c>.
            </value>
            <code>
            // Create a new document 
            Document doc = new Document();                
            
            //Insert cover page
            Section sectionCover = new Section();
            doc.Sections.Add( sectionCover );
            
            // Do not consider pages generated by this section in total page count
            sectionCover.ExcludeFromPageCount = true;
            
            // Create a text for the cover
            TextParagraph tpCover = new TextParagraph();
            tpCover.Fragments.Add( new Fragment( "Cover Page", 20 ) );
            tpCover.HorizontalAlignment = HorizontalAlignment.Center;
            sectionCover.Paragraphs.Add(tpCover);
            </code>      
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.ForegroundAreas">
            <summary>
            Get the collection of <see cref="T:TallComponents.PDF.Layout.Area">Area</see> objects that is associated with each page of this Section.
            </summary>
            <remarks>
            The objects are placed on top of all other contents on the page.
            Areas are drawn bottom-up, in the same order the 
            areas were added to this collection. So, the last area top be added is on top.
            <para>
            Note: Area's are only drawn on page end. So if the section fits on a page they are not 
            drawn at all. The last section always ends the page (and it's area's are always drawn).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layout.Section.BackgroundAreas">
            <summary>
            Get the collection of <see cref="T:TallComponents.PDF.Layout.Area">Area</see> objects that is associated with each page of this Section.
            </summary>
            <remarks>
            The objects are placed below of all other contents on the page.
            Areas are drawn bottom-up, in the same order the 
            areas were added to this collection. So, the last area top be added is on top.
            <para>
            Note: Area's are only drawn on page end. So if the section fits on a page they are not 
            drawn at all. The last section always ends the page (and it's area's are always drawn).</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Section.Compose(TallComponents.PDF.Layout.Document)">
            <summary>
            Implement this method in a derived class to generate content
            dynamically.
            </summary>
            <remarks>
            This method will be called just before PDF generation starts.
            It allows you to setup custom content in derived classes.
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Section.EndCompose">
            <summary>
            Occurs when the Compose phase is about to end.
            </summary>
            <remarks>
            Implement a handler for this event to add the final content, for example a summary or closing statement.
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Layout.Section.StartCompose">
            <summary>
            Occurs when the Compose phase starts.
            </summary>
            <remarks>
            Implement a handler for this event to add leading content, for example a heading.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.AttributeNotFoundException">
            <summary>
            The exception that is thrown when an XML attribute does not correspond to a property of the corresponding class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.CannotInstanciateException">
            <summary>
            The exception that is thrown when an instanciation exception occurs while loading XML.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.CannotSetException">
            <summary>
            The exception that is thrown when an set exception occurs while loading XML.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.MissingParseMethodException">
            <summary>
            The exception that is thrown when no public (static) Parse method was found when reading from XML.
            </summary>
            <remarks>
            Raised when a child element cannot be read from XML because the 
            corresponding class does not have a public (static) Parse method that takes 
            string as an argument.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.PropertyReadOnlyException">
            <summary>
            The exception that is thrown when an XML attribute maps to a read only property of the corresponding class.
            </summary>
            <remarks>
            Make sure the property can be set as well.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.XmlException">
            <summary>
            The base exception that is used for all XML exceptions that are thrown when an XML error occurs.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Xml.XmlException.LineNumber">
            <summary>
            Get the line number where the exception occurs (or -1 if not known).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Xml.XmlException.LinePosition">
            <summary>
            Get the line position where the exception occurs (or -1 if not known).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layout.Xml.XmlException.Message">
            <summary>
            Get a message that describes the current exception.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.ElementNotFoundException">
            <summary>
            The exception that is thrown when a child XML element does not correspond to a property or element of a collection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.EnumConstantNotFoundException">
            <summary>
            The exception that is thrown when an enumeration constant cannot be resolved.
            </summary>
            <remarks>
            Raised when an attribute corresponds to an enumeration property but the 
            value of the attribute does not correspond to any of the enumeration 
            constants.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.MissingAddMethodException">
            <summary>
            The exception that is thrown when Add() method for a collection could not be found.
            </summary>
            <remarks>
            Raised when a child element cannot be added to a collection because 
            the latter does not have an Add method that takes the element as 
            an argument.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.MissingReadMethodException">
            <summary>
            The exception that is thrown when no public Read method was found when reading from XML.
            </summary>
            <remarks>
            Raised when a child element cannot be read from XML because the 
            corresponding class does not have a public Read method that takes 
            XmlElement as an argument.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.PropertyCannotParseException">
            <summary>
            The exception that is thrown when a value read cannot be translated into an expected type.
            </summary>
            <remarks>
            Raised when an attribute corresponds to a property but the value of the 
            attribute cannot be parsed into a valid property value.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.TrailingXmlElementsAttribute">
            <summary>
            Specify this attribute on a property to indicate it has to come last in the XSD which specify the XML-language. 
            </summary>
            <remarks>
            This is not enforced by the XML processor.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layout.Xml.TrailingXmlElementsAttribute.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layout.Xml.TypeNotFoundException">
            <summary>
            The exception that is thrown when a type reference from a the type attribute of an XML element cannot be found.
            </summary>
            <remarks>
            If this exception occures, check the exact spelling of the type name. If you are 
            trying to load a custom class, make sure that the assembly containing the type is loaded.
            The type names for custom classes in XML are case sensitive.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2">
            <summary>
            This class represents base cacher.
            </summary>
            <typeparam name="TCacheKey">The type of the cache key.</typeparam>
            <typeparam name="TCacheObject">The type of the cache object.</typeparam>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.sync">
            <summary>
            Sync object.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.cache">
            <summary>
            Cache dictionary.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.Item(`0)">
            <summary>
            Gets or sets the object by the specified key.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.Get(`0)">
            <summary>
            Gets the object.
            </summary>
            <param name="key">The key.</param>
            <returns>Cached object.</returns>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.Add(`0,`1)">
            <summary>
            Puts the object.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.Remove(`0)">
            <summary>
            Removes the object.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer">
            <summary>
            This class represents global cache container.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer._sync">
            <summary>
            Sync object.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer._instance">
            <summary>
            Cache Container instance.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer.UndefinedCacheCode">
            <summary>
            Undefined cache code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer"/> class from being created.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer.Get(System.Int32)">
            <summary>
            Gets the object.
            </summary>
            <param name="key">The key.</param>
            <returns>Document cache.</returns>
        </member>
        <member name="T:TallComponents.PDF.Rasterizer.Common.Caching.DocumentCache">
            <summary>
            This class represents a docment cache.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.DocumentCache.IccProfileCache">
            <summary>
            Icc Profile cache.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.DocumentCache.IccTransformCache">
            <summary>
            Icc Transform cache.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.Message.Text">
            <summary>
            The message text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.Message.Exception">
            <summary>
            The exception that caused this error message.
            </summary>
            <remarks>This property will only contain a valid value for messages that
            have severity "Error". In other cases, it will be null.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.Message.Severity">
            <summary>
            The severity of the message.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.MessageCollection">
            <summary>
            A message collection.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Diagnostics.MessageCollection.Added">
            <summary>
            Raised when a new message is added.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.MessageCollection.Item(System.Int32)">
            <summary>
            Retrieve a message by 0-based index. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.MessageCollection.Count">
            <summary>
            The number of messages.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.Contains(TallComponents.PDF.Diagnostics.Message)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Diagnostics.Message">Message</see> is in the <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection">MessageCollection</see>.
            </summary>
            <param name="message">The <see cref="T:TallComponents.PDF.Diagnostics.Message"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Diagnostics.Message"/> is found in this <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="message"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="message"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.IndexOf(TallComponents.PDF.Diagnostics.Message)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Diagnostics.Message">Message</see> in the <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection">MessageCollection</see>.
            </summary>
            <param name="message">The <see cref="T:TallComponents.PDF.Diagnostics.Message"/> to locate in the <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Diagnostics.Message"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.Add(TallComponents.PDF.Diagnostics.Message)">
            <summary>
            Adds a new message. Virtual so that additional actions can be executed on
            adding a message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.MessageEventArgs">
            <summary>
            The Message event data.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.MessageEventArgs.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.MessageEventHandler">
            <summary>
            Represents the method that handles the Message event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The Message event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.MessageSeverity">
            <summary>
            Severity of a message
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Diagnostics.MessageSeverity.Information">
            <summary>
            An informational message.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Diagnostics.MessageSeverity.Warning">
            <summary>
            A warning.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Diagnostics.MessageSeverity.Error">
            <summary>
            An error.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.Summary">
            <summary>
            Provides a summary of a process.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.#ctor">
            <summary>
            Create a new summary instance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.#ctor(TallComponents.PDF.Diagnostics.MessageCollection)">
            <summary>
            Create a new summary instance with a particular message collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.AsIReporting">
            <summary>
            Take this settings as <see cref="T:TallComponents.PDF.Base.Graphics.IReporting"/>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.Summary.Messages">
            <summary>
            A list of messages, in the order that they were generated.
            </summary>
            <remarks>
            <para>Messages may inlude "plain" informational messages, but also errors and
            warnings.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.#ctor(TallComponents.PDF.Diagnostics.Summary)">
            <summary>
            Create a new summary instance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.TallComponents#PDF#Base#Graphics#IReporting#Exception(System.Exception)">
            <summary>
            Record the given error.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.TallComponents#PDF#Base#Graphics#IReporting#Message(System.String)">
            <summary>
            Record the given info message.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.TallComponents#PDF#Base#Graphics#IReporting#Error(System.String)">
            <summary>
            Record the given error message.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.TallComponents#PDF#Base#Graphics#IReporting#Warning(System.String)">
            <summary>
            Record the given warning.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.Close">
            <summary>
            Used internally to cleanup IDisposable messages.
            </summary>
            <remarks>If needed publicly we should implement IDisposable.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Configuration.FontStyleEmulation">
            <summary>
            Font style emulation settings. Works in combination with FontSubstitutionMap.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontStyleEmulation.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Create settings for the font style emulation.
            </summary>
            <param name="bold">Emulate the bold font style by drawing a
            line on the outlines of the characters.</param>
            <param name="italic">Emulate the italic font style by skewing the characters.</param>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontStyleEmulation.AsIFontStyleEmulation">
            <summary>
            Gets this object's implementation of <see cref="T:TallComponents.PDF.Base.Graphics.Fonts.IFontStyleEmulation"/>
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.RenderSettings">
            <summary>
            Encapsulates all settings that control the render process.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.RenderSettings.#ctor">
            <summary>
            Create a new RenderSettings object with default values.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation">
            <summary>
            Base class for the ColorTransformation classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.#ctor">
            <summary>
            Constructor of the abstract base class. Needed for derived classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Constructor of the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">destination Color Space.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.Clone">
            <summary>
            Creates a shallow copy of the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.ConvertColor(TallComponents.PDF.Base.Number[],TallComponents.PDF.Base.Number[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.ConvertColor(System.Byte[],System.Byte[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.TransformTint(System.Byte[])">
            <summary>
            Transform the color components to the colorspace domain.
            This is only used for DeviceN color spaces.
            </summary>
            <param name="input">Color to transform.</param>
            <returns>Color for the base color space.</returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.TransformTint(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Transform the color components to the colorspace domain.
            This is only used for DeviceN color spaces.
            </summary>
            <param name="input">Pointer to buffer containing the colors to transform.</param>
            <param name="output">Pointer to buffer receiving the transformed colors.</param>
            <param name="colorCount">Number of colors to transform.</param>
            <returns>Color for the base color space.</returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB.#ctor(TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB._cacheLock">
            <summary>
            a object used to lock the cachedDestination and cachedTransformation
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB._cachedDestination">
            <summary>
            Stores the last encounterd value of the destination ICC profile in order to 
            avoid creating a new transform when the destination ICC profile does not change.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB._cachedTransformation">
            <summary>
            Stores the value of the transformation that belongs to the _cachedDestination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.IndexedColorSpace,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="baseColorSpaceTransformation">The base color space transformation.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.IndexedColorSpace,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile,TallComponents.PDF.Base.Functions.IFunction[])">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="baseColorSpaceTransformation">The base color space transformation.</param>
            <param name="destination">The destination.</param>
            <param name="transfer">The transfer.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB.ConvertColor(TallComponents.PDF.Base.Number[],TallComponents.PDF.Base.Number[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.Lab,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.ConvertColor(TallComponents.PDF.Base.Number[],TallComponents.PDF.Base.Number[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.ConvertColor(System.Byte[],System.Byte[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationMode.HighSpeed">
            <summary>
            HighSpeed uses a faster algorithm but with less quality ( especially for DeviceCMYK ).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationMode.HighQuality">
            <summary>
            ICC Based profiles are used to transform colors from the color space to the device.
            Very good quality, but a bit slower.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor">
            <summary>
            Constructor called by DeviceGray Color Spaces.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.CalGray,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by CalGray Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.IndexedColorSpace,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by Indexed Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="baseColorSpaceTransformation">The transformation.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.IndexedColorSpace,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile,TallComponents.PDF.Base.Functions.IFunction[])">
            <summary>
            Constructor called by Indexed Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="baseColorSpaceTransformation">The transformation.</param>
            <param name="destination">Destination Color Space.</param>
            <param name="transfer">Transfer function (TR or TR2) from Graphic State Parameter Dictionary.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.Separation,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by Separation Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="transformation">The transformation.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Constructor called by IccBased Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.SetDeviceRGBPalette">
            <summary>
            Fill the palette with default RGB values
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.#ctor(TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.CalRgb,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.Lab,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="M:TallComponents.PDF.NumberingStyle.AlphaNumber(System.Int32)">
            <summary>
            Return the alpha representation of a number. (lowercase)
            </summary>
        </member>
        <member name="M:TallComponents.PDF.NumberingStyle.RomanNumber(System.Int32)">
            <summary>
            Return the roman representation of a number. (lowercase)
            </summary>
            <remarks>Valid for numbers from 1 to 3999.</remarks>
        </member>
        <member name="T:TallComponents.PDF.PropertyChangedEventArgs">
            <summary>
            Class containing data for PropertyChanged events.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PropertyChangedEventArgs.Name">
            <summary>
            Name of the propery that has changed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.PropertyChangedEventHandler">
            <summary>
            Represents the method that handles PropertyChanged events.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The PropertyChanged event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider">
            <summary>
            This abstract base class can be derived for custom annotation appearances.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.CanUpdateAppearance(TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            Indicates whether this provider is able to update an appearance for the given annotation.
            </summary>
            <param name="annotation">the annotation</param>
            <returns>True if the provider can create an updated appearance.</returns>
            <remarks>
            <para>By default, this property returns true. In principle, we should return true for
            any annotation that we support. The trouble is, that there are currently many types of
            markup annotations that have some fancy appearance. And some of these are not described
            very well.</para>
            <para>Setting this propery to false avoids having to implement complete appearance generators
            for each of these, and to instantly update these whenever Adobe feels like making things fancier.
            If false, the appearance will not get updated. It is still possible to move and resize the
            annotations, but then the existing appearance will be transformed. This is not always ideal, but
            a lot better than generating some crippled appearance, or no appearance at al.
            </para>
            <para>For some markup even, we never want to change an existing appearance. This is the case
            for stamps. So for stamps, we always set this propery to false. Note that we can still
            generate stamp appearance if they do not exist yet.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws the normal appearance of an annotation.
            This method is called when the associated appearance stream of 
            the annotation is updated or if the annotation must be flattened.
            </summary>
            <param name="shapes">Contains an empty shape collection.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>The caller will take care of correct positioning and rotation.</para>
            <para>If the annotatation is a widget the associated field can be retrieved through widget.Field.</para>
            <para>The appearance stream will not be included unless something has been added to the shape collection.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation,System.String)">
            <summary>
            Draws the normal appearance for the given string value.
            </summary>
            <param name="shapes">Will contain the appearance shapes.</param>
            <param name="annotation">The annotation.</param>
            <param name="value">The field value.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation,TallComponents.PDF.Layout.Shapes.Fields.ListOption[])">
            <summary>
            Draws the normal appearance for the given list options.
            </summary>
            <param name="shapes">Will contain the appearance shapes.</param>
            <param name="annotation">The annotation.</param>
            <param name="values">The list option values.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawDown(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws the down appearance of an annotation.
            This method is called when the associated appearance stream of 
            the annotation is updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>The caller will take care of correct positioning and rotation.</para>
            <para>If the annotatation is a widget the associated field can be retrieved through widget.Field.</para>
            <para>The appearance stream will not be included unless something has been added to the canvas.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawRollover(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws the roll-over appearance of an annotation.
            This method is called when the associated appearance stream of 
            the annotation is updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>The caller will take care of correct positioning and rotation.</para>
            <para>If the annotatation is a widget the associated field can be retrieved through widget.Field.</para>
            <para>The appearance stream will not be included unless something has been added to the canvas.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawDefaultBorderAppearance(TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            Override and return None if the derived appearance provider 
            draws a custom border and background.
            </summary>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>Default is Square.</para>
            <para>The layer provided in Draw will already contains the border when excuted.</para>
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Annotations.AppearanceProviders.BorderAppearance.None">
            <summary>
            No border is drawn.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.AppearanceProviders.BorderAppearance.Circle">
            <summary>
            A circle (ellipse) border is drawn.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.AppearanceProviders.BorderAppearance.Square">
            <summary>
            A square (rectangle) border is drawn.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.DefaultAppearanceProviderFactory">
            <summary>
            The default appearance provider factory used if no custom version is found.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.DefaultAppearanceProviderFactory.Create(TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This function returns a IAppearanceProvider which can Draw the appearance for the given annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code128BarcodeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code128BarcodeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code128BarcodeFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code2of5InterleavedBarcodeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code2of5InterleavedBarcodeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code2of5InterleavedBarcodeFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code3of9BarcodeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code3of9BarcodeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code3of9BarcodeFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.UnknownBarcodeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.UnknownBarcodeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.UnknownBarcodeFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CheckBoxFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CheckBoxFieldAppearance.#ctor">
            <summary>
            Create a new check-box field appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CheckBoxFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CreateShapes.TabbedTextShape">
            <summary>
            TextShape that keeps tracks of the number of tabs before it.
            </summary>
            <remarks>This class is so basic that we did not bother putting it in a separate file.
            If it gets extended, it should.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CreateShapes.TabbedTextShape.LeadingTabs">
            <summary>
            Number of tabs before this text fragment.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DateTimeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DateTimeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DateTimeFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DateTimeFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DropDownListFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DropDownListFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DropDownListFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DropDownListFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ExistingSignatureFieldAppearance">
            <summary>
            The signed signature field appearance can be used if the document is signed, 
            it is the default appearance for a signature field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ExistingSignatureFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ExistingSignatureFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ImageFieldAppearance">
            <summary>
            The field appearance can be used if the document is written,
            it is the default appearance for a field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ImageFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ImageFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ListBoxFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ListBoxFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ListBoxFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ListBoxFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.NumericFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.NumericFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.NumericFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PasswordFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PasswordFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PasswordFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
            <param name="drawContent">Render the containing text as well or the empty control only</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PasswordFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PushButtonFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PushButtonFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PushButtonFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.RadioButtonFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.RadioButtonFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.RadioButtonFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.SignedSignatureFieldAppearance">
            <summary>
            The signed signature field appearance can be used if the document is signed,
            it is the default appearance for a signature field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.SignedSignatureFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.SignedSignatureFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.TextFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.TextFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.TextFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
            <param name="drawContent">Render the containing text as well or the empty control only</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.TextFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnknownFieldAppearance">
            <summary>
            The unknown field appearance can be used if the document is written, 
            it is the default appearance for an unknown widget (annotation). 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnknownFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnknownFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnsignedSignatureFieldAppearance">
            <summary>
            The unsigned signature field appearance can be used if the document is written, 
            it is the default appearance for an unknown widget (annotation). 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnsignedSignatureFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnsignedSignatureFieldAppearance.DrawNormal(TallComponents.PDF.Layout.Shapes.ShapeCollection,TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.IAppearanceProviderFactory">
            <summary>
            Implementations of IAppearanceProviderFactory create a Appearance provider. You can implement this
            interface if you want to create custom appearance providers for annotations.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.IAppearanceProviderFactory.Create(TallComponents.PDF.Layout.Annotations.Annotation)">
            <summary>
            This function returns an AppearanceProvider which can Draw the appearance for the given annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.LinkAppearance">
            <summary>
            The link appearance is the default appearance for a link annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.LinkAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.LayerState">
            <summary>
            The possible values for state of the layer.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.LayerState.AlwaysOn">
            <summary>
            Always on independently of layers visibility.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.LayerState.AlwaysOff">
            <summary>
            Always off independently of layers visibility.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.LayerState.OnWhenVisible">
            <summary>
            Depends on layers visibility.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layer">
            <summary>
            This class represents a single layer item.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layer.PropertyChanged">
            <summary>
            Occurs when any property of the layer has changed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor(TallComponents.PDF.Base.Dictionary,TallComponents.PDF.Base.Dictionary)">
            <summary>
            Create a new (connected)Layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor">
            <summary>
            Create a new Layer, without a name.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor(System.String)">
            <summary>
            Create a new Layer.
            </summary>
            <param name="name">The name of this layer.</param>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new Layer.
            </summary>
            <param name="name">The name of this layer.</param>
            <param name="visible">The state if this layer should be visible or invisible by default.</param>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor(System.String,System.Boolean,TallComponents.PDF.Base.Dictionary)">
            <summary>
            Create a new (disconnected/cloned) Layer.
            </summary>
            <param name="name">The name of this layer.</param>
            <param name="visible">The state if this layer should be visible or invisible by default.</param>
            <param name="unclonedDictionary">The original (uncloned) dictionary.</param>
        </member>
        <member name="P:TallComponents.PDF.Layer.Name">
            <summary>
            The name of this layer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layer.Visible">
            <summary>
            The state if this layer must be visible or invisible when the page is rasterized.
            </summary>
            <remarks>
            By default this boolean is set the the default specified in the PDF document.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layer.Printable">
            <summary>
            The state if this layer is on when the page is printed.
            </summary>
            <remarks>
            By default this boolean is set the default specified in the PDF document.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layer.Exportable">
            <summary>
            The state if this layer must be visible when the page is exported.
            </summary>
            <remarks>
            By default this boolean is set the default specified in the PDF document.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layer.IsEqualUncloned(TallComponents.PDF.Base.Object)">
            <summary>
            Checks if the argument object is the same as the uncloned dictionary.
            </summary>
            <param name="obj"></param>
            <returns>True if the argument equals the uncloned dict.</returns>
            <remarks>The uncloned dictionary is merely used to keep track of the original relation between graphical objects and there
            layer object.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layer.Clone">
            <summary>
            Clones this Layer, and detach it from the original document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.System#ICloneable#Clone">
            <summary>
            Clones this Layer, and detach it from the original document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.ToString">
            <summary>
            The name is this Layer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layer.Properties">
            <summary>
            The Properties dictionary as stored in the document.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layers.LayerDefaultConfig">
            <summary>
            Every layer on the page has to be referenced in documents Root -> OCProperties dictionary as well, otherwise such a layer should be ignored by PDF processor.
            So the layer should have information about his configuration in OCProperties, and when the page is cloned and added into another document, the layers
            properties should be added to documents OCProperties dictionary as well.
            This class stores the following preferences from the optional content configurarion dictionary:
            ON - checks if the layer is referenced in ON array
            OFF - checks if the layer is referenced in OFF array
            AS - an array of usage application dictionaries. Stores in which ones is the layer referenced.
            Order - an array specifying the order for presentation of optional content groups on user interface. Checks if the layer is referenced in this array.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLocation.Unresolved">
            <summary>
            No definition for the font has been found.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLocation.System">
            <summary>
            The font is available as a system font. This is the case for example
            if no entry in the font substitution map matches the given font and
            a font with the same name has been found as a system font.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLocation.File">
            <summary>
            The font is available as a file. This is the case for example if
            a path to the font file has been added to the font substition map.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLocation.Data">
            <summary>
            The font is available as data. This is the case for example if the
            the font is embedded in the document or if the font data has been
            added as a stream to the font substitution map.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.FontLocationExtensions">
            <summary>
            Conversion helper methods
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontLocationExtensions.ToBaseLocation(TallComponents.PDF.Fonts.FontLocation)">
            <summary>
            Convert from public font location to base font location
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontLocationExtensions.ToPublicLocation(TallComponents.PDF.Base.Graphics.Fonts.FontLocation)">
            <summary>
            Convert from base font location to public font location
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsCurves">
            <summary>
            Render glyphs as curves.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsFont">
            <summary>
            Render glyphs as device fonts (GDI+, or WPF).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.FontRenderModeExtensions">
            <summary>
            Conversion helper methods
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontRenderModeExtensions.ToBaseMode(TallComponents.PDF.Fonts.FontRenderMode)">
            <summary>
            Convert from public font render mode to base font render mode
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontRenderModeExtensions.ToPublicMode(TallComponents.PDF.Base.Graphics.Fonts.FontRenderMode)">
            <summary>
            Convert from base font render mode to public font render mode
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.PdfFontName">
            <summary>
            The name of the font, as found in the PDF document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.PdfFontNameBytes">
            <summary>
            The bytes of the name of the font, as found in the PDF document.
            </summary>
            <remarks>
            According to the PDF spec section 5.5.2, "Note that for CJK (Chinese, Japanese, and Korean) fonts, the host font system’s font name is often encoded in the host operating system’s script. For instance, a Japanese font may have a name that is written in Japanese using some (unidentified) Japanese encoding."
            The original bytes can help to figure out the indended font name in such a situation.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.PredefinedEncoding">
            <summary>
            The predefined encoding.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.Embedded">
            <summary>
            Whether the font is embedded in the PDF document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.SystemFontName">
            <summary>
            The system font name. If the font could be resolved and the <see cref="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation"/>
            is
            <see cref="F:TallComponents.PDF.Fonts.FontLocation.System"/>, this property contains the name of the system font.
            </summary>
            <remarks>
            <para>If the properties of the event are not changed at all, the system
            will use the font as indicated in the Status.
            </para>
            <para>
            If the event handler changes the SystemFontName the system will 
            try to resolve the font to a system font with the new name.
            </para>
            <para>
            If the font name was changed by the event handler, and it could not be
            resolved, a new ResolveFont event will be issued. This event will have
            <see cref="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation"/> <see cref="F:TallComponents.PDF.Fonts.FontLocation.Unresolved"/>,
            and the SystemFontName will indicate
            the unknown system font name.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontPath">
            <summary>
            The Resolved font path. If the font could be resolved and the <see cref="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation"/>
            is <see cref="F:TallComponents.PDF.Fonts.FontLocation.File"/>, this value holds a path to the font.
            </summary>
            <remarks>
            <para>If the properties of the event are not changed at all, the system
            will use the font as indicated in the <see cref="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation"/>.
            </para>
            <para>
            If the event handler changes the path, the system will try to use the
            indicated file. Please note that changing the system font name takes precedence.
            If you want to explicitly refer to a font file, please leave the font name
            untouched, or set it to null.
            </para>
            <para>
            If the font path was changed by the event handler, and the indicated file
            could not be loaded, a new ResolveFont event will be issued. This event
            will have <see cref="T:TallComponents.PDF.Fonts.FontLocation"/> <see cref="F:TallComponents.PDF.Fonts.FontLocation.Unresolved"/>, and the FontPath will indicate
            the improper file.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.Bold">
            <summary>
            Specifies a bold variant of a system font.
            </summary>
            <remarks>In many cases, the PDF font name specifies the boldness of the
            font in the font name itself. For example "TimesNewRoman-Bold". If your system
            has a "Times New Roman" font, you can set the SystemFontName to "Times New Roman"
            and set Bold to true. This will normally resolve to the right device font.
            If the system does have a special bold variant of the Times New Roman font,
            it will resolve to that.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.Italic">
            <summary>
            Specifies an italic variant of a system font.
            </summary>
            <remarks>In many cases, the PDF font name specifies an italic font
            in the font name itself. For example "TimesNewRoman-Italic". If your system
            has a "Times New Roman" font, you can set the FontName to "Times New Roman" and set Italic to
            true. This will normally resolve to the right device font. If the system does have
            a special italic variant of the Times New Roman font, it will resolve to that.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontRenderMode">
            <summary>
            The mode that will be used to render the font.
            </summary>
            <remarks>
            <para>If the render mode is
            <see cref="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsCurves"/>,
            a font will be rendered as a sequence of
            curved lines (a path) that is subsequently filled by a color. This will
            result in accurate drawing, but it has a few drawbacks, notably it will
            increase the size of print jobs and WPF conversion results. It is also possible
            that text looks blurred, or irregular at low resolutions, which is an
            artefact of mapping vector graphics onto a low resolution device.
            </para>
            <para>To avoid the problems of "curve" rendering, one may specify that a
            font is rendered by the underlying graphics system of .Net itself (GDI+,
            or WPF, depending on the situation). The render mode should then be
            set to <see cref="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsFont"/>.
            This will also lead to good results,
            but only if a font definition is available in a format that .Net
            can deal with. Usually, this means that the fonts as they occur in a
            PDF document, have to be mapped onto TrueType font definitions that are
            installed on the system. The ResolveFont event allows one to do this.
            </para>
            <para>At the moment, we only support RenderAsFont for fonts that are
            installed on the system (which have Location <see cref="F:TallComponents.PDF.Fonts.FontLocation.System"/>). Likewise,
            <see cref="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsCurves"/>
            is only supported for fonts that have
            Status <see cref="F:TallComponents.PDF.Fonts.FontLocation.File"/>. If one specifies the "wrong"
            rendermode, another ResolveFont event will be raised that corrects
            this render mode.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation">
            <summary>
            Specifies whether a definition for the font has been found.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.Hinting">
            <summary>
            Specifies whether hinting is enabled for this font.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.BaseEventArgs">
            <summary>
            Gets the arguments in base format.
            All properties are mapped onto this object.
            </summary>
        </member>
        <member name="T:TallComponents.Html.HtmlHelper">
            <summary>
            Provides some generic HTML services.
            </summary>
        </member>
        <member name="M:TallComponents.Html.HtmlHelper.ReplaceHtmlEntityReferences(System.String)">
            <summary>
            Replaces named HTML entities to numbered value entities.
            </summary>
            <remarks>For example &amp;pound; is renamed to &amp;163;.</remarks>
            <param name="content">The content string to replace the entities in.</param>
            <returns>The string in which the entities have been renamed.</returns>
        </member>
        <member name="T:TallComponents.Html.XHtmlTextProcessor">
            <summary>
            Transforms well-formed XHTML into a collection of fragments using a stylesheet.
            </summary>
        </member>
        <member name="P:TallComponents.Html.XHtmlTextProcessor.PreserveWhitespace">
            <summary>
            If false, all sequences of whitespace (newlines, tabs, spaces) should be replaced
            by a single space. If true, they will be kept.
            </summary>
            <remarks>Not preserving whitespace is the normal way of processing (x)html. In rich
            text fields howevever, whitespace should be kept, basically because Adobe does this
            too. Well, at the moment we do this for newlines only.</remarks>
        </member>
        <member name="T:TallComponents.Images.Bitmap.BitmapFileHeader">
            <summary>
            Summary description for BitmapFileHeader.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Bitmap.BitmapInfoHeader">
            <summary>
            Summary description for BitmapInfoHeader.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Bitmap.BmpFile">
            <summary>
            Native .BMP processing for ImageObject
            </summary>
        </member>
        <member name="M:TallComponents.Images.Bitmap.BmpFile.SelectActiveIndex(System.Int32)">
            <summary>
            Multiple indexes not supported in BMP files
            </summary>
        </member>
        <member name="T:TallComponents.Images.Bitmap.BmpHeader">
            <summary>
            Summary description for BmpHeader.
            </summary>
        </member>
        <member name="T:TallComponents.Images.BitWriter">
            <summary>
            Writes bits to a stream.
            </summary>
        </member>
        <member name="M:TallComponents.Images.BitWriter.Write(System.Boolean)">
            <summary>
            The bit to write.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:TallComponents.Images.BitWriter.Write(System.Int32,System.Int32)">
            <summary>
            Several bits to write.
            </summary>
            <param name="value"></param>
            <param name="numBitsArg"></param>
        </member>
        <member name="M:TallComponents.Images.BitWriter.Flush">
            <summary>
            Flush the bit (can be used to align on a byte also)
            </summary>
        </member>
        <member name="T:TallComponents.Images.ImageCompression">
            <summary>
            Image compression methods.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.Uncompressed">
            <summary>
            The image is uncompressed. This is typically used for GDI/WPF bitmaps (and the actual compression will be determined after saving).
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.JBIG2Decode">
            <summary>
            JBIG2 image.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.CCITTFaxDecode">
            <summary>
            CCITT fax encoded image.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.DCT">
            <summary>
            DCT or JPEG encoded image.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.PNG">
            <summary>
            PNG encoded image. Only used for (de)serialisation at the moment.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.Flate">
            <summary>
            Flate encoded image data. This has only meaning in PDF, as there is no image file format that consists of just
            flate encoded pixels. Zip uses this internally, and PNG and Tiff mat use it internaly.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.LZW">
            <summary>
            LZW encoded image data. This has only meaning in PDF, as there is no image file format that consists of just
            LZW encoded pixels. Gif uses this internally.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.PackBits">
            <summary>
            Packbits. This has only meaning in PDF, as there is no image file format that consists of just
            PackBits encoded pixels.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.Auto">
            <summary>
            Auto = whatever is most appropriate. This should never be assigned to actual image data, only to the desired compression
            upon saving etc.
            </summary>
        </member>
        <member name="T:TallComponents.Images.ImageData">
            <summary>
            ImageData is the base class for image data containers.
            To implement native support for an image format, implement a specialized class.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageData.PhysicalHeight">
            <summary>
            The PhysicalHeight or the Height if the vertical resolution is not known.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageData.PhysicalWidth">
            <summary>
            The PhysicalWidth or the Width if the horizontal resolution is not known.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageData.Colors">
            <summary>
            The number of colors in the color table. Ignore if the image is not indexed.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageData.FrameCount">
            <summary>
            The number of frames in this image
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageData.ResolveTransparentColor(TallComponents.PDF.Layout.Colors.Color)">
            <summary>
            Find the index of a color in the color table to use for color masking.
            This code first tries an exact match using all color components (RGBA).
            If no match is found and Alpha is 0, a new search is performed for
            a color with matching RGB values and the highest possible alpha.
            If the no alpha is supported a simple RGB match is performed.
            </summary>
            <remarks>
            Only valid for indexed color models.
            </remarks>
            <param name="color">Color</param>
            <returns>Index of the color or -1 if not found.</returns>
        </member>
        <member name="P:TallComponents.Images.ImageData.TransparentColor">
            <summary>
            The default transparent color.
            </summary>
            <remarks>
            This is not supported by all image formats.
            </remarks>
        </member>
        <member name="P:TallComponents.Images.ImageData.CacheKey">
            <summary>
            A string to use for storing this image in cache. E.g. the path name.
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageData.ReadDataFromStream(System.IO.Stream,System.Byte[])">
            <summary>
            Reads data into a complete array, throwing an EndOfStreamException
            if the stream runs out of data first, or if an IOException
            naturally occurs.
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="data">The array to read bytes into. The array
            will be completely filled from the stream, so an appropriate
            size must be given.</param>
        </member>
        <member name="M:TallComponents.Images.ImageData.LoadImageFromFile(System.String,System.Int32)">
            <summary>
            Load an image from the file system. Will throw on error.
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageData.LoadImage(System.IO.Stream,System.Int32)">
            <summary>
            Load an image from a stream.
            </summary>
            <remarks>
            Images created with this method do not use image caching.
            </remarks>
            <param name="stream"></param>
            <param name="frameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.Images.ImageData.LoadImage(System.IO.Stream,System.String,System.Int32,System.Boolean)">
            <summary>
            Load an image from a stream. If path is not empty the image will be cached.
            </summary>
        </member>
        <member name="T:TallComponents.Images.MetaColorspace">
            <summary>
            Colorspaces of the image.
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Grayscale">
            <summary>
            1 channel (grayscale)
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Rgb">
            <summary>
            3 channels,
            1.: red,
            2.: geen,
            3.: blue
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Cmyk">
            <summary>
            4 channels,
            1.: cyan,
            2.: magenta,
            3.: yellow,
            4.: key (black)
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Ycck">
            <summary>
            It is a variant of the YCbCr model containing an additional K channel (black)
            4 channels,
            1.: Y,
            2.: Cb,
            3.: Cr
            4.: key (black)
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Ycbcr">
            <summary>
            3 channels,
            1.: Y,
            2.: Cb,
            3.: Cr
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.IndexedGray">
            <summary>
            Grayscale image with associated color table
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.IndexedRgb">
            <summary>
            RGB image with associated color table
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Unknown">
            <summary>
            Color space is not determined or non of the others
            </summary>
        </member>
        <member name="T:TallComponents.Images.ImageMaskImage">
            <summary>
            ImageMaskImage defines a monochrome image for an image. (Explicit Masking)
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageMaskImage.#ctor(TallComponents.PDF.Base.Stream)">
            <summary>
            Initialize a new ImageMaskImage, based on an existing Stream.
            </summary>
            <param name="underlyingStream"></param>
        </member>
        <member name="M:TallComponents.Images.ImageMaskImage.#ctor">
            <summary>
            Initialize a new SoftMaskImage.
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageMaskImage.#ctor(TallComponents.Images.SoftMaskImage)">
            <summary>
            Create a new ImageMaskImage from SoftMaskImage.
            </summary>
            <param name="imageData"></param>
        </member>
        <member name="T:TallComponents.Images.ImageProperties">
            <summary>
            Summary description for ImageProperties.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageProperties.Compression">
            <summary>
            This is the actual compression of the image data.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageProperties.PreferredCompression">
            <summary>
            This is used as a hint for (re)compressing the image in case compression is set to auto.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageProperties.FlipY">
            <summary>
            FlipY indicates whether the the pixels are in "normal" order - i.e starting at top-left, running down -, or
            whether they are "flipped" - i.e. starting at the bottom left, running up.
            </summary>
        </member>
        <member name="T:TallComponents.Images.SoftMaskImage">
            <summary>
            SoftMaskImage defines alpha transparency for an image
            </summary>
        </member>
        <member name="M:TallComponents.Images.SoftMaskImage.#ctor(TallComponents.PDF.Base.Stream)">
            <summary>
            Initialize a new SoftMaskImage, based on an existing Stream.
            </summary>
            <param name="underlyingStream"></param>
        </member>
        <member name="M:TallComponents.Images.SoftMaskImage.#ctor">
            <summary>
            Initialize a new SoftMaskImage.
            </summary>
        </member>
        <member name="M:TallComponents.Images.SoftMaskImage.#ctor(TallComponents.Images.ImageData,System.Boolean)">
            <summary>
            Create a new SoftMaskImage from ImageData.
            </summary>
            <param name="imageData"></param>
            <param name="flipY"></param>
        </member>
        <member name="T:TallComponents.Images.Tiff.PackBitsDecoder">
            <summary>
            Summary description for PackBitsDecoder.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Wpf.WpfBitmapSource">
            <summary>
            Summary description for WpfBitmapSource.
            </summary>
        </member>
        <member name="T:TallComponents.Licensing.License">
            <summary>
            The License class let you check if you have entered a valid license key.
            </summary>
            <remarks>
            It will check the licenses available for all instances in this app-domain.
            </remarks>
        </member>
        <member name="M:TallComponents.Licensing.License.IsValid">
            <summary>
            Check if this component detects a valid license key.
            </summary>
            <remarks>
            If the license is not valid an evaluation banner will be added to the document.
            </remarks>
        </member>
        <member name="M:TallComponents.Licensing.License.GetLicenseInfo">
            <summary>
            This method returns some information which is used to check if the component runs in evaluation mode, or in unlock/purchased mode.
            </summary>
        </member>
        <member name="P:TallComponents.Licensing.KeyGenerator.UseActivationId">
            <summary>
            If set, the activation id will be prefixed to the license key.
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.KeyGenerator.generate(System.String,System.Int32)">
            <summary>
            Generate a new license key that does not expire, based on the runtime attribute.
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.KeyGenerator.generate(System.String,System.Int32,System.String,System.String)">
            <summary>
            Generate a new license key, based on the runtime attribute and expiration date.
            </summary>
            <param name="runtimeAttribute"></param>
            <param name="activationId">The activation ID.</param>
            <param name="startingDate">Starting date on which the license is valid, in the format MMM-dd-yyyy.</param>
            <param name="expirationDate">Expiration date, in the format MMM-dd-yyyy.
            Use the empty string in order not to use an expiration date.
            </param>
            <returns>
            A license key. If an expiration date is specified (i.e. expirationDate is not the empty
            string, a pipe symbol and the date are appended to the key.
            </returns>
            <remarks>
            The expiration date is appended to the key, because the AppSettings do not allow an extra XML
            tag or parameter in the configuration file. For consistency we use the same method also if the license
            is not contained in the configuration file, but elsewhere (attributes, etc.).
            </remarks>
        </member>
        <member name="T:TallComponents.Licensing.LicenseAttribute">
            <summary>
            Base class of product specific custom attributes that let you enter
            the redistribution license key as an attribute of the entry or calling assembly.
            </summary>
            <remarks>
            Each product offers its own specialization of LicenseAttribute. 
            </remarks>
        </member>
        <member name="P:TallComponents.Licensing.LicenseAttribute.Key">
            <summary>
            The type of license key.
            </summary>
        </member>
        <member name="P:TallComponents.Licensing.LicenseAttribute.Value">
            <summary>
            The license key value.
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.LicenseAttribute.AddLicense(System.String,System.String)">
            <summary>
            Add a license programmatically.
            </summary>
            <param name="licenseKey">The type of license key.</param>
            <param name="licenseKeyValue">The license key value.</param>
        </member>
        <member name="T:TallComponents.Licensing.LicenseChecker">
            <summary>
            Summary description for LicenseChecker.
            </summary>
            <summary>
            Summary description for LicenseChecker.
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.LicenseChecker.Initialize">
            <summary>
            Initialise the license checker in a proper context, i.e. at a
            point called by client code, and not via an event handler invoked
            by winforms. At the moment, this is only mandatory for ReaderControls
            and Rasterizer (the latter because of DrawJob and WPF rendering).
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.LicenseChecker.Proof.hasExpired(System.String,System.String)">
            <summary>
            Returns true if today is not in the range [startDate .. expirationDate),
            false otherwise.
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.LicenseChecker.ToString">
            <summary>
            The ToString method returns a string that represents the current Object.
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="T:TallComponents.Licensing.LicenseCollection">
            <summary>
            The LicenseCollection class let you enter the key and value programmatically.
            </summary>
            <remarks>
            The licenses you add will be available for all instances in this app-domain.
            </remarks>
        </member>
        <member name="M:TallComponents.Licensing.LicenseCollection.Add(System.String,System.String)">
            <summary>
            Add a license programmatically.
            </summary>
            <param name="licenseKey">The type of license key.</param>
            <param name="licenseKeyValue">The license key value.</param>
        </member>
        <member name="P:TallComponents.Licensing.LicenseCollection.Licenses">
            <summary>
            Called from LicenseChecker.
            </summary>
        </member>
        <member name="T:TallComponents.Licensing.Notice">
            <summary>
            Summary description for Notice.
            </summary>
        </member>
        <member name="T:TallComponents.Licensing.TallPDFLicenseAttribute">
             <summary>
             License key attribute. Use this attribute to include a license key with your assembly or application.
             </summary>
             <example>
             Include the following code in your AssemblyInfo:
             <para>C#</para>
             <code>
             using TallComponents.Licensing;
             
             [assembly: TallPDFLicense( "TallPDF.NET 3.0 Server Key", "YourKeyValueHere" )] 
             </code>
             
             <para>VB.NET</para>
             <code>
             Imports TallComponents.Licensing
            
             &lt;Assembly: TallPDFLicense("TallPDF.NET 3.0 Server Key", "YourKeyValueHere")&gt;
             </code>
             
             The license key name depends on the type of license you have purchased. The value is generated when 
             you activate your license.
             <para>You can obtain the license key name and value by logging in to 
             <see href="http://www.tallcomponents.com/?id=myaccount-licenses">your account</see> on 
             <see href="http://www.tallcomponents.com">our website</see>.</para>
             </example>
        </member>
        <member name="M:TallComponents.Licensing.TallPDFLicenseAttribute.#ctor(System.String,System.String)">
            <summary>
            Create a new licensing attribute. Do not use this directly but specify the attribute in 
            the AssemblyInfo.
            </summary>
            <param name="key">Name of the license key.</param>
            <param name="value">Value of the license key.</param>
        </member>
        <member name="P:TallComponents.Licensing.TallPDFLicenseAttribute.Key">
            <summary>
            Get the name of the license key.
            </summary>
        </member>
        <member name="P:TallComponents.Licensing.TallPDFLicenseAttribute.Value">
            <summary>
            Get the value of the license key.
            </summary>
        </member>
        <member name="T:TallComponents.Utility.EventBasedCredentials">
            <summary>
            Helper class to cast from the previously used GetWebCredentials event, to the ICredentials used in the current UrlLoader version.
            </summary>
        </member>
        <member name="M:TallComponents.Utility.EventBasedCredentials.#ctor(System.Object,TallComponents.PDF.Layout.GetWebCredentialsEventHandler)">
            <summary>
            Constrctor.
            </summary>
            <param name="sender">The original requester for the load command, used by the handler.</param>
            <param name="handler">The delegate to call to retrieve the web credentials.</param>
        </member>
        <member name="M:TallComponents.Utility.EventBasedCredentials.GetCredential(System.Uri,System.String)">
            <summary>
             Returns a System.Net.NetworkCredential object that is associated with the
             specified URI, and authentication type.
            </summary>
            <param name="uri">The System.Uri that the client is providing authentication for.</param>
            <param name="authType">The type of authentication, as defined in the System.Net.IAuthenticationModule.AuthenticationType property.</param>
            <returns>
             The System.Net.NetworkCredential that is associated with the specified URI
             and authentication type, or, if no credentials are available, null.
            </returns>
        </member>
        <member name="T:TallComponents.Utility.StringReaderHelper">
            <summary>
            Helps converting a stream into a string.
            </summary>
        </member>
        <member name="M:TallComponents.Utility.StringReaderHelper.ReadAsStringFromStream(System.IO.Stream)">
            <summary>
            Reads the content from the stream into a string.
            </summary>
            <remarks>The string will be determined using the UTF8-encoding.</remarks>
            <param name="inputStream">The stream to read.</param>
            <returns>The string with the content read from the stream.</returns>
        </member>
        <member name="M:TallComponents.Utility.StringReaderHelper.ReadAsStringFromBytes(System.Byte[])">
            <summary>
            Reads the content from the byte[] into a string.
            </summary>
            <remarks>The string will be determined using the UTF8-encoding.</remarks>
            <param name="input">The bytes to read.</param>
            <returns>The string with the content from the bytes.</returns>
        </member>
        <member name="T:TallComponents.ICollection`1">
            <summary>
            Collection interface.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:TallComponents.ICollection`1.Add(`0)">
            <summary>
            Add
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.Remove(`0)">
            <summary>
            Remove
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.AddRange(`0[])">
            <summary>
            AddRange
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.Insert(System.Int32,`0)">
            <summary>
            Insert
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.RemoveAt(System.Int32)">
            <summary>
            RemoveAt
            </summary>
        </member>
        <member name="T:TallComponents.IReadOnlyCollection`1">
            <summary>
            This interface is used to make sure all our collection classes share the same interface.
            </summary>
            <typeparam name="T">The type fron the collection</typeparam>
        </member>
        <member name="P:TallComponents.IReadOnlyCollection`1.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:TallComponents.IReadOnlyCollection`1.Contains(`0)">
            <summary>
            Contains
            </summary>
        </member>
        <member name="M:TallComponents.IReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            IndexOf
            </summary>
        </member>
        <member name="P:TallComponents.IReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Index property
            </summary>
        </member>
        <member name="M:TallComponents.XhtmlConverter.Drawing.Pdf.PdfDrawTarget.#ctor">
            <summary>
            Default ctr must be available for Batch-converter (will be instanciated with reflection)
            </summary>
        </member>
        <member name="M:TallComponents.XhtmlConverter.Drawing.Pdf.PdfImage.GetShape">
            <summary>
            Gets a cloned shape collection.
            </summary>
        </member>
        <member name="M:TallComponents.XhtmlConverter.Drawing.Pdf.PdfImage.Clone">
            <summary>
            Clone this object.
            </summary>
        </member>
        <member name="P:TallComponents.XhtmlConverter.Drawing.Pdf.PdfImage.Size">
            <summary>
            Gets the size of this image in points.
            </summary>
        </member>
        <member name="P:TallComponents.XhtmlConverter.Drawing.Pdf.PdfImage.AspectRatio">
            <summary>
            Get the aspect ratio of this image
            </summary>
        </member>
        <member name="P:TallComponents.XhtmlConverter.Drawing.Pdf.PdfImage.ActualWidth">
            <summary>
            The width of the image content when it's about to be drawn.
            This property is set for images with a percentage specified intrinsic width.
            </summary>
        </member>
        <member name="P:TallComponents.XhtmlConverter.Drawing.Pdf.PdfImage.ActualHeight">
            <summary>
            The height of the image content when it's about to be drawn.
            This property is set for images with a percentage specified intrinsic height.
            </summary>
        </member>
        <member name="M:TallComponents.XhtmlConverter.Drawing.Pdf.PdfLayer.DrawTiledImage(System.Double,System.Double,System.Int32,System.Int32,TallComponents.Css.Drawing.Common.IImage)">
            <summary>
            Draw a tiled images
            </summary>
        </member>
        <member name="M:TallComponents.XhtmlConverter.Drawing.Pdf.PdfRasterImage.#ctor(TallComponents.PDF.Layout.Shapes.ImageShape)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:TallComponents.XhtmlConverter.Drawing.Pdf.PdfRasterImage.Clone">
            <summary>
            Clone this object.
            </summary>
        </member>
        <member name="M:TallComponents.XhtmlConverter.Drawing.Pdf.PdfRasterImage.Create(TallComponents.XhtmlConverter.Drawing.Pdf.IShapeFactory,System.IO.Stream)">
            <summary>
            Create an image from the given stream.
            </summary>
        </member>
        <member name="M:TallComponents.XhtmlConverter.Drawing.Pdf.PdfRasterImage.ConvertToStandardPoints(System.Double,System.Double)">
            <summary>
            Convert the given points converted to 96 DPI.
            </summary>
        </member>
        <member name="T:TallComponents.XhtmlConverter.Drawing.Pdf.ShapeFactory">
            <summary>
            Summary description for ShapeFactory.
            </summary>
        </member>
        <member name="T:TallComponents.XhtmlConverter.Drawing.Pdf.Xhtml.PdfForms">
            <summary>
            IForms implementation for PDF.
            </summary>
        </member>
        <member name="M:TallComponents.XhtmlConverter.Drawing.Pdf.Xhtml.PdfForms.GetStackingLayer(TallComponents.Css.Drawing.Common.ILayer,TallComponents.Css.Boxing.BoxType)">
            <summary>
            Gets the stacking layer based on the given layer and box.
            </summary>
        </member>
    </members>
</doc>
